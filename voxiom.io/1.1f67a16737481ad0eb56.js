(window.webpackJsonp = window.webpackJsonp || []).push([[1], {
    105: function (e, t) {
        (function (t) {
            e.exports = t
        }).call(this, {})
    }, 122: function (e, t, n) {
        "use strict";
        var r = n(172), i = n(98), a = i("%Function.prototype.apply%"), o = i("%Function.prototype.call%"),
            s = i("%Reflect.apply%", !0) || r.call(o, a);
        e.exports = function () {
            return s(r, o, arguments)
        }, e.exports.apply = function () {
            return s(r, a, arguments)
        }
    }, 126: function (e, t, n) {
        var r = n(341), i = n(342), a = n(343), o = n(344), s = n(345), c = n(346), l = n(347);
        l.alea = r, l.xor128 = i, l.xorwow = a, l.xorshift7 = o, l.xor4096 = s, l.tychei = c, e.exports = l
    }, 128: function (e, t, n) {
        "use strict";
        var r = n(355), i = "function" == typeof Symbol && "symbol" == typeof Symbol("foo"),
            a = Object.prototype.toString, o = Array.prototype.concat, s = Object.defineProperty, c = s && function () {
                var e = {};
                try {
                    for (var t in s(e, "x", {enumerable: !1, value: e}), e) return !1;
                    return e.x === e
                } catch (e) {
                    return !1
                }
            }(), l = function (e, t, n, r) {
                var i;
                (!(t in e) || "function" == typeof (i = r) && "[object Function]" === a.call(i) && r()) && (c ? s(e, t, {
                    configurable: !0,
                    enumerable: !1,
                    value: n,
                    writable: !0
                }) : e[t] = n)
            }, u = function (e, t) {
                var n = arguments.length > 2 ? arguments[2] : {}, a = r(t);
                i && (a = o.call(a, Object.getOwnPropertySymbols(t)));
                for (var s = 0; s < a.length; s += 1) l(e, a[s], t[a[s]], n[a[s]])
            };
        u.supportsDescriptors = !!c, e.exports = u
    }, 141: function (e, t, n) {
        "use strict";
        var r = n(98), i = n(122), a = i(r("String.prototype.indexOf"));
        e.exports = function (e, t) {
            var n = r(e, !!t);
            return "function" == typeof n && a(e, ".prototype.") ? i(n) : n
        }
    }, 172: function (e, t, n) {
        "use strict";
        var r = n(353);
        e.exports = Function.prototype.bind || r
    }, 173: function (e, t, n) {
        "use strict";
        (function (t) {
            var r = t.Symbol, i = n(354);
            e.exports = function () {
                return "function" == typeof r && ("function" == typeof Symbol && ("symbol" == typeof r("foo") && ("symbol" == typeof Symbol("bar") && i())))
            }
        }).call(this, n(27))
    }, 174: function (e, t, n) {
        "use strict";
        var r = Object.prototype.toString;
        e.exports = function (e) {
            var t = r.call(e), n = "[object Arguments]" === t;
            return n || (n = "[object Array]" !== t && null !== e && "object" == typeof e && "number" == typeof e.length && e.length >= 0 && "[object Function]" === r.call(e.callee)), n
        }
    }, 176: function (e, t, n) {
        "use strict";
        var r = n(98), i = r("%TypeError%"), a = r("%Number%"), o = r("%RegExp%"), s = r("%parseInt%"), c = n(141),
            l = n(357), u = n(358), h = c("String.prototype.slice"), p = l(/^0b[01]+$/i), d = l(/^0o[0-7]+$/i),
            f = l(/^[-+]0x[0-9a-f]+$/i), m = l(new o("[" + ["", "​", "￾"].join("") + "]", "g")),
            v = ["\t\n\v\f\r   ᠎    ", "         　\u2028", "\u2029\ufeff"].join(""),
            g = new RegExp("(^[" + v + "]+)|([" + v + "]+$)", "g"), y = c("String.prototype.replace"), x = n(359);
        e.exports = function e(t) {
            var n = u(t) ? t : x(t, a);
            if ("symbol" == typeof n) throw new i("Cannot convert a Symbol value to a number");
            if ("string" == typeof n) {
                if (p(n)) return e(s(h(n, 2), 2));
                if (d(n)) return e(s(h(n, 2), 8));
                if (m(n) || f(n)) return NaN;
                var r = function (e) {
                    return y(e, g, "")
                }(n);
                if (r !== n) return e(r)
            }
            return a(n)
        }
    }, 177: function (e, t, n) {
        "use strict";
        e.exports = Number.isNaN || function (e) {
            return e != e
        }
    }, 178: function (e, t, n) {
        "use strict";
        var r = Number.isNaN || function (e) {
            return e != e
        };
        e.exports = Number.isFinite || function (e) {
            return "number" == typeof e && !r(e) && e !== 1 / 0 && e !== -1 / 0
        }
    }, 180: function (e, t, n) {
        "use strict";
        /*! https://mths.be/codepointat v1.0.0 by @mathias */
        var r = n(122), i = n(128), a = n(181), o = n(182), s = n(374), c = r(o());
        i(c, {getPolyfill: o, implementation: a, shim: s}), e.exports = c
    }, 181: function (e, t, n) {
        "use strict";
        /*! https://mths.be/codepointat v1.0.0 by @mathias */
        var r = n(141), i = n(367), a = n(369), o = n(370), s = r("String.prototype.charCodeAt");
        e.exports = function (e) {
            var t = i(this), n = a(t), r = n.length, c = o(e);
            if (!(c < 0 || c >= r)) {
                var l, u = s(n, c);
                return u >= 55296 && u <= 56319 && r > c + 1 && (l = s(n, c + 1)) >= 56320 && l <= 57343 ? 1024 * (u - 55296) + l - 56320 + 65536 : u
            }
        }
    }, 182: function (e, t, n) {
        "use strict";
        /*! https://mths.be/codepointat v1.0.0 by @mathias */
        var r = n(181);
        e.exports = function () {
            return String.prototype.codePointAt || r
        }
    }, 336: function (e, t, n) {
        "use strict";
        var r, i = "object" == typeof Reflect ? Reflect : null,
            a = i && "function" == typeof i.apply ? i.apply : function (e, t, n) {
                return Function.prototype.apply.call(e, t, n)
            };
        r = i && "function" == typeof i.ownKeys ? i.ownKeys : Object.getOwnPropertySymbols ? function (e) {
            return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))
        } : function (e) {
            return Object.getOwnPropertyNames(e)
        };
        var o = Number.isNaN || function (e) {
            return e != e
        };

        function s() {
            s.init.call(this)
        }

        e.exports = s, e.exports.once = function (e, t) {
            return new Promise((function (n, r) {
                function i() {
                    void 0 !== a && e.removeListener("error", a), n([].slice.call(arguments))
                }

                var a;
                "error" !== t && (a = function (n) {
                    e.removeListener(t, i), r(n)
                }, e.once("error", a)), e.once(t, i)
            }))
        }, s.EventEmitter = s, s.prototype._events = void 0, s.prototype._eventsCount = 0, s.prototype._maxListeners = void 0;
        var c = 10;

        function l(e) {
            if ("function" != typeof e) throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof e)
        }

        function u(e) {
            return void 0 === e._maxListeners ? s.defaultMaxListeners : e._maxListeners
        }

        function h(e, t, n, r) {
            var i, a, o, s;
            if (l(n), void 0 === (a = e._events) ? (a = e._events = Object.create(null), e._eventsCount = 0) : (void 0 !== a.newListener && (e.emit("newListener", t, n.listener ? n.listener : n), a = e._events), o = a[t]), void 0 === o) o = a[t] = n, ++e._eventsCount; else if ("function" == typeof o ? o = a[t] = r ? [n, o] : [o, n] : r ? o.unshift(n) : o.push(n), (i = u(e)) > 0 && o.length > i && !o.warned) {
                o.warned = !0;
                var c = new Error("Possible EventEmitter memory leak detected. " + o.length + " " + String(t) + " listeners added. Use emitter.setMaxListeners() to increase limit");
                c.name = "MaxListenersExceededWarning", c.emitter = e, c.type = t, c.count = o.length, s = c, console && console.warn && console.warn(s)
            }
            return e
        }

        function p() {
            if (!this.fired) return this.target.removeListener(this.type, this.wrapFn), this.fired = !0, 0 === arguments.length ? this.listener.call(this.target) : this.listener.apply(this.target, arguments)
        }

        function d(e, t, n) {
            var r = {fired: !1, wrapFn: void 0, target: e, type: t, listener: n}, i = p.bind(r);
            return i.listener = n, r.wrapFn = i, i
        }

        function f(e, t, n) {
            var r = e._events;
            if (void 0 === r) return [];
            var i = r[t];
            return void 0 === i ? [] : "function" == typeof i ? n ? [i.listener || i] : [i] : n ? function (e) {
                for (var t = new Array(e.length), n = 0; n < t.length; ++n) t[n] = e[n].listener || e[n];
                return t
            }(i) : v(i, i.length)
        }

        function m(e) {
            var t = this._events;
            if (void 0 !== t) {
                var n = t[e];
                if ("function" == typeof n) return 1;
                if (void 0 !== n) return n.length
            }
            return 0
        }

        function v(e, t) {
            for (var n = new Array(t), r = 0; r < t; ++r) n[r] = e[r];
            return n
        }

        Object.defineProperty(s, "defaultMaxListeners", {
            enumerable: !0, get: function () {
                return c
            }, set: function (e) {
                if ("number" != typeof e || e < 0 || o(e)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + e + ".");
                c = e
            }
        }), s.init = function () {
            void 0 !== this._events && this._events !== Object.getPrototypeOf(this)._events || (this._events = Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0
        }, s.prototype.setMaxListeners = function (e) {
            if ("number" != typeof e || e < 0 || o(e)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e + ".");
            return this._maxListeners = e, this
        }, s.prototype.getMaxListeners = function () {
            return u(this)
        }, s.prototype.emit = function (e) {
            for (var t = [], n = 1; n < arguments.length; n++) t.push(arguments[n]);
            var r = "error" === e, i = this._events;
            if (void 0 !== i) r = r && void 0 === i.error; else if (!r) return !1;
            if (r) {
                var o;
                if (t.length > 0 && (o = t[0]), o instanceof Error) throw o;
                var s = new Error("Unhandled error." + (o ? " (" + o.message + ")" : ""));
                throw s.context = o, s
            }
            var c = i[e];
            if (void 0 === c) return !1;
            if ("function" == typeof c) a(c, this, t); else {
                var l = c.length, u = v(c, l);
                for (n = 0; n < l; ++n) a(u[n], this, t)
            }
            return !0
        }, s.prototype.addListener = function (e, t) {
            return h(this, e, t, !1)
        }, s.prototype.on = s.prototype.addListener, s.prototype.prependListener = function (e, t) {
            return h(this, e, t, !0)
        }, s.prototype.once = function (e, t) {
            return l(t), this.on(e, d(this, e, t)), this
        }, s.prototype.prependOnceListener = function (e, t) {
            return l(t), this.prependListener(e, d(this, e, t)), this
        }, s.prototype.removeListener = function (e, t) {
            var n, r, i, a, o;
            if (l(t), void 0 === (r = this._events)) return this;
            if (void 0 === (n = r[e])) return this;
            if (n === t || n.listener === t) 0 == --this._eventsCount ? this._events = Object.create(null) : (delete r[e], r.removeListener && this.emit("removeListener", e, n.listener || t)); else if ("function" != typeof n) {
                for (i = -1, a = n.length - 1; a >= 0; a--) if (n[a] === t || n[a].listener === t) {
                    o = n[a].listener, i = a;
                    break
                }
                if (i < 0) return this;
                0 === i ? n.shift() : function (e, t) {
                    for (; t + 1 < e.length; t++) e[t] = e[t + 1];
                    e.pop()
                }(n, i), 1 === n.length && (r[e] = n[0]), void 0 !== r.removeListener && this.emit("removeListener", e, o || t)
            }
            return this
        }, s.prototype.off = s.prototype.removeListener, s.prototype.removeAllListeners = function (e) {
            var t, n, r;
            if (void 0 === (n = this._events)) return this;
            if (void 0 === n.removeListener) return 0 === arguments.length ? (this._events = Object.create(null), this._eventsCount = 0) : void 0 !== n[e] && (0 == --this._eventsCount ? this._events = Object.create(null) : delete n[e]), this;
            if (0 === arguments.length) {
                var i, a = Object.keys(n);
                for (r = 0; r < a.length; ++r) "removeListener" !== (i = a[r]) && this.removeAllListeners(i);
                return this.removeAllListeners("removeListener"), this._events = Object.create(null), this._eventsCount = 0, this
            }
            if ("function" == typeof (t = n[e])) this.removeListener(e, t); else if (void 0 !== t) for (r = t.length - 1; r >= 0; r--) this.removeListener(e, t[r]);
            return this
        }, s.prototype.listeners = function (e) {
            return f(this, e, !0)
        }, s.prototype.rawListeners = function (e) {
            return f(this, e, !1)
        }, s.listenerCount = function (e, t) {
            return "function" == typeof e.listenerCount ? e.listenerCount(t) : m.call(e, t)
        }, s.prototype.listenerCount = m, s.prototype.eventNames = function () {
            return this._eventsCount > 0 ? r(this._events) : []
        }
    }, 339: function (e, t, n) {
        "use strict";
        n.d(t, "a", (function () {
            return i
        }));
        var r = n(80), i = function () {
            function e(e) {
                r.O.call(this, e), this.dracoLoader = null, this.ddsLoader = null
            }

            function t() {
                var e = {};
                return {
                    get: function (t) {
                        return e[t]
                    }, add: function (t, n) {
                        e[t] = n
                    }, remove: function (t) {
                        delete e[t]
                    }, removeAll: function () {
                        e = {}
                    }
                }
            }

            e.prototype = Object.assign(Object.create(r.O.prototype), {
                constructor: e, load: function (e, t, n, i) {
                    var a, o = this;
                    a = "" !== this.resourcePath ? this.resourcePath : "" !== this.path ? this.path : r.P.extractUrlBase(e), o.manager.itemStart(e);
                    var s = function (t) {
                        i ? i(t) : console.error(t), o.manager.itemError(e), o.manager.itemEnd(e)
                    }, c = new r.u(o.manager);
                    c.setPath(this.path), c.setResponseType("arraybuffer"), c.setRequestHeader(this.requestHeader), "use-credentials" === o.crossOrigin && c.setWithCredentials(!0), c.load(e, (function (n) {
                        try {
                            o.parse(n, a, (function (n) {
                                t(n), o.manager.itemEnd(e)
                            }), s)
                        } catch (e) {
                            s(e)
                        }
                    }), n, s)
                }, setDRACOLoader: function (e) {
                    return this.dracoLoader = e, this
                }, setDDSLoader: function (e) {
                    return this.ddsLoader = e, this
                }, parse: function (e, t, l, u) {
                    var f, g = {};
                    if ("string" == typeof e) f = e; else if (r.P.decodeText(new Uint8Array(e, 0, 4)) === c) {
                        try {
                            g[n.KHR_BINARY_GLTF] = new h(e)
                        } catch (e) {
                            return void (u && u(e))
                        }
                        f = g[n.KHR_BINARY_GLTF].content
                    } else f = r.P.decodeText(new Uint8Array(e));
                    var y = JSON.parse(f);
                    if (void 0 === y.asset || y.asset.version[0] < 2) u && u(new Error("THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported.")); else {
                        if (y.extensionsUsed) for (var x = 0; x < y.extensionsUsed.length; ++x) {
                            var b = y.extensionsUsed[x], _ = y.extensionsRequired || [];
                            switch (b) {
                                case n.KHR_LIGHTS_PUNCTUAL:
                                    g[b] = new a(y);
                                    break;
                                case n.KHR_MATERIALS_CLEARCOAT:
                                    g[b] = new s;
                                    break;
                                case n.KHR_MATERIALS_UNLIT:
                                    g[b] = new o;
                                    break;
                                case n.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:
                                    g[b] = new m;
                                    break;
                                case n.KHR_DRACO_MESH_COMPRESSION:
                                    g[b] = new p(y, this.dracoLoader);
                                    break;
                                case n.MSFT_TEXTURE_DDS:
                                    g[b] = new i(this.ddsLoader);
                                    break;
                                case n.KHR_TEXTURE_TRANSFORM:
                                    g[b] = new d;
                                    break;
                                case n.KHR_MESH_QUANTIZATION:
                                    g[b] = new v;
                                    break;
                                default:
                                    _.indexOf(b) >= 0 && console.warn('THREE.GLTFLoader: Unknown extension "' + b + '".')
                            }
                        }
                        var w = new G(y, g, {
                            path: t || this.resourcePath || "",
                            crossOrigin: this.crossOrigin,
                            manager: this.manager
                        });
                        w.fileLoader.setRequestHeader(this.requestHeader), w.parse(l, u)
                    }
                }
            });
            var n = {
                KHR_BINARY_GLTF: "KHR_binary_glTF",
                KHR_DRACO_MESH_COMPRESSION: "KHR_draco_mesh_compression",
                KHR_LIGHTS_PUNCTUAL: "KHR_lights_punctual",
                KHR_MATERIALS_CLEARCOAT: "KHR_materials_clearcoat",
                KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS: "KHR_materials_pbrSpecularGlossiness",
                KHR_MATERIALS_UNLIT: "KHR_materials_unlit",
                KHR_TEXTURE_TRANSFORM: "KHR_texture_transform",
                KHR_MESH_QUANTIZATION: "KHR_mesh_quantization",
                MSFT_TEXTURE_DDS: "MSFT_texture_dds"
            };

            function i(e) {
                if (!e) throw new Error("THREE.GLTFLoader: Attempting to load .dds texture without importing DDSLoader");
                this.name = n.MSFT_TEXTURE_DDS, this.ddsLoader = e
            }

            function a(e) {
                this.name = n.KHR_LIGHTS_PUNCTUAL;
                var t = e.extensions && e.extensions[n.KHR_LIGHTS_PUNCTUAL] || {};
                this.lightDefs = t.lights || []
            }

            function o() {
                this.name = n.KHR_MATERIALS_UNLIT
            }

            function s() {
                this.name = n.KHR_MATERIALS_CLEARCOAT
            }

            a.prototype.loadLight = function (e) {
                var t, n = this.lightDefs[e], i = new r.p(16777215);
                void 0 !== n.color && i.fromArray(n.color);
                var a = void 0 !== n.range ? n.range : 0;
                switch (n.type) {
                    case"directional":
                        (t = new r.q(i)).target.position.set(0, 0, -1), t.add(t.target);
                        break;
                    case"point":
                        (t = new r.lb(i)).distance = a;
                        break;
                    case"spot":
                        (t = new r.Cb(i)).distance = a, n.spot = n.spot || {}, n.spot.innerConeAngle = void 0 !== n.spot.innerConeAngle ? n.spot.innerConeAngle : 0, n.spot.outerConeAngle = void 0 !== n.spot.outerConeAngle ? n.spot.outerConeAngle : Math.PI / 4, t.angle = n.spot.outerConeAngle, t.penumbra = 1 - n.spot.innerConeAngle / n.spot.outerConeAngle, t.target.position.set(0, 0, -1), t.add(t.target);
                        break;
                    default:
                        throw new Error('THREE.GLTFLoader: Unexpected light type, "' + n.type + '".')
                }
                return t.position.set(0, 0, 0), t.decay = 2, void 0 !== n.intensity && (t.intensity = n.intensity), t.name = n.name || "light_" + e, Promise.resolve(t)
            }, o.prototype.getMaterialType = function () {
                return r.Y
            }, o.prototype.extendParams = function (e, t, n) {
                var i = [];
                e.color = new r.p(1, 1, 1), e.opacity = 1;
                var a = t.pbrMetallicRoughness;
                if (a) {
                    if (Array.isArray(a.baseColorFactor)) {
                        var o = a.baseColorFactor;
                        e.color.fromArray(o), e.opacity = o[3]
                    }
                    void 0 !== a.baseColorTexture && i.push(n.assignTexture(e, "map", a.baseColorTexture))
                }
                return Promise.all(i)
            }, s.prototype.getMaterialType = function () {
                return r.Z
            }, s.prototype.extendParams = function (e, t, n) {
                var i = [], a = t.extensions[this.name];
                if (void 0 !== a.clearcoatFactor && (e.clearcoat = a.clearcoatFactor), void 0 !== a.clearcoatTexture && i.push(n.assignTexture(e, "clearcoatMap", a.clearcoatTexture)), void 0 !== a.clearcoatRoughnessFactor && (e.clearcoatRoughness = a.clearcoatRoughnessFactor), void 0 !== a.clearcoatRoughnessTexture && i.push(n.assignTexture(e, "clearcoatRoughnessMap", a.clearcoatRoughnessTexture)), void 0 !== a.clearcoatNormalTexture && (i.push(n.assignTexture(e, "clearcoatNormalMap", a.clearcoatNormalTexture)), void 0 !== a.clearcoatNormalTexture.scale)) {
                    var o = a.clearcoatNormalTexture.scale;
                    e.clearcoatNormalScale = new r.Nb(o, o)
                }
                return Promise.all(i)
            };
            var c = "glTF", l = 1313821514, u = 5130562;

            function h(e) {
                this.name = n.KHR_BINARY_GLTF, this.content = null, this.body = null;
                var t = new DataView(e, 0, 12);
                if (this.header = {
                    magic: r.P.decodeText(new Uint8Array(e.slice(0, 4))),
                    version: t.getUint32(4, !0),
                    length: t.getUint32(8, !0)
                }, this.header.magic !== c) throw new Error("THREE.GLTFLoader: Unsupported glTF-Binary header.");
                if (this.header.version < 2) throw new Error("THREE.GLTFLoader: Legacy binary file detected.");
                for (var i = new DataView(e, 12), a = 0; a < i.byteLength;) {
                    var o = i.getUint32(a, !0);
                    a += 4;
                    var s = i.getUint32(a, !0);
                    if (a += 4, s === l) {
                        var h = new Uint8Array(e, 12 + a, o);
                        this.content = r.P.decodeText(h)
                    } else if (s === u) {
                        var p = 12 + a;
                        this.body = e.slice(p, p + o)
                    }
                    a += o
                }
                if (null === this.content) throw new Error("THREE.GLTFLoader: JSON content not found.")
            }

            function p(e, t) {
                if (!t) throw new Error("THREE.GLTFLoader: No DRACOLoader instance provided.");
                this.name = n.KHR_DRACO_MESH_COMPRESSION, this.json = e, this.dracoLoader = t, this.dracoLoader.preload()
            }

            function d() {
                this.name = n.KHR_TEXTURE_TRANSFORM
            }

            function f(e) {
                r.ab.call(this), this.isGLTFSpecularGlossinessMaterial = !0;
                var t = ["#ifdef USE_SPECULARMAP", "\tuniform sampler2D specularMap;", "#endif"].join("\n"),
                    n = ["#ifdef USE_GLOSSINESSMAP", "\tuniform sampler2D glossinessMap;", "#endif"].join("\n"),
                    i = ["vec3 specularFactor = specular;", "#ifdef USE_SPECULARMAP", "\tvec4 texelSpecular = texture2D( specularMap, vUv );", "\ttexelSpecular = sRGBToLinear( texelSpecular );", "\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture", "\tspecularFactor *= texelSpecular.rgb;", "#endif"].join("\n"),
                    a = ["float glossinessFactor = glossiness;", "#ifdef USE_GLOSSINESSMAP", "\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );", "\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture", "\tglossinessFactor *= texelGlossiness.a;", "#endif"].join("\n"),
                    o = ["PhysicalMaterial material;", "material.diffuseColor = diffuseColor.rgb;", "vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );", "float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );", "material.specularRoughness = max( 1.0 - glossinessFactor, 0.0525 );// 0.0525 corresponds to the base mip of a 256 cubemap.", "material.specularRoughness += geometryRoughness;", "material.specularRoughness = min( material.specularRoughness, 1.0 );", "material.specularColor = specularFactor.rgb;"].join("\n"),
                    s = {
                        specular: {value: (new r.p).setHex(16777215)},
                        glossiness: {value: 1},
                        specularMap: {value: null},
                        glossinessMap: {value: null}
                    };
                this._extraUniforms = s, this.onBeforeCompile = function (e) {
                    for (var r in s) e.uniforms[r] = s[r];
                    e.fragmentShader = e.fragmentShader.replace("uniform float roughness;", "uniform vec3 specular;"), e.fragmentShader = e.fragmentShader.replace("uniform float metalness;", "uniform float glossiness;"), e.fragmentShader = e.fragmentShader.replace("#include <roughnessmap_pars_fragment>", t), e.fragmentShader = e.fragmentShader.replace("#include <metalnessmap_pars_fragment>", n), e.fragmentShader = e.fragmentShader.replace("#include <roughnessmap_fragment>", i), e.fragmentShader = e.fragmentShader.replace("#include <metalnessmap_fragment>", a), e.fragmentShader = e.fragmentShader.replace("#include <lights_physical_fragment>", o)
                }, Object.defineProperties(this, {
                    specular: {
                        get: function () {
                            return s.specular.value
                        }, set: function (e) {
                            s.specular.value = e
                        }
                    }, specularMap: {
                        get: function () {
                            return s.specularMap.value
                        }, set: function (e) {
                            s.specularMap.value = e
                        }
                    }, glossiness: {
                        get: function () {
                            return s.glossiness.value
                        }, set: function (e) {
                            s.glossiness.value = e
                        }
                    }, glossinessMap: {
                        get: function () {
                            return s.glossinessMap.value
                        }, set: function (e) {
                            s.glossinessMap.value = e, e ? (this.defines.USE_GLOSSINESSMAP = "", this.defines.USE_ROUGHNESSMAP = "") : (delete this.defines.USE_ROUGHNESSMAP, delete this.defines.USE_GLOSSINESSMAP)
                        }
                    }
                }), delete this.metalness, delete this.roughness, delete this.metalnessMap, delete this.roughnessMap, this.setValues(e)
            }

            function m() {
                return {
                    name: n.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,
                    specularGlossinessParams: ["color", "map", "lightMap", "lightMapIntensity", "aoMap", "aoMapIntensity", "emissive", "emissiveIntensity", "emissiveMap", "bumpMap", "bumpScale", "normalMap", "normalMapType", "displacementMap", "displacementScale", "displacementBias", "specularMap", "specular", "glossinessMap", "glossiness", "alphaMap", "envMap", "envMapIntensity", "refractionRatio"],
                    getMaterialType: function () {
                        return f
                    },
                    extendParams: function (e, t, n) {
                        var i = t.extensions[this.name];
                        e.color = new r.p(1, 1, 1), e.opacity = 1;
                        var a = [];
                        if (Array.isArray(i.diffuseFactor)) {
                            var o = i.diffuseFactor;
                            e.color.fromArray(o), e.opacity = o[3]
                        }
                        if (void 0 !== i.diffuseTexture && a.push(n.assignTexture(e, "map", i.diffuseTexture)), e.emissive = new r.p(0, 0, 0), e.glossiness = void 0 !== i.glossinessFactor ? i.glossinessFactor : 1, e.specular = new r.p(1, 1, 1), Array.isArray(i.specularFactor) && e.specular.fromArray(i.specularFactor), void 0 !== i.specularGlossinessTexture) {
                            var s = i.specularGlossinessTexture;
                            a.push(n.assignTexture(e, "glossinessMap", s)), a.push(n.assignTexture(e, "specularMap", s))
                        }
                        return Promise.all(a)
                    },
                    createMaterial: function (e) {
                        var t = new f(e);
                        return t.fog = !0, t.color = e.color, t.map = void 0 === e.map ? null : e.map, t.lightMap = null, t.lightMapIntensity = 1, t.aoMap = void 0 === e.aoMap ? null : e.aoMap, t.aoMapIntensity = 1, t.emissive = e.emissive, t.emissiveIntensity = 1, t.emissiveMap = void 0 === e.emissiveMap ? null : e.emissiveMap, t.bumpMap = void 0 === e.bumpMap ? null : e.bumpMap, t.bumpScale = 1, t.normalMap = void 0 === e.normalMap ? null : e.normalMap, t.normalMapType = r.Gb, e.normalScale && (t.normalScale = e.normalScale), t.displacementMap = null, t.displacementScale = 1, t.displacementBias = 0, t.specularMap = void 0 === e.specularMap ? null : e.specularMap, t.specular = e.specular, t.glossinessMap = void 0 === e.glossinessMap ? null : e.glossinessMap, t.glossiness = e.glossiness, t.alphaMap = null, t.envMap = void 0 === e.envMap ? null : e.envMap, t.envMapIntensity = 1, t.refractionRatio = .98, t
                    }
                }
            }

            function v() {
                this.name = n.KHR_MESH_QUANTIZATION
            }

            function g(e, t, n, i) {
                r.E.call(this, e, t, n, i)
            }

            p.prototype.decodePrimitive = function (e, t) {
                var n = this.json, r = this.dracoLoader, i = e.extensions[this.name].bufferView,
                    a = e.extensions[this.name].attributes, o = {}, s = {}, c = {};
                for (var l in a) {
                    var u = R[l] || l.toLowerCase();
                    o[u] = a[l]
                }
                for (l in e.attributes) {
                    u = R[l] || l.toLowerCase();
                    if (void 0 !== a[l]) {
                        var h = n.accessors[e.attributes[l]], p = T[h.componentType];
                        c[u] = p, s[u] = !0 === h.normalized
                    }
                }
                return t.getDependency("bufferView", i).then((function (e) {
                    return new Promise((function (t) {
                        r.decodeDracoFile(e, (function (e) {
                            for (var n in e.attributes) {
                                var r = e.attributes[n], i = s[n];
                                void 0 !== i && (r.normalized = i)
                            }
                            t(e)
                        }), o, c)
                    }))
                }))
            }, d.prototype.extendTexture = function (e, t) {
                return e = e.clone(), void 0 !== t.offset && e.offset.fromArray(t.offset), void 0 !== t.rotation && (e.rotation = t.rotation), void 0 !== t.scale && e.repeat.fromArray(t.scale), void 0 !== t.texCoord && console.warn('THREE.GLTFLoader: Custom UV sets in "' + this.name + '" extension not yet supported.'), e.needsUpdate = !0, e
            }, f.prototype = Object.create(r.ab.prototype), f.prototype.constructor = f, f.prototype.copy = function (e) {
                return r.ab.prototype.copy.call(this, e), this.specularMap = e.specularMap, this.specular.copy(e.specular), this.glossinessMap = e.glossinessMap, this.glossiness = e.glossiness, delete this.metalness, delete this.roughness, delete this.metalnessMap, delete this.roughnessMap, this
            }, g.prototype = Object.create(r.E.prototype), g.prototype.constructor = g, g.prototype.copySampleValue_ = function (e) {
                for (var t = this.resultBuffer, n = this.sampleValues, r = this.valueSize, i = e * r * 3 + r, a = 0; a !== r; a++) t[a] = n[i + a];
                return t
            }, g.prototype.beforeStart_ = g.prototype.copySampleValue_, g.prototype.afterEnd_ = g.prototype.copySampleValue_, g.prototype.interpolate_ = function (e, t, n, r) {
                for (var i = this.resultBuffer, a = this.sampleValues, o = this.valueSize, s = 2 * o, c = 3 * o, l = r - t, u = (n - t) / l, h = u * u, p = h * u, d = e * c, f = d - c, m = -2 * p + 3 * h, v = p - h, g = 1 - m, y = v - h + u, x = 0; x !== o; x++) {
                    var b = a[f + x + o], _ = a[f + x + s] * l, w = a[d + x + o], M = a[d + x] * l;
                    i[x] = g * b + y * _ + m * w + v * M
                }
                return i
            };
            var y = 0, x = 1, b = 2, _ = 3, w = 4, M = 5, S = 6, T = {
                    5120: Int8Array,
                    5121: Uint8Array,
                    5122: Int16Array,
                    5123: Uint16Array,
                    5125: Uint32Array,
                    5126: Float32Array
                }, E = {9728: r.db, 9729: r.L, 9984: r.fb, 9985: r.N, 9986: r.eb, 9987: r.M},
                A = {33071: r.o, 33648: r.bb, 10497: r.ub},
                L = {SCALAR: 1, VEC2: 2, VEC3: 3, VEC4: 4, MAT2: 4, MAT3: 9, MAT4: 16}, R = {
                    POSITION: "position",
                    NORMAL: "normal",
                    TANGENT: "tangent",
                    TEXCOORD_0: "uv",
                    TEXCOORD_1: "uv2",
                    COLOR_0: "color",
                    WEIGHTS_0: "skinWeight",
                    JOINTS_0: "skinIndex"
                }, P = {scale: "scale", translation: "position", rotation: "quaternion", weights: "morphTargetInfluences"},
                C = {CUBICSPLINE: void 0, LINEAR: r.G, STEP: r.F}, O = "OPAQUE", I = "MASK", N = "BLEND",
                D = {"image/png": r.sb, "image/jpeg": r.tb};

            function U(e, t) {
                return "string" != typeof e || "" === e ? "" : (/^https?:\/\//i.test(t) && /^\//.test(e) && (t = t.replace(/(^https?:\/\/[^\/]+).*/i, "$1")), /^(https?:)?\/\//i.test(e) || /^data:.*,.*$/i.test(e) || /^blob:.*$/i.test(e) ? e : t + e)
            }

            function z(e, t, n) {
                for (var r in n.extensions) void 0 === e[r] && (t.userData.gltfExtensions = t.userData.gltfExtensions || {}, t.userData.gltfExtensions[r] = n.extensions[r])
            }

            function F(e, t) {
                void 0 !== t.extras && ("object" == typeof t.extras ? Object.assign(e.userData, t.extras) : console.warn("THREE.GLTFLoader: Ignoring primitive type .extras, " + t.extras))
            }

            function B(e, t) {
                if (e.updateMorphTargets(), void 0 !== t.weights) for (var n = 0, r = t.weights.length; n < r; n++) e.morphTargetInfluences[n] = t.weights[n];
                if (t.extras && Array.isArray(t.extras.targetNames)) {
                    var i = t.extras.targetNames;
                    if (e.morphTargetInfluences.length === i.length) {
                        e.morphTargetDictionary = {};
                        for (n = 0, r = i.length; n < r; n++) e.morphTargetDictionary[i[n]] = n
                    } else console.warn("THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.")
                }
            }

            function H(e) {
                for (var t = "", n = Object.keys(e).sort(), r = 0, i = n.length; r < i; r++) t += n[r] + ":" + e[n[r]] + ";";
                return t
            }

            function G(e, n, i) {
                this.json = e || {}, this.extensions = n || {}, this.options = i || {}, this.cache = new t, this.associations = new Map, this.primitiveCache = {}, this.textureLoader = new r.Ib(this.options.manager), this.textureLoader.setCrossOrigin(this.options.crossOrigin), this.fileLoader = new r.u(this.options.manager), this.fileLoader.setResponseType("arraybuffer"), "use-credentials" === this.options.crossOrigin && this.fileLoader.setWithCredentials(!0)
            }

            function k(e, t, n) {
                var i = t.attributes, a = [];

                function o(t, r) {
                    return n.getDependency("accessor", t).then((function (t) {
                        e.setAttribute(r, t)
                    }))
                }

                for (var s in i) {
                    var c = R[s] || s.toLowerCase();
                    c in e.attributes || a.push(o(i[s], c))
                }
                if (void 0 !== t.indices && !e.index) {
                    var l = n.getDependency("accessor", t.indices).then((function (t) {
                        e.setIndex(t)
                    }));
                    a.push(l)
                }
                return F(e, t), function (e, t, n) {
                    var i = t.attributes, a = new r.i;
                    if (void 0 !== i.POSITION) {
                        var o = (f = n.json.accessors[i.POSITION]).min, s = f.max;
                        if (void 0 !== o && void 0 !== s) {
                            a.set(new r.Ob(o[0], o[1], o[2]), new r.Ob(s[0], s[1], s[2]));
                            var c = t.targets;
                            if (void 0 !== c) {
                                for (var l = new r.Ob, u = new r.Ob, h = 0, p = c.length; h < p; h++) {
                                    var d = c[h];
                                    if (void 0 !== d.POSITION) {
                                        var f;
                                        o = (f = n.json.accessors[d.POSITION]).min, s = f.max;
                                        void 0 !== o && void 0 !== s ? (u.setX(Math.max(Math.abs(o[0]), Math.abs(s[0]))), u.setY(Math.max(Math.abs(o[1]), Math.abs(s[1]))), u.setZ(Math.max(Math.abs(o[2]), Math.abs(s[2]))), l.max(u)) : console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.")
                                    }
                                }
                                a.expandByVector(l)
                            }
                            e.boundingBox = a;
                            var m = new r.Ab;
                            a.getCenter(m.center), m.radius = a.min.distanceTo(a.max) / 2, e.boundingSphere = m
                        } else console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.")
                    }
                }(e, t, n), Promise.all(a).then((function () {
                    return void 0 !== t.targets ? function (e, t, n) {
                        for (var r = !1, i = !1, a = 0, o = t.length; a < o; a++) {
                            if (void 0 !== (l = t[a]).POSITION && (r = !0), void 0 !== l.NORMAL && (i = !0), r && i) break
                        }
                        if (!r && !i) return Promise.resolve(e);
                        var s = [], c = [];
                        for (a = 0, o = t.length; a < o; a++) {
                            var l = t[a];
                            if (r) {
                                var u = void 0 !== l.POSITION ? n.getDependency("accessor", l.POSITION) : e.attributes.position;
                                s.push(u)
                            }
                            if (i) {
                                u = void 0 !== l.NORMAL ? n.getDependency("accessor", l.NORMAL) : e.attributes.normal;
                                c.push(u)
                            }
                        }
                        return Promise.all([Promise.all(s), Promise.all(c)]).then((function (t) {
                            var n = t[0], a = t[1];
                            return r && (e.morphAttributes.position = n), i && (e.morphAttributes.normal = a), e.morphTargetsRelative = !0, e
                        }))
                    }(e, t.targets, n) : e
                }))
            }

            function j(e, t) {
                var n = e.getIndex();
                if (null === n) {
                    var i = [], a = e.getAttribute("position");
                    if (void 0 === a) return console.error("THREE.GLTFLoader.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."), e;
                    for (var o = 0; o < a.count; o++) i.push(o);
                    e.setIndex(i), n = e.getIndex()
                }
                var s = n.count - 2, c = [];
                if (t === r.Jb) for (o = 1; o <= s; o++) c.push(n.getX(0)), c.push(n.getX(o)), c.push(n.getX(o + 1)); else for (o = 0; o < s; o++) o % 2 == 0 ? (c.push(n.getX(o)), c.push(n.getX(o + 1)), c.push(n.getX(o + 2))) : (c.push(n.getX(o + 2)), c.push(n.getX(o + 1)), c.push(n.getX(o)));
                c.length / 3 !== s && console.error("THREE.GLTFLoader.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");
                var l = e.clone();
                return l.setIndex(c), l
            }

            return G.prototype.parse = function (e, t) {
                var n = this, r = this.json, i = this.extensions;
                this.cache.removeAll(), this.markDefs(), Promise.all([this.getDependencies("scene"), this.getDependencies("animation"), this.getDependencies("camera")]).then((function (t) {
                    var a = {
                        scene: t[0][r.scene || 0],
                        scenes: t[0],
                        animations: t[1],
                        cameras: t[2],
                        asset: r.asset,
                        parser: n,
                        userData: {}
                    };
                    z(i, a, r), F(a, r), e(a)
                })).catch(t)
            }, G.prototype.markDefs = function () {
                for (var e = this.json.nodes || [], t = this.json.skins || [], n = this.json.meshes || [], r = {}, i = {}, a = 0, o = t.length; a < o; a++) for (var s = t[a].joints, c = 0, l = s.length; c < l; c++) e[s[c]].isBone = !0;
                for (var u = 0, h = e.length; u < h; u++) {
                    var p = e[u];
                    void 0 !== p.mesh && (void 0 === r[p.mesh] && (r[p.mesh] = i[p.mesh] = 0), r[p.mesh]++, void 0 !== p.skin && (n[p.mesh].isSkinnedMesh = !0))
                }
                this.json.meshReferences = r, this.json.meshUses = i
            }, G.prototype.getDependency = function (e, t) {
                var r = e + ":" + t, i = this.cache.get(r);
                if (!i) {
                    switch (e) {
                        case"scene":
                            i = this.loadScene(t);
                            break;
                        case"node":
                            i = this.loadNode(t);
                            break;
                        case"mesh":
                            i = this.loadMesh(t);
                            break;
                        case"accessor":
                            i = this.loadAccessor(t);
                            break;
                        case"bufferView":
                            i = this.loadBufferView(t);
                            break;
                        case"buffer":
                            i = this.loadBuffer(t);
                            break;
                        case"material":
                            i = this.loadMaterial(t);
                            break;
                        case"texture":
                            i = this.loadTexture(t);
                            break;
                        case"skin":
                            i = this.loadSkin(t);
                            break;
                        case"animation":
                            i = this.loadAnimation(t);
                            break;
                        case"camera":
                            i = this.loadCamera(t);
                            break;
                        case"light":
                            i = this.extensions[n.KHR_LIGHTS_PUNCTUAL].loadLight(t);
                            break;
                        default:
                            throw new Error("Unknown type: " + e)
                    }
                    this.cache.add(r, i)
                }
                return i
            }, G.prototype.getDependencies = function (e) {
                var t = this.cache.get(e);
                if (!t) {
                    var n = this, r = this.json[e + ("mesh" === e ? "es" : "s")] || [];
                    t = Promise.all(r.map((function (t, r) {
                        return n.getDependency(e, r)
                    }))), this.cache.add(e, t)
                }
                return t
            }, G.prototype.loadBuffer = function (e) {
                var t = this.json.buffers[e], r = this.fileLoader;
                if (t.type && "arraybuffer" !== t.type) throw new Error("THREE.GLTFLoader: " + t.type + " buffer type is not supported.");
                if (void 0 === t.uri && 0 === e) return Promise.resolve(this.extensions[n.KHR_BINARY_GLTF].body);
                var i = this.options;
                return new Promise((function (e, n) {
                    r.load(U(t.uri, i.path), e, void 0, (function () {
                        n(new Error('THREE.GLTFLoader: Failed to load buffer "' + t.uri + '".'))
                    }))
                }))
            }, G.prototype.loadBufferView = function (e) {
                var t = this.json.bufferViews[e];
                return this.getDependency("buffer", t.buffer).then((function (e) {
                    var n = t.byteLength || 0, r = t.byteOffset || 0;
                    return e.slice(r, r + n)
                }))
            }, G.prototype.loadAccessor = function (e) {
                var t = this, n = this.json, i = this.json.accessors[e];
                if (void 0 === i.bufferView && void 0 === i.sparse) return Promise.resolve(null);
                var a = [];
                return void 0 !== i.bufferView ? a.push(this.getDependency("bufferView", i.bufferView)) : a.push(null), void 0 !== i.sparse && (a.push(this.getDependency("bufferView", i.sparse.indices.bufferView)), a.push(this.getDependency("bufferView", i.sparse.values.bufferView))), Promise.all(a).then((function (e) {
                    var a, o, s = e[0], c = L[i.type], l = T[i.componentType], u = l.BYTES_PER_ELEMENT, h = u * c,
                        p = i.byteOffset || 0,
                        d = void 0 !== i.bufferView ? n.bufferViews[i.bufferView].byteStride : void 0,
                        f = !0 === i.normalized;
                    if (d && d !== h) {
                        var m = Math.floor(p / d),
                            v = "InterleavedBuffer:" + i.bufferView + ":" + i.componentType + ":" + m + ":" + i.count,
                            g = t.cache.get(v);
                        g || (a = new l(s, m * d, i.count * d / u), g = new r.C(a, d / u), t.cache.add(v, g)), o = new r.D(g, c, p % d / u, f)
                    } else a = null === s ? new l(i.count * c) : new l(s, p, i.count * c), o = new r.k(a, c, f);
                    if (void 0 !== i.sparse) {
                        var y = L.SCALAR, x = T[i.sparse.indices.componentType], b = i.sparse.indices.byteOffset || 0,
                            _ = i.sparse.values.byteOffset || 0, w = new x(e[1], b, i.sparse.count * y),
                            M = new l(e[2], _, i.sparse.count * c);
                        null !== s && (o = new r.k(o.array.slice(), o.itemSize, o.normalized));
                        for (var S = 0, E = w.length; S < E; S++) {
                            var A = w[S];
                            if (o.setX(A, M[S * c]), c >= 2 && o.setY(A, M[S * c + 1]), c >= 3 && o.setZ(A, M[S * c + 2]), c >= 4 && o.setW(A, M[S * c + 3]), c >= 5) throw new Error("THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.")
                        }
                    }
                    return o
                }))
            }, G.prototype.loadTexture = function (e) {
                var t, i = this, a = this.json, o = this.options, s = this.textureLoader,
                    c = self.URL || self.webkitURL, l = a.textures[e], u = l.extensions || {},
                    h = (t = u[n.MSFT_TEXTURE_DDS] ? a.images[u[n.MSFT_TEXTURE_DDS].source] : a.images[l.source]).uri,
                    p = !1;
                return void 0 !== t.bufferView && (h = i.getDependency("bufferView", t.bufferView).then((function (e) {
                    p = !0;
                    var n = new Blob([e], {type: t.mimeType});
                    return h = c.createObjectURL(n)
                }))), Promise.resolve(h).then((function (e) {
                    var t = o.manager.getHandler(e);
                    return t || (t = u[n.MSFT_TEXTURE_DDS] ? i.extensions[n.MSFT_TEXTURE_DDS].ddsLoader : s), new Promise((function (n, r) {
                        t.load(U(e, o.path), n, void 0, r)
                    }))
                })).then((function (n) {
                    !0 === p && c.revokeObjectURL(h), n.flipY = !1, l.name && (n.name = l.name), t.mimeType in D && (n.format = D[t.mimeType]);
                    var o = (a.samplers || {})[l.sampler] || {};
                    return n.magFilter = E[o.magFilter] || r.L, n.minFilter = E[o.minFilter] || r.M, n.wrapS = A[o.wrapS] || r.ub, n.wrapT = A[o.wrapT] || r.ub, i.associations.set(n, {
                        type: "textures",
                        index: e
                    }), n
                }))
            }, G.prototype.assignTexture = function (e, t, i) {
                var a = this;
                return this.getDependency("texture", i.index).then((function (o) {
                    if (!o.isCompressedTexture) switch (t) {
                        case"aoMap":
                        case"emissiveMap":
                        case"metalnessMap":
                        case"normalMap":
                        case"roughnessMap":
                            o.format = r.tb
                    }
                    if (void 0 === i.texCoord || 0 == i.texCoord || "aoMap" === t && 1 == i.texCoord || console.warn("THREE.GLTFLoader: Custom UV set " + i.texCoord + " for texture " + t + " not yet supported."), a.extensions[n.KHR_TEXTURE_TRANSFORM]) {
                        var s = void 0 !== i.extensions ? i.extensions[n.KHR_TEXTURE_TRANSFORM] : void 0;
                        if (s) {
                            var c = a.associations.get(o);
                            o = a.extensions[n.KHR_TEXTURE_TRANSFORM].extendTexture(o, s), a.associations.set(o, c)
                        }
                    }
                    e[t] = o
                }))
            }, G.prototype.assignFinalMaterial = function (e) {
                var t = e.geometry, n = e.material, i = void 0 !== t.attributes.tangent,
                    a = void 0 !== t.attributes.color, o = void 0 === t.attributes.normal, s = !0 === e.isSkinnedMesh,
                    c = Object.keys(t.morphAttributes).length > 0, l = c && void 0 !== t.morphAttributes.normal;
                if (e.isPoints) {
                    var u = "PointsMaterial:" + n.uuid, h = this.cache.get(u);
                    h || (h = new r.nb, r.T.prototype.copy.call(h, n), h.color.copy(n.color), h.map = n.map, h.sizeAttenuation = !1, this.cache.add(u, h)), n = h
                } else if (e.isLine) {
                    u = "LineBasicMaterial:" + n.uuid;
                    var p = this.cache.get(u);
                    p || (p = new r.I, r.T.prototype.copy.call(p, n), p.color.copy(n.color), this.cache.add(u, p)), n = p
                }
                if (i || a || o || s || c) {
                    u = "ClonedMaterial:" + n.uuid + ":";
                    n.isGLTFSpecularGlossinessMaterial && (u += "specular-glossiness:"), s && (u += "skinning:"), i && (u += "vertex-tangents:"), a && (u += "vertex-colors:"), o && (u += "flat-shading:"), c && (u += "morph-targets:"), l && (u += "morph-normals:");
                    var d = this.cache.get(u);
                    d || (d = n.clone(), s && (d.skinning = !0), i && (d.vertexTangents = !0), a && (d.vertexColors = !0), o && (d.flatShading = !0), c && (d.morphTargets = !0), l && (d.morphNormals = !0), this.cache.add(u, d), this.associations.set(d, this.associations.get(n))), n = d
                }
                n.aoMap && void 0 === t.attributes.uv2 && void 0 !== t.attributes.uv && t.setAttribute("uv2", t.attributes.uv), n.normalScale && !i && (n.normalScale.y = -n.normalScale.y), n.clearcoatNormalScale && !i && (n.clearcoatNormalScale.y = -n.clearcoatNormalScale.y), e.material = n
            }, G.prototype.loadMaterial = function (e) {
                var t, i = this, a = this.json, o = this.extensions, s = a.materials[e], c = {}, l = s.extensions || {},
                    u = [];
                if (l[n.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS]) {
                    var h = o[n.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS];
                    t = h.getMaterialType(), u.push(h.extendParams(c, s, i))
                } else if (l[n.KHR_MATERIALS_UNLIT]) {
                    var p = o[n.KHR_MATERIALS_UNLIT];
                    t = p.getMaterialType(), u.push(p.extendParams(c, s, i))
                } else {
                    t = r.ab;
                    var d = s.pbrMetallicRoughness || {};
                    if (c.color = new r.p(1, 1, 1), c.opacity = 1, Array.isArray(d.baseColorFactor)) {
                        var m = d.baseColorFactor;
                        c.color.fromArray(m), c.opacity = m[3]
                    }
                    void 0 !== d.baseColorTexture && u.push(i.assignTexture(c, "map", d.baseColorTexture)), c.metalness = void 0 !== d.metallicFactor ? d.metallicFactor : 1, c.roughness = void 0 !== d.roughnessFactor ? d.roughnessFactor : 1, void 0 !== d.metallicRoughnessTexture && (u.push(i.assignTexture(c, "metalnessMap", d.metallicRoughnessTexture)), u.push(i.assignTexture(c, "roughnessMap", d.metallicRoughnessTexture)))
                }
                !0 === s.doubleSided && (c.side = r.r);
                var v = s.alphaMode || O;
                if (v === N ? (c.transparent = !0, c.depthWrite = !1) : (c.transparent = !1, v === I && (c.alphaTest = void 0 !== s.alphaCutoff ? s.alphaCutoff : .5)), void 0 !== s.normalTexture && t !== r.Y && (u.push(i.assignTexture(c, "normalMap", s.normalTexture)), c.normalScale = new r.Nb(1, 1), void 0 !== s.normalTexture.scale && c.normalScale.set(s.normalTexture.scale, s.normalTexture.scale)), void 0 !== s.occlusionTexture && t !== r.Y && (u.push(i.assignTexture(c, "aoMap", s.occlusionTexture)), void 0 !== s.occlusionTexture.strength && (c.aoMapIntensity = s.occlusionTexture.strength)), void 0 !== s.emissiveFactor && t !== r.Y && (c.emissive = (new r.p).fromArray(s.emissiveFactor)), void 0 !== s.emissiveTexture && t !== r.Y && u.push(i.assignTexture(c, "emissiveMap", s.emissiveTexture)), l[n.KHR_MATERIALS_CLEARCOAT]) {
                    var g = o[n.KHR_MATERIALS_CLEARCOAT];
                    t = g.getMaterialType(), u.push(g.extendParams(c, {extensions: l}, i))
                }
                return Promise.all(u).then((function () {
                    var a;
                    return a = t === f ? o[n.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].createMaterial(c) : new t(c), s.name && (a.name = s.name), a.map && (a.map.encoding = r.Rb), a.emissiveMap && (a.emissiveMap.encoding = r.Rb), F(a, s), i.associations.set(a, {
                        type: "materials",
                        index: e
                    }), s.extensions && z(o, a, s), a
                }))
            }, G.prototype.loadGeometries = function (e) {
                var t = this, i = this.extensions, a = this.primitiveCache;

                function o(e) {
                    return i[n.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(e, t).then((function (n) {
                        return k(n, e, t)
                    }))
                }

                for (var s, c, l = [], u = 0, h = e.length; u < h; u++) {
                    var p, d = e[u],
                        f = (c = void 0, (c = (s = d).extensions && s.extensions[n.KHR_DRACO_MESH_COMPRESSION]) ? "draco:" + c.bufferView + ":" + c.indices + ":" + H(c.attributes) : s.indices + ":" + H(s.attributes) + ":" + s.mode),
                        m = a[f];
                    if (m) l.push(m.promise); else p = d.extensions && d.extensions[n.KHR_DRACO_MESH_COMPRESSION] ? o(d) : k(new r.l, d, t), a[f] = {
                        primitive: d,
                        promise: p
                    }, l.push(p)
                }
                return Promise.all(l)
            }, G.prototype.loadMesh = function (e) {
                for (var t, n = this, i = this.json.meshes[e], a = i.primitives, o = [], s = 0, c = a.length; s < c; s++) {
                    var l = void 0 === a[s].material ? (void 0 === (t = this.cache).DefaultMaterial && (t.DefaultMaterial = new r.ab({
                        color: 16777215,
                        emissive: 0,
                        metalness: 1,
                        roughness: 1,
                        transparent: !1,
                        depthTest: !0,
                        side: r.x
                    })), t.DefaultMaterial) : this.getDependency("material", a[s].material);
                    o.push(l)
                }
                return o.push(n.loadGeometries(a)), Promise.all(o).then((function (t) {
                    for (var o = t.slice(0, t.length - 1), s = t[t.length - 1], c = [], l = 0, u = s.length; l < u; l++) {
                        var h, p = s[l], d = a[l], f = o[l];
                        if (d.mode === w || d.mode === M || d.mode === S || void 0 === d.mode) !0 !== (h = !0 === i.isSkinnedMesh ? new r.zb(p, f) : new r.X(p, f)).isSkinnedMesh || h.geometry.attributes.skinWeight.normalized || h.normalizeSkinWeights(), d.mode === M ? h.geometry = j(h.geometry, r.Kb) : d.mode === S && (h.geometry = j(h.geometry, r.Jb)); else if (d.mode === x) h = new r.K(p, f); else if (d.mode === _) h = new r.H(p, f); else if (d.mode === b) h = new r.J(p, f); else {
                            if (d.mode !== y) throw new Error("THREE.GLTFLoader: Primitive mode unsupported: " + d.mode);
                            h = new r.mb(p, f)
                        }
                        Object.keys(h.geometry.morphAttributes).length > 0 && B(h, i), h.name = i.name || "mesh_" + e, s.length > 1 && (h.name += "_" + l), F(h, i), n.assignFinalMaterial(h), c.push(h)
                    }
                    if (1 === c.length) return c[0];
                    var m = new r.y;
                    for (l = 0, u = c.length; l < u; l++) m.add(c[l]);
                    return m
                }))
            }, G.prototype.loadCamera = function (e) {
                var t, n = this.json.cameras[e], i = n[n.type];
                if (i) return "perspective" === n.type ? t = new r.jb(r.U.radToDeg(i.yfov), i.aspectRatio || 1, i.znear || 1, i.zfar || 2e6) : "orthographic" === n.type && (t = new r.ib(-i.xmag, i.xmag, i.ymag, -i.ymag, i.znear, i.zfar)), n.name && (t.name = n.name), F(t, n), Promise.resolve(t);
                console.warn("THREE.GLTFLoader: Missing camera parameters.")
            }, G.prototype.loadSkin = function (e) {
                var t = this.json.skins[e], n = {joints: t.joints};
                return void 0 === t.inverseBindMatrices ? Promise.resolve(n) : this.getDependency("accessor", t.inverseBindMatrices).then((function (e) {
                    return n.inverseBindMatrices = e, n
                }))
            }, G.prototype.loadAnimation = function (e) {
                for (var t = this.json.animations[e], n = [], i = [], a = [], o = [], s = [], c = 0, l = t.channels.length; c < l; c++) {
                    var u = t.channels[c], h = t.samplers[u.sampler], p = u.target,
                        d = void 0 !== p.node ? p.node : p.id,
                        f = void 0 !== t.parameters ? t.parameters[h.input] : h.input,
                        m = void 0 !== t.parameters ? t.parameters[h.output] : h.output;
                    n.push(this.getDependency("node", d)), i.push(this.getDependency("accessor", f)), a.push(this.getDependency("accessor", m)), o.push(h), s.push(p)
                }
                return Promise.all([Promise.all(n), Promise.all(i), Promise.all(a), Promise.all(o), Promise.all(s)]).then((function (n) {
                    for (var i = n[0], a = n[1], o = n[2], s = n[3], c = n[4], l = [], u = 0, h = i.length; u < h; u++) {
                        var p = i[u], d = a[u], f = o[u], m = s[u], v = c[u];
                        if (void 0 !== p) {
                            var y;
                            switch (p.updateMatrix(), p.matrixAutoUpdate = !0, P[v.path]) {
                                case P.weights:
                                    y = r.gb;
                                    break;
                                case P.rotation:
                                    y = r.rb;
                                    break;
                                case P.position:
                                case P.scale:
                                default:
                                    y = r.Pb
                            }
                            var x = p.name ? p.name : p.uuid, b = void 0 !== m.interpolation ? C[m.interpolation] : r.G,
                                _ = [];
                            P[v.path] === P.weights ? p.traverse((function (e) {
                                !0 === e.isMesh && e.morphTargetInfluences && _.push(e.name ? e.name : e.uuid)
                            })) : _.push(x);
                            var w = f.array;
                            if (f.normalized) {
                                var M;
                                if (w.constructor === Int8Array) M = 1 / 127; else if (w.constructor === Uint8Array) M = 1 / 255; else if (w.constructor == Int16Array) M = 1 / 32767; else {
                                    if (w.constructor !== Uint16Array) throw new Error("THREE.GLTFLoader: Unsupported output accessor component type.");
                                    M = 1 / 65535
                                }
                                for (var S = new Float32Array(w.length), T = 0, E = w.length; T < E; T++) S[T] = w[T] * M;
                                w = S
                            }
                            for (T = 0, E = _.length; T < E; T++) {
                                var A = new y(_[T] + "." + P[v.path], d.array, w, b);
                                "CUBICSPLINE" === m.interpolation && (A.createInterpolant = function (e) {
                                    return new g(this.times, this.values, this.getValueSize() / 3, e)
                                }, A.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline = !0), l.push(A)
                            }
                        }
                    }
                    var L = t.name ? t.name : "animation_" + e;
                    return new r.b(L, void 0, l)
                }))
            }, G.prototype.loadNode = function (e) {
                var t, i = this.json, a = this.extensions, o = this, s = i.meshReferences, c = i.meshUses,
                    l = i.nodes[e];
                return (t = [], void 0 !== l.mesh && t.push(o.getDependency("mesh", l.mesh).then((function (e) {
                    var t;
                    if (s[l.mesh] > 1) {
                        var n = c[l.mesh]++;
                        (t = e.clone()).name += "_instance_" + n
                    } else t = e;
                    return void 0 !== l.weights && t.traverse((function (e) {
                        if (e.isMesh) for (var t = 0, n = l.weights.length; t < n; t++) e.morphTargetInfluences[t] = l.weights[t]
                    })), t
                }))), void 0 !== l.camera && t.push(o.getDependency("camera", l.camera)), l.extensions && l.extensions[n.KHR_LIGHTS_PUNCTUAL] && void 0 !== l.extensions[n.KHR_LIGHTS_PUNCTUAL].light && t.push(o.getDependency("light", l.extensions[n.KHR_LIGHTS_PUNCTUAL].light)), Promise.all(t)).then((function (t) {
                    var n;
                    if ((n = !0 === l.isBone ? new r.h : t.length > 1 ? new r.y : 1 === t.length ? t[0] : new r.hb) !== t[0]) for (var i = 0, s = t.length; i < s; i++) n.add(t[i]);
                    if (l.name && (n.userData.name = l.name, n.name = r.pb.sanitizeNodeName(l.name)), F(n, l), l.extensions && z(a, n, l), void 0 !== l.matrix) {
                        var c = new r.W;
                        c.fromArray(l.matrix), n.applyMatrix4(c)
                    } else void 0 !== l.translation && n.position.fromArray(l.translation), void 0 !== l.rotation && n.quaternion.fromArray(l.rotation), void 0 !== l.scale && n.scale.fromArray(l.scale);
                    return o.associations.set(n, {type: "nodes", index: e}), n
                }))
            }, G.prototype.loadScene = function () {
                function e(t, n, i, a) {
                    var o = i.nodes[t];
                    return a.getDependency("node", t).then((function (e) {
                        return void 0 === o.skin ? e : a.getDependency("skin", o.skin).then((function (e) {
                            for (var n = [], r = 0, i = (t = e).joints.length; r < i; r++) n.push(a.getDependency("node", t.joints[r]));
                            return Promise.all(n)
                        })).then((function (n) {
                            return e.traverse((function (e) {
                                if (e.isMesh) {
                                    for (var i = [], a = [], o = 0, s = n.length; o < s; o++) {
                                        var c = n[o];
                                        if (c) {
                                            i.push(c);
                                            var l = new r.W;
                                            void 0 !== t.inverseBindMatrices && l.fromArray(t.inverseBindMatrices.array, 16 * o), a.push(l)
                                        } else console.warn('THREE.GLTFLoader: Joint "%s" could not be found.', t.joints[o])
                                    }
                                    e.bind(new r.xb(i, a), e.matrixWorld)
                                }
                            })), e
                        }));
                        var t
                    })).then((function (t) {
                        n.add(t);
                        var r = [];
                        if (o.children) for (var s = o.children, c = 0, l = s.length; c < l; c++) {
                            var u = s[c];
                            r.push(e(u, t, i, a))
                        }
                        return Promise.all(r)
                    }))
                }

                return function (t) {
                    var n = this.json, i = this.extensions, a = this.json.scenes[t], o = new r.y;
                    a.name && (o.name = a.name), F(o, a), a.extensions && z(i, o, a);
                    for (var s = a.nodes || [], c = [], l = 0, u = s.length; l < u; l++) c.push(e(s[l], o, n, this));
                    return Promise.all(c).then((function () {
                        return o
                    }))
                }
            }(), e
        }()
    }, 340: function (e, t, n) {
        "use strict";
        n.d(t, "a", (function () {
            return v
        }));
        var r, i, a, o, s, c, l, u, h, p, d, f, m = n(80), v = {
            retarget: (l = new m.Ob, u = new m.qb, h = new m.Ob, p = new m.W, d = new m.W, f = new m.W, function (e, t, n) {
                (n = n || {}).preserveMatrix = void 0 === n.preserveMatrix || n.preserveMatrix, n.preservePosition = void 0 === n.preservePosition || n.preservePosition, n.preserveHipPosition = void 0 !== n.preserveHipPosition && n.preserveHipPosition, n.useTargetMatrix = void 0 !== n.useTargetMatrix && n.useTargetMatrix, n.hip = void 0 !== n.hip ? n.hip : "hip", n.names = n.names || {};
                var r, i, a, o, s, c, m = t.isObject3D ? t.skeleton.bones : this.getBones(t),
                    v = e.isObject3D ? e.skeleton.bones : this.getBones(e);
                if (e.isObject3D ? e.skeleton.pose() : (n.useTargetMatrix = !0, n.preserveMatrix = !1), n.preservePosition) for (s = [], c = 0; c < v.length; c++) s.push(v[c].position.clone());
                if (n.preserveMatrix) for (e.updateMatrixWorld(), e.matrixWorld.identity(), c = 0; c < e.children.length; ++c) e.children[c].updateMatrixWorld(!0);
                if (n.offsets) for (r = [], c = 0; c < v.length; ++c) i = v[c], a = n.names[i.name] || i.name, n.offsets && n.offsets[a] && (i.matrix.multiply(n.offsets[a]), i.matrix.decompose(i.position, i.quaternion, i.scale), i.updateMatrixWorld()), r.push(i.matrixWorld.clone());
                for (c = 0; c < v.length; ++c) {
                    if (i = v[c], a = n.names[i.name] || i.name, o = this.getBoneByName(a, m), f.copy(i.matrixWorld), o) {
                        if (o.updateMatrixWorld(), n.useTargetMatrix ? d.copy(o.matrixWorld) : (d.getInverse(e.matrixWorld), d.multiply(o.matrixWorld)), h.setFromMatrixScale(d), d.scale(h.set(1 / h.x, 1 / h.y, 1 / h.z)), f.makeRotationFromQuaternion(u.setFromRotationMatrix(d)), e.isObject3D) {
                            var g = v.indexOf(i), y = r ? r[g] : p.getInverse(e.skeleton.boneInverses[g]);
                            f.multiply(y)
                        }
                        f.copyPosition(d)
                    }
                    i.parent && i.parent.isBone ? (i.matrix.getInverse(i.parent.matrixWorld), i.matrix.multiply(f)) : i.matrix.copy(f), n.preserveHipPosition && a === n.hip && i.matrix.setPosition(l.set(0, i.position.y, 0)), i.matrix.decompose(i.position, i.quaternion, i.scale), i.updateMatrixWorld()
                }
                if (n.preservePosition) for (c = 0; c < v.length; ++c) i = v[c], (a = n.names[i.name] || i.name) !== n.hip && i.position.copy(s[c]);
                n.preserveMatrix && e.updateMatrixWorld(!0)
            }),
            retargetClip: function (e, t, n, r) {
                (r = r || {}).useFirstFramePosition = void 0 !== r.useFirstFramePosition && r.useFirstFramePosition, r.fps = void 0 !== r.fps ? r.fps : 30, r.names = r.names || [], t.isObject3D || (t = this.getHelperFromSkeleton(t));
                var i, a, o, s, c, l, u = Math.round(n.duration * (r.fps / 1e3) * 1e3), h = 1 / r.fps, p = [],
                    d = new m.c(t), f = this.getBones(e.skeleton), v = [];
                for (d.clipAction(n).play(), d.update(0), t.updateMatrixWorld(), c = 0; c < u; ++c) {
                    var g = c * h;
                    for (this.retarget(e, t, r), l = 0; l < f.length; ++l) s = r.names[f[l].name] || f[l].name, this.getBoneByName(s, t.skeleton) && (a = f[l], o = v[l] = v[l] || {bone: a}, r.hip === s && (o.pos || (o.pos = {
                        times: new Float32Array(u),
                        values: new Float32Array(3 * u)
                    }), r.useFirstFramePosition && (0 === c && (i = a.position.clone()), a.position.sub(i)), o.pos.times[c] = g, a.position.toArray(o.pos.values, 3 * c)), o.quat || (o.quat = {
                        times: new Float32Array(u),
                        values: new Float32Array(4 * u)
                    }), o.quat.times[c] = g, a.quaternion.toArray(o.quat.values, 4 * c));
                    d.update(h), t.updateMatrixWorld()
                }
                for (c = 0; c < v.length; ++c) (o = v[c]) && (o.pos && p.push(new m.Pb(".bones[" + o.bone.name + "].position", o.pos.times, o.pos.values)), p.push(new m.rb(".bones[" + o.bone.name + "].quaternion", o.quat.times, o.quat.values)));
                return d.uncacheAction(n), new m.b(n.name, -1, p)
            },
            getHelperFromSkeleton: function (e) {
                var t = new m.yb(e.bones[0]);
                return t.skeleton = e, t
            },
            getSkeletonOffsets: (r = new m.Ob, i = new m.Ob, a = new m.Ob, o = new m.Ob, s = new m.Nb, c = new m.Nb, function (e, t, n) {
                (n = n || {}).hip = void 0 !== n.hip ? n.hip : "hip", n.names = n.names || {}, t.isObject3D || (t = this.getHelperFromSkeleton(t));
                var l, u, h, p, d = Object.keys(n.names), f = Object.values(n.names),
                    v = t.isObject3D ? t.skeleton.bones : this.getBones(t),
                    g = e.isObject3D ? e.skeleton.bones : this.getBones(e), y = [];
                for (e.skeleton.pose(), p = 0; p < g.length; ++p) if (l = g[p], h = n.names[l.name] || l.name, (u = this.getBoneByName(h, v)) && h !== n.hip) {
                    var x = this.getNearestBone(l.parent, d), b = this.getNearestBone(u.parent, f);
                    x.updateMatrixWorld(), b.updateMatrixWorld(), r.setFromMatrixPosition(x.matrixWorld), i.setFromMatrixPosition(l.matrixWorld), a.setFromMatrixPosition(b.matrixWorld), o.setFromMatrixPosition(u.matrixWorld), s.subVectors(new m.Nb(i.x, i.y), new m.Nb(r.x, r.y)).normalize(), c.subVectors(new m.Nb(o.x, o.y), new m.Nb(a.x, a.y)).normalize();
                    var _ = s.angle() - c.angle(), w = (new m.W).makeRotationFromEuler(new m.s(0, 0, _));
                    l.matrix.multiply(w), l.matrix.decompose(l.position, l.quaternion, l.scale), l.updateMatrixWorld(), y[h] = w
                }
                return y
            }),
            renameBones: function (e, t) {
                for (var n = this.getBones(e), r = 0; r < n.length; ++r) {
                    var i = n[r];
                    t[i.name] && (i.name = t[i.name])
                }
                return this
            },
            getBones: function (e) {
                return Array.isArray(e) ? e : e.bones
            },
            getBoneByName: function (e, t) {
                for (var n = 0, r = this.getBones(t); n < r.length; n++) if (e === r[n].name) return r[n]
            },
            getNearestBone: function (e, t) {
                for (; e.isBone;) {
                    if (-1 !== t.indexOf(e.name)) return e;
                    e = e.parent
                }
            },
            findBoneTrackData: function (e, t) {
                for (var n = /\[(.*)\]\.(.*)/, r = {name: e}, i = 0; i < t.length; ++i) {
                    var a = n.exec(t[i].name);
                    a && e === a[1] && (r[a[2]] = i)
                }
                return r
            },
            getEqualsBonesNames: function (e, t) {
                var n = this.getBones(e), r = this.getBones(t), i = [];
                e:for (var a = 0; a < n.length; a++) for (var o = n[a].name, s = 0; s < r.length; s++) if (o === r[s].name) {
                    i.push(o);
                    continue e
                }
                return i
            },
            clone: function (e) {
                var t = new Map, n = new Map, r = e.clone();
                return function e(t, n, r) {
                    r(t, n);
                    for (var i = 0; i < t.children.length; i++) e(t.children[i], n.children[i], r)
                }(e, r, (function (e, r) {
                    t.set(r, e), n.set(e, r)
                })), r.traverse((function (e) {
                    if (e.isSkinnedMesh) {
                        var r = e, i = t.get(e), a = i.skeleton.bones;
                        r.skeleton = i.skeleton.clone(), r.bindMatrix.copy(i.bindMatrix), r.skeleton.bones = a.map((function (e) {
                            return n.get(e)
                        })), r.bind(r.skeleton, r.bindMatrix)
                    }
                })), r
            }
        }
    }, 341: function (e, t, n) {
        (function (e) {
            var r;
            !function (e, i, a) {
                function o(e) {
                    var t, n = this, r = (t = 4022871197, function (e) {
                        e = String(e);
                        for (var n = 0; n < e.length; n++) {
                            var r = .02519603282416938 * (t += e.charCodeAt(n));
                            r -= t = r >>> 0, t = (r *= t) >>> 0, t += 4294967296 * (r -= t)
                        }
                        return 2.3283064365386963e-10 * (t >>> 0)
                    });
                    n.next = function () {
                        var e = 2091639 * n.s0 + 2.3283064365386963e-10 * n.c;
                        return n.s0 = n.s1, n.s1 = n.s2, n.s2 = e - (n.c = 0 | e)
                    }, n.c = 1, n.s0 = r(" "), n.s1 = r(" "), n.s2 = r(" "), n.s0 -= r(e), n.s0 < 0 && (n.s0 += 1), n.s1 -= r(e), n.s1 < 0 && (n.s1 += 1), n.s2 -= r(e), n.s2 < 0 && (n.s2 += 1), r = null
                }

                function s(e, t) {
                    return t.c = e.c, t.s0 = e.s0, t.s1 = e.s1, t.s2 = e.s2, t
                }

                function c(e, t) {
                    var n = new o(e), r = t && t.state, i = n.next;
                    return i.int32 = function () {
                        return 4294967296 * n.next() | 0
                    }, i.double = function () {
                        return i() + 11102230246251565e-32 * (2097152 * i() | 0)
                    }, i.quick = i, r && ("object" == typeof r && s(r, n), i.state = function () {
                        return s(n, {})
                    }), i
                }

                i && i.exports ? i.exports = c : n(91) && n(105) ? void 0 === (r = function () {
                    return c
                }.call(t, n, t, i)) || (i.exports = r) : this.alea = c
            }(0, e, n(91))
        }).call(this, n(97)(e))
    }, 342: function (e, t, n) {
        (function (e) {
            var r;
            !function (e, i, a) {
                function o(e) {
                    var t = this, n = "";
                    t.x = 0, t.y = 0, t.z = 0, t.w = 0, t.next = function () {
                        var e = t.x ^ t.x << 11;
                        return t.x = t.y, t.y = t.z, t.z = t.w, t.w ^= t.w >>> 19 ^ e ^ e >>> 8
                    }, e === (0 | e) ? t.x = e : n += e;
                    for (var r = 0; r < n.length + 64; r++) t.x ^= 0 | n.charCodeAt(r), t.next()
                }

                function s(e, t) {
                    return t.x = e.x, t.y = e.y, t.z = e.z, t.w = e.w, t
                }

                function c(e, t) {
                    var n = new o(e), r = t && t.state, i = function () {
                        return (n.next() >>> 0) / 4294967296
                    };
                    return i.double = function () {
                        do {
                            var e = ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) / (1 << 21)
                        } while (0 === e);
                        return e
                    }, i.int32 = n.next, i.quick = i, r && ("object" == typeof r && s(r, n), i.state = function () {
                        return s(n, {})
                    }), i
                }

                i && i.exports ? i.exports = c : n(91) && n(105) ? void 0 === (r = function () {
                    return c
                }.call(t, n, t, i)) || (i.exports = r) : this.xor128 = c
            }(0, e, n(91))
        }).call(this, n(97)(e))
    }, 343: function (e, t, n) {
        (function (e) {
            var r;
            !function (e, i, a) {
                function o(e) {
                    var t = this, n = "";
                    t.next = function () {
                        var e = t.x ^ t.x >>> 2;
                        return t.x = t.y, t.y = t.z, t.z = t.w, t.w = t.v, (t.d = t.d + 362437 | 0) + (t.v = t.v ^ t.v << 4 ^ e ^ e << 1) | 0
                    }, t.x = 0, t.y = 0, t.z = 0, t.w = 0, t.v = 0, e === (0 | e) ? t.x = e : n += e;
                    for (var r = 0; r < n.length + 64; r++) t.x ^= 0 | n.charCodeAt(r), r == n.length && (t.d = t.x << 10 ^ t.x >>> 4), t.next()
                }

                function s(e, t) {
                    return t.x = e.x, t.y = e.y, t.z = e.z, t.w = e.w, t.v = e.v, t.d = e.d, t
                }

                function c(e, t) {
                    var n = new o(e), r = t && t.state, i = function () {
                        return (n.next() >>> 0) / 4294967296
                    };
                    return i.double = function () {
                        do {
                            var e = ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) / (1 << 21)
                        } while (0 === e);
                        return e
                    }, i.int32 = n.next, i.quick = i, r && ("object" == typeof r && s(r, n), i.state = function () {
                        return s(n, {})
                    }), i
                }

                i && i.exports ? i.exports = c : n(91) && n(105) ? void 0 === (r = function () {
                    return c
                }.call(t, n, t, i)) || (i.exports = r) : this.xorwow = c
            }(0, e, n(91))
        }).call(this, n(97)(e))
    }, 344: function (e, t, n) {
        (function (e) {
            var r;
            !function (e, i, a) {
                function o(e) {
                    var t = this;
                    t.next = function () {
                        var e, n, r = t.x, i = t.i;
                        return e = r[i], n = (e ^= e >>> 7) ^ e << 24, n ^= (e = r[i + 1 & 7]) ^ e >>> 10, n ^= (e = r[i + 3 & 7]) ^ e >>> 3, n ^= (e = r[i + 4 & 7]) ^ e << 7, e = r[i + 7 & 7], n ^= (e ^= e << 13) ^ e << 9, r[i] = n, t.i = i + 1 & 7, n
                    }, function (e, t) {
                        var n, r = [];
                        if (t === (0 | t)) r[0] = t; else for (t = "" + t, n = 0; n < t.length; ++n) r[7 & n] = r[7 & n] << 15 ^ t.charCodeAt(n) + r[n + 1 & 7] << 13;
                        for (; r.length < 8;) r.push(0);
                        for (n = 0; n < 8 && 0 === r[n]; ++n) ;
                        for (8 == n ? r[7] = -1 : r[n], e.x = r, e.i = 0, n = 256; n > 0; --n) e.next()
                    }(t, e)
                }

                function s(e, t) {
                    return t.x = e.x.slice(), t.i = e.i, t
                }

                function c(e, t) {
                    null == e && (e = +new Date);
                    var n = new o(e), r = t && t.state, i = function () {
                        return (n.next() >>> 0) / 4294967296
                    };
                    return i.double = function () {
                        do {
                            var e = ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) / (1 << 21)
                        } while (0 === e);
                        return e
                    }, i.int32 = n.next, i.quick = i, r && (r.x && s(r, n), i.state = function () {
                        return s(n, {})
                    }), i
                }

                i && i.exports ? i.exports = c : n(91) && n(105) ? void 0 === (r = function () {
                    return c
                }.call(t, n, t, i)) || (i.exports = r) : this.xorshift7 = c
            }(0, e, n(91))
        }).call(this, n(97)(e))
    }, 345: function (e, t, n) {
        (function (e) {
            var r;
            !function (e, i, a) {
                function o(e) {
                    var t = this;
                    t.next = function () {
                        var e, n, r = t.w, i = t.X, a = t.i;
                        return t.w = r = r + 1640531527 | 0, n = i[a + 34 & 127], e = i[a = a + 1 & 127], n ^= n << 13, e ^= e << 17, n ^= n >>> 15, e ^= e >>> 12, n = i[a] = n ^ e, t.i = a, n + (r ^ r >>> 16) | 0
                    }, function (e, t) {
                        var n, r, i, a, o, s = [], c = 128;
                        for (t === (0 | t) ? (r = t, t = null) : (t += "\0", r = 0, c = Math.max(c, t.length)), i = 0, a = -32; a < c; ++a) t && (r ^= t.charCodeAt((a + 32) % t.length)), 0 === a && (o = r), r ^= r << 10, r ^= r >>> 15, r ^= r << 4, r ^= r >>> 13, a >= 0 && (o = o + 1640531527 | 0, i = 0 == (n = s[127 & a] ^= r + o) ? i + 1 : 0);
                        for (i >= 128 && (s[127 & (t && t.length || 0)] = -1), i = 127, a = 512; a > 0; --a) r = s[i + 34 & 127], n = s[i = i + 1 & 127], r ^= r << 13, n ^= n << 17, r ^= r >>> 15, n ^= n >>> 12, s[i] = r ^ n;
                        e.w = o, e.X = s, e.i = i
                    }(t, e)
                }

                function s(e, t) {
                    return t.i = e.i, t.w = e.w, t.X = e.X.slice(), t
                }

                function c(e, t) {
                    null == e && (e = +new Date);
                    var n = new o(e), r = t && t.state, i = function () {
                        return (n.next() >>> 0) / 4294967296
                    };
                    return i.double = function () {
                        do {
                            var e = ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) / (1 << 21)
                        } while (0 === e);
                        return e
                    }, i.int32 = n.next, i.quick = i, r && (r.X && s(r, n), i.state = function () {
                        return s(n, {})
                    }), i
                }

                i && i.exports ? i.exports = c : n(91) && n(105) ? void 0 === (r = function () {
                    return c
                }.call(t, n, t, i)) || (i.exports = r) : this.xor4096 = c
            }(0, e, n(91))
        }).call(this, n(97)(e))
    }, 346: function (e, t, n) {
        (function (e) {
            var r;
            !function (e, i, a) {
                function o(e) {
                    var t = this, n = "";
                    t.next = function () {
                        var e = t.b, n = t.c, r = t.d, i = t.a;
                        return e = e << 25 ^ e >>> 7 ^ n, n = n - r | 0, r = r << 24 ^ r >>> 8 ^ i, i = i - e | 0, t.b = e = e << 20 ^ e >>> 12 ^ n, t.c = n = n - r | 0, t.d = r << 16 ^ n >>> 16 ^ i, t.a = i - e | 0
                    }, t.a = 0, t.b = 0, t.c = -1640531527, t.d = 1367130551, e === Math.floor(e) ? (t.a = e / 4294967296 | 0, t.b = 0 | e) : n += e;
                    for (var r = 0; r < n.length + 20; r++) t.b ^= 0 | n.charCodeAt(r), t.next()
                }

                function s(e, t) {
                    return t.a = e.a, t.b = e.b, t.c = e.c, t.d = e.d, t
                }

                function c(e, t) {
                    var n = new o(e), r = t && t.state, i = function () {
                        return (n.next() >>> 0) / 4294967296
                    };
                    return i.double = function () {
                        do {
                            var e = ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) / (1 << 21)
                        } while (0 === e);
                        return e
                    }, i.int32 = n.next, i.quick = i, r && ("object" == typeof r && s(r, n), i.state = function () {
                        return s(n, {})
                    }), i
                }

                i && i.exports ? i.exports = c : n(91) && n(105) ? void 0 === (r = function () {
                    return c
                }.call(t, n, t, i)) || (i.exports = r) : this.tychei = c
            }(0, e, n(91))
        }).call(this, n(97)(e))
    }, 347: function (e, t, n) {
        var r;
        !function (i, a, o) {
            var s, c = o.pow(256, 6), l = o.pow(2, 52), u = 2 * l;

            function h(e, t, n) {
                var r = [], h = f(function e(t, n) {
                    var r, i = [], a = typeof t;
                    if (n && "object" == a) for (r in t) try {
                        i.push(e(t[r], n - 1))
                    } catch (e) {
                    }
                    return i.length ? i : "string" == a ? t : t + "\0"
                }((t = 1 == t ? {entropy: !0} : t || {}).entropy ? [e, m(a)] : null == e ? function () {
                    try {
                        var e;
                        return s && (e = s.randomBytes) ? e = e(256) : (e = new Uint8Array(256), (i.crypto || i.msCrypto).getRandomValues(e)), m(e)
                    } catch (e) {
                        var t = i.navigator, n = t && t.plugins;
                        return [+new Date, i, n, i.screen, m(a)]
                    }
                }() : e, 3), r), v = new p(r), g = function () {
                    for (var e = v.g(6), t = c, n = 0; e < l;) e = 256 * (e + n), t *= 256, n = v.g(1);
                    for (; e >= u;) e /= 2, t /= 2, n >>>= 1;
                    return (e + n) / t
                };
                return g.int32 = function () {
                    return 0 | v.g(4)
                }, g.quick = function () {
                    return v.g(4) / 4294967296
                }, g.double = g, f(m(v.S), a), (t.pass || n || function (e, t, n, r) {
                    return r && (r.S && d(r, v), e.state = function () {
                        return d(v, {})
                    }), n ? (o.random = e, t) : e
                })(g, h, "global" in t ? t.global : this == o, t.state)
            }

            function p(e) {
                var t, n = e.length, r = this, i = 0, a = r.i = r.j = 0, o = r.S = [];
                for (n || (e = [n++]); i < 256;) o[i] = i++;
                for (i = 0; i < 256; i++) o[i] = o[a = 255 & a + e[i % n] + (t = o[i])], o[a] = t;
                (r.g = function (e) {
                    for (var t, n = 0, i = r.i, a = r.j, o = r.S; e--;) t = o[i = 255 & i + 1], n = 256 * n + o[255 & (o[i] = o[a = 255 & a + t]) + (o[a] = t)];
                    return r.i = i, r.j = a, n
                })(256)
            }

            function d(e, t) {
                return t.i = e.i, t.j = e.j, t.S = e.S.slice(), t
            }

            function f(e, t) {
                for (var n, r = e + "", i = 0; i < r.length;) t[255 & i] = 255 & (n ^= 19 * t[255 & i]) + r.charCodeAt(i++);
                return m(t)
            }

            function m(e) {
                return String.fromCharCode.apply(0, e)
            }

            if (f(o.random(), a), e.exports) {
                e.exports = h;
                try {
                    s = n(348)
                } catch (e) {
                }
            } else void 0 === (r = function () {
                return h
            }.call(t, n, t, e)) || (e.exports = r)
        }("undefined" != typeof self ? self : this, [], Math)
    }, 349: function (e, t, n) {
        "use strict";
        var r = [], i = [], a = [], o = [], s = [], c = [], l = [], u = [], h = [], p = [], d = [], f = [];
        e.exports = function (e, t, n, m, v, g) {
            for (var y = l, x = h, b = p, _ = f, w = 0; w < 3; w++) y[w] = +n[w], b[w] = +t.max[w], x[w] = +t.base[w];
            g || (g = 1e-10);
            var M = function (e, t, n, l, h, p) {
                var f = r, m = i, v = a, g = o, y = s, x = c, b = u, _ = Math.floor, w = 0, M = 0, S = 0, T = 0, E = 0;
                if (A(), 0 === S) return 0;
                for (T = P(); M <= S;) {
                    if (L(T)) if (R()) return w;
                    T = P()
                }
                for (w += S, E = 0; E < 3; E++) l[E] += n[E], h[E] += n[E];
                return w;

                function A() {
                    if (M = 0, 0 !== (S = Math.sqrt(n[0] * n[0] + n[1] * n[1] + n[2] * n[2]))) for (var e = 0; e < 3; e++) {
                        var t = n[e] >= 0;
                        g[e] = t ? 1 : -1;
                        var r = t ? h[e] : l[e];
                        f[e] = t ? l[e] : h[e], m[e] = C(r, g[e]), v[e] = O(f[e], g[e]), b[e] = n[e] / S, y[e] = Math.abs(1 / b[e]);
                        var i = t ? m[e] + 1 - r : r - m[e];
                        x[e] = y[e] < 1 / 0 ? y[e] * i : 1 / 0
                    }
                }

                function L(t) {
                    for (var n = g[0], r = 0 === t ? m[0] : v[0], i = m[0] + n, a = g[1], o = 1 === t ? m[1] : v[1], s = m[1] + a, c = g[2], l = 2 === t ? m[2] : v[2], u = m[2] + c, h = r; h != i; h += n) for (var p = o; p != s; p += a) for (var d = l; d != u; d += c) if (e(h, p, d)) return !0;
                    return !1
                }

                function R() {
                    w += M;
                    var e = g[T], r = M / S, i = d;
                    for (E = 0; E < 3; E++) {
                        var a = n[E] * r;
                        l[E] += a, h[E] += a, i[E] = n[E] - a
                    }
                    if (e > 0 ? h[T] = Math.round(h[T]) : l[T] = Math.round(l[T]), t(w, T, e, i)) return !0;
                    for (E = 0; E < 3; E++) n[E] = i[E];
                    return A(), 0 === S
                }

                function P() {
                    var e = x[0] < x[1] ? x[0] < x[2] ? 0 : 2 : x[1] < x[2] ? 1 : 2, t = x[e] - M;
                    for (M = x[e], m[e] += g[e], x[e] += y[e], E = 0; E < 3; E++) f[E] += t * b[E], v[E] = O(f[E], g[E]);
                    return e
                }

                function C(e, t) {
                    return _(e - t * p)
                }

                function O(e, t) {
                    return _(e + t * p)
                }
            }(e, m, y, x, b, g);
            if (!v) {
                for (w = 0; w < 3; w++) _[w] = n[w] > 0 ? b[w] - t.max[w] : x[w] - t.base[w];
                t.translate(_)
            }
            return M
        }
    }, 353: function (e, t, n) {
        "use strict";
        var r = "Function.prototype.bind called on incompatible ", i = Array.prototype.slice,
            a = Object.prototype.toString;
        e.exports = function (e) {
            var t = this;
            if ("function" != typeof t || "[object Function]" !== a.call(t)) throw new TypeError(r + t);
            for (var n, o = i.call(arguments, 1), s = function () {
                if (this instanceof n) {
                    var r = t.apply(this, o.concat(i.call(arguments)));
                    return Object(r) === r ? r : this
                }
                return t.apply(e, o.concat(i.call(arguments)))
            }, c = Math.max(0, t.length - o.length), l = [], u = 0; u < c; u++) l.push("$" + u);
            if (n = Function("binder", "return function (" + l.join(",") + "){ return binder.apply(this,arguments); }")(s), t.prototype) {
                var h = function () {
                };
                h.prototype = t.prototype, n.prototype = new h, h.prototype = null
            }
            return n
        }
    }, 354: function (e, t, n) {
        "use strict";
        e.exports = function () {
            if ("function" != typeof Symbol || "function" != typeof Object.getOwnPropertySymbols) return !1;
            if ("symbol" == typeof Symbol.iterator) return !0;
            var e = {}, t = Symbol("test"), n = Object(t);
            if ("string" == typeof t) return !1;
            if ("[object Symbol]" !== Object.prototype.toString.call(t)) return !1;
            if ("[object Symbol]" !== Object.prototype.toString.call(n)) return !1;
            for (t in e[t] = 42, e) return !1;
            if ("function" == typeof Object.keys && 0 !== Object.keys(e).length) return !1;
            if ("function" == typeof Object.getOwnPropertyNames && 0 !== Object.getOwnPropertyNames(e).length) return !1;
            var r = Object.getOwnPropertySymbols(e);
            if (1 !== r.length || r[0] !== t) return !1;
            if (!Object.prototype.propertyIsEnumerable.call(e, t)) return !1;
            if ("function" == typeof Object.getOwnPropertyDescriptor) {
                var i = Object.getOwnPropertyDescriptor(e, t);
                if (42 !== i.value || !0 !== i.enumerable) return !1
            }
            return !0
        }
    }, 355: function (e, t, n) {
        "use strict";
        var r = Array.prototype.slice, i = n(174), a = Object.keys, o = a ? function (e) {
            return a(e)
        } : n(356), s = Object.keys;
        o.shim = function () {
            Object.keys ? function () {
                var e = Object.keys(arguments);
                return e && e.length === arguments.length
            }(1, 2) || (Object.keys = function (e) {
                return i(e) ? s(r.call(e)) : s(e)
            }) : Object.keys = o;
            return Object.keys || o
        }, e.exports = o
    }, 356: function (e, t, n) {
        "use strict";
        var r;
        if (!Object.keys) {
            var i = Object.prototype.hasOwnProperty, a = Object.prototype.toString, o = n(174),
                s = Object.prototype.propertyIsEnumerable, c = !s.call({toString: null}, "toString"),
                l = s.call((function () {
                }), "prototype"),
                u = ["toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"],
                h = function (e) {
                    var t = e.constructor;
                    return t && t.prototype === e
                }, p = {
                    $applicationCache: !0,
                    $console: !0,
                    $external: !0,
                    $frame: !0,
                    $frameElement: !0,
                    $frames: !0,
                    $innerHeight: !0,
                    $innerWidth: !0,
                    $onmozfullscreenchange: !0,
                    $onmozfullscreenerror: !0,
                    $outerHeight: !0,
                    $outerWidth: !0,
                    $pageXOffset: !0,
                    $pageYOffset: !0,
                    $parent: !0,
                    $scrollLeft: !0,
                    $scrollTop: !0,
                    $scrollX: !0,
                    $scrollY: !0,
                    $self: !0,
                    $webkitIndexedDB: !0,
                    $webkitStorageInfo: !0,
                    $window: !0
                }, d = function () {
                    if ("undefined" == typeof window) return !1;
                    for (var e in window) try {
                        if (!p["$" + e] && i.call(window, e) && null !== window[e] && "object" == typeof window[e]) try {
                            h(window[e])
                        } catch (e) {
                            return !0
                        }
                    } catch (e) {
                        return !0
                    }
                    return !1
                }();
            r = function (e) {
                var t = null !== e && "object" == typeof e, n = "[object Function]" === a.call(e), r = o(e),
                    s = t && "[object String]" === a.call(e), p = [];
                if (!t && !n && !r) throw new TypeError("Object.keys called on a non-object");
                var f = l && n;
                if (s && e.length > 0 && !i.call(e, 0)) for (var m = 0; m < e.length; ++m) p.push(String(m));
                if (r && e.length > 0) for (var v = 0; v < e.length; ++v) p.push(String(v)); else for (var g in e) f && "prototype" === g || !i.call(e, g) || p.push(String(g));
                if (c) for (var y = function (e) {
                    if ("undefined" == typeof window || !d) return h(e);
                    try {
                        return h(e)
                    } catch (e) {
                        return !1
                    }
                }(e), x = 0; x < u.length; ++x) y && "constructor" === u[x] || !i.call(e, u[x]) || p.push(u[x]);
                return p
            }
        }
        e.exports = r
    }, 357: function (e, t, n) {
        "use strict";
        var r = n(98)("RegExp.prototype.test"), i = n(122);
        e.exports = function (e) {
            return i(r, e)
        }
    }, 358: function (e, t, n) {
        "use strict";
        e.exports = function (e) {
            return null === e || "function" != typeof e && "object" != typeof e
        }
    }, 359: function (e, t, n) {
        "use strict";
        var r = n(360);
        e.exports = function (e) {
            return arguments.length > 1 ? r(e, arguments[1]) : r(e)
        }
    }, 360: function (e, t, n) {
        "use strict";
        var r = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator, i = n(361), a = n(362), o = n(363),
            s = n(364), c = function (e, t) {
                if (null == e) throw new TypeError("Cannot call method on " + e);
                if ("string" != typeof t || "number" !== t && "string" !== t) throw new TypeError('hint must be "string" or "number"');
                var n, r, o, s = "string" === t ? ["toString", "valueOf"] : ["valueOf", "toString"];
                for (o = 0; o < s.length; ++o) if (n = e[s[o]], a(n) && (r = n.call(e), i(r))) return r;
                throw new TypeError("No default value")
            }, l = function (e, t) {
                var n = e[t];
                if (null != n) {
                    if (!a(n)) throw new TypeError(n + " returned for property " + t + " of object " + e + " is not a function");
                    return n
                }
            };
        e.exports = function (e) {
            if (i(e)) return e;
            var t, n = "default";
            if (arguments.length > 1 && (arguments[1] === String ? n = "string" : arguments[1] === Number && (n = "number")), r && (Symbol.toPrimitive ? t = l(e, Symbol.toPrimitive) : s(e) && (t = Symbol.prototype.valueOf)), void 0 !== t) {
                var a = t.call(e, n);
                if (i(a)) return a;
                throw new TypeError("unable to convert exotic object to primitive")
            }
            return "default" === n && (o(e) || s(e)) && (n = "string"), c(e, "default" === n ? "number" : n)
        }
    }, 361: function (e, t, n) {
        "use strict";
        e.exports = function (e) {
            return null === e || "function" != typeof e && "object" != typeof e
        }
    }, 362: function (e, t, n) {
        "use strict";
        var r, i, a = Function.prototype.toString, o = "object" == typeof Reflect && null !== Reflect && Reflect.apply;
        if ("function" == typeof o && "function" == typeof Object.defineProperty) try {
            r = Object.defineProperty({}, "length", {
                get: function () {
                    throw i
                }
            }), i = {}
        } catch (e) {
            o = null
        } else o = null;
        var s = /^\s*class\b/, c = function (e) {
            try {
                var t = a.call(e);
                return s.test(t)
            } catch (e) {
                return !1
            }
        }, l = Object.prototype.toString, u = "function" == typeof Symbol && "symbol" == typeof Symbol.toStringTag;
        e.exports = o ? function (e) {
            if (!e) return !1;
            if ("function" != typeof e && "object" != typeof e) return !1;
            if ("function" == typeof e && !e.prototype) return !0;
            try {
                o(e, null, r)
            } catch (e) {
                if (e !== i) return !1
            }
            return !c(e)
        } : function (e) {
            if (!e) return !1;
            if ("function" != typeof e && "object" != typeof e) return !1;
            if ("function" == typeof e && !e.prototype) return !0;
            if (u) return function (e) {
                try {
                    return !c(e) && (a.call(e), !0)
                } catch (e) {
                    return !1
                }
            }(e);
            if (c(e)) return !1;
            var t = l.call(e);
            return "[object Function]" === t || "[object GeneratorFunction]" === t
        }
    }, 363: function (e, t, n) {
        "use strict";
        var r = Date.prototype.getDay, i = Object.prototype.toString,
            a = "function" == typeof Symbol && "symbol" == typeof Symbol.toStringTag;
        e.exports = function (e) {
            return "object" == typeof e && null !== e && (a ? function (e) {
                try {
                    return r.call(e), !0
                } catch (e) {
                    return !1
                }
            }(e) : "[object Date]" === i.call(e))
        }
    }, 364: function (e, t, n) {
        "use strict";
        var r = Object.prototype.toString;
        if (n(173)()) {
            var i = Symbol.prototype.toString, a = /^Symbol\(.*\)$/;
            e.exports = function (e) {
                if ("symbol" == typeof e) return !0;
                if ("[object Symbol]" !== r.call(e)) return !1;
                try {
                    return function (e) {
                        return "symbol" == typeof e.valueOf() && a.test(i.call(e))
                    }(e)
                } catch (e) {
                    return !1
                }
            }
        } else e.exports = function (e) {
            return !1
        }
    }, 367: function (e, t, n) {
        "use strict";
        e.exports = n(368)
    }, 368: function (e, t, n) {
        "use strict";
        var r = n(98)("%TypeError%");
        e.exports = function (e, t) {
            if (null == e) throw new r(t || "Cannot call method on " + e);
            return e
        }
    }, 369: function (e, t, n) {
        "use strict";
        var r = n(98), i = r("%String%"), a = r("%TypeError%");
        e.exports = function (e) {
            if ("symbol" == typeof e) throw new a("Cannot convert a Symbol value to a string");
            return i(e)
        }
    }, 370: function (e, t, n) {
        "use strict";
        var r = n(371), i = n(176);
        e.exports = function (e) {
            var t = i(e);
            return r(t)
        }
    }, 371: function (e, t, n) {
        "use strict";
        var r = n(98)("%Math%"), i = n(372), a = n(177), o = n(178), s = n(373), c = r.floor, l = r.abs;
        e.exports = function (e) {
            var t = i(e);
            return a(t) ? 0 : 0 !== t && o(t) ? s(t) * c(l(t)) : t
        }
    }, 372: function (e, t, n) {
        "use strict";
        e.exports = function (e) {
            return +e
        }
    }, 373: function (e, t, n) {
        "use strict";
        e.exports = function (e) {
            return e >= 0 ? 1 : -1
        }
    }, 374: function (e, t, n) {
        "use strict";
        /*! https://mths.be/codepointat v1.0.0 by @mathias */
        var r = n(128), i = n(182);
        e.exports = function () {
            var e = i();
            return String.prototype.codePointAt !== e && r(String.prototype, {codePointAt: e}), e
        }
    }, 76: function (e, t) {
        e.exports = function (e, t) {
            e.prototype = Object.create(t.prototype), e.prototype.constructor = e, e.__proto__ = t
        }
    }, 79: function (e, t) {
        function n(e, t) {
            for (var n = 0; n < t.length; n++) {
                var r = t[n];
                r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r)
            }
        }

        e.exports = function (e, t, r) {
            return t && n(e.prototype, t), r && n(e, r), e
        }
    }, 80: function (e, t, n) {
        "use strict";
        n.d(t, "a", (function () {
            return dc
        })), n.d(t, "b", (function () {
            return bs
        })), n.d(t, "c", (function () {
            return ul
        })), n.d(t, "d", (function () {
            return Wc
        })), n.d(t, "e", (function () {
            return Ic
        })), n.d(t, "f", (function () {
            return Vc
        })), n.d(t, "g", (function () {
            return Nc
        })), n.d(t, "h", (function () {
            return aa
        })), n.d(t, "i", (function () {
            return Ce
        })), n.d(t, "j", (function () {
            return cn
        })), n.d(t, "k", (function () {
            return vt
        })), n.d(t, "l", (function () {
            return Dt
        })), n.d(t, "m", (function () {
            return ws
        })), n.d(t, "n", (function () {
            return Ca
        })), n.d(t, "o", (function () {
            return l
        })), n.d(t, "p", (function () {
            return st
        })), n.d(t, "q", (function () {
            return pc
        })), n.d(t, "r", (function () {
            return o
        })), n.d(t, "s", (function () {
            return te
        })), n.d(t, "t", (function () {
            return L
        })), n.d(t, "u", (function () {
            return As
        })), n.d(t, "v", (function () {
            return St
        })), n.d(t, "w", (function () {
            return Ai
        })), n.d(t, "x", (function () {
            return a
        })), n.d(t, "y", (function () {
            return _i
        })), n.d(t, "z", (function () {
            return ic
        })), n.d(t, "A", (function () {
            return bc
        })), n.d(t, "B", (function () {
            return ua
        })), n.d(t, "C", (function () {
            return Li
        })), n.d(t, "D", (function () {
            return Ci
        })), n.d(t, "E", (function () {
            return cs
        })), n.d(t, "F", (function () {
            return w
        })), n.d(t, "G", (function () {
            return M
        })), n.d(t, "H", (function () {
            return ga
        })), n.d(t, "I", (function () {
            return ha
        })), n.d(t, "J", (function () {
            return _a
        })), n.d(t, "K", (function () {
            return ba
        })), n.d(t, "L", (function () {
            return f
        })), n.d(t, "M", (function () {
            return v
        })), n.d(t, "N", (function () {
            return m
        })), n.d(t, "O", (function () {
            return Ts
        })), n.d(t, "P", (function () {
            return yc
        })), n.d(t, "Q", (function () {
            return b
        })), n.d(t, "R", (function () {
            return _
        })), n.d(t, "S", (function () {
            return r
        })), n.d(t, "T", (function () {
            return dt
        })), n.d(t, "U", (function () {
            return O
        })), n.d(t, "V", (function () {
            return N
        })), n.d(t, "W", (function () {
            return Q
        })), n.d(t, "X", (function () {
            return $t
        })), n.d(t, "Y", (function () {
            return ft
        })), n.d(t, "Z", (function () {
            return $o
        })), n.d(t, "ab", (function () {
            return Qo
        })), n.d(t, "bb", (function () {
            return u
        })), n.d(t, "cb", (function () {
            return s
        })), n.d(t, "db", (function () {
            return h
        })), n.d(t, "eb", (function () {
            return d
        })), n.d(t, "fb", (function () {
            return p
        })), n.d(t, "gb", (function () {
            return ms
        })), n.d(t, "hb", (function () {
            return ve
        })), n.d(t, "ib", (function () {
            return uc
        })), n.d(t, "jb", (function () {
            return fn
        })), n.d(t, "kb", (function () {
            return Tn
        })), n.d(t, "lb", (function () {
            return lc
        })), n.d(t, "mb", (function () {
            return Aa
        })), n.d(t, "nb", (function () {
            return wa
        })), n.d(t, "ob", (function () {
            return Zc
        })), n.d(t, "pb", (function () {
            return cl
        })), n.d(t, "qb", (function () {
            return G
        })), n.d(t, "rb", (function () {
            return gs
        })), n.d(t, "sb", (function () {
            return y
        })), n.d(t, "tb", (function () {
            return g
        })), n.d(t, "ub", (function () {
            return c
        })), n.d(t, "vb", (function () {
            return ge
        })), n.d(t, "wb", (function () {
            return pn
        })), n.d(t, "xb", (function () {
            return ia
        })), n.d(t, "yb", (function () {
            return Ll
        })), n.d(t, "zb", (function () {
            return ta
        })), n.d(t, "Ab", (function () {
            return Ne
        })), n.d(t, "Bb", (function () {
            return vl
        })), n.d(t, "Cb", (function () {
            return sc
        })), n.d(t, "Db", (function () {
            return Wi
        })), n.d(t, "Eb", (function () {
            return Oi
        })), n.d(t, "Fb", (function () {
            return i
        })), n.d(t, "Gb", (function () {
            return A
        })), n.d(t, "Hb", (function () {
            return z
        })), n.d(t, "Ib", (function () {
            return Is
        })), n.d(t, "Jb", (function () {
            return T
        })), n.d(t, "Kb", (function () {
            return S
        })), n.d(t, "Lb", (function () {
            return _t
        })), n.d(t, "Mb", (function () {
            return yt
        })), n.d(t, "Nb", (function () {
            return I
        })), n.d(t, "Ob", (function () {
            return V
        })), n.d(t, "Pb", (function () {
            return xs
        })), n.d(t, "Qb", (function () {
            return Ti
        })), n.d(t, "Rb", (function () {
            return E
        })), void 0 === Number.EPSILON && (Number.EPSILON = Math.pow(2, -52)), void 0 === Number.isInteger && (Number.isInteger = function (e) {
            return "number" == typeof e && isFinite(e) && Math.floor(e) === e
        }), void 0 === Math.sign && (Math.sign = function (e) {
            return e < 0 ? -1 : e > 0 ? 1 : +e
        }), "name" in Function.prototype == !1 && Object.defineProperty(Function.prototype, "name", {
            get: function () {
                return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1]
            }
        }), void 0 === Object.assign && (Object.assign = function (e) {
            if (null == e) throw new TypeError("Cannot convert undefined or null to object");
            const t = Object(e);
            for (let e = 1; e < arguments.length; e++) {
                const n = arguments[e];
                if (null != n) for (const e in n) Object.prototype.hasOwnProperty.call(n, e) && (t[e] = n[e])
            }
            return t
        });
        const r = {LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2},
            i = {ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3}, a = 0, o = 2, s = 4, c = 1e3, l = 1001, u = 1002,
            h = 1003, p = 1004, d = 1005, f = 1006, m = 1007, v = 1008, g = 1022, y = 1023, x = y, b = 2200, _ = 2201,
            w = 2300, M = 2301, S = 1, T = 2, E = 3001, A = 0;

        function L() {
        }

        Object.assign(L.prototype, {
            addEventListener: function (e, t) {
                void 0 === this._listeners && (this._listeners = {});
                var n = this._listeners;
                void 0 === n[e] && (n[e] = []), -1 === n[e].indexOf(t) && n[e].push(t)
            }, hasEventListener: function (e, t) {
                if (void 0 === this._listeners) return !1;
                var n = this._listeners;
                return void 0 !== n[e] && -1 !== n[e].indexOf(t)
            }, removeEventListener: function (e, t) {
                if (void 0 !== this._listeners) {
                    var n = this._listeners[e];
                    if (void 0 !== n) {
                        var r = n.indexOf(t);
                        -1 !== r && n.splice(r, 1)
                    }
                }
            }, dispatchEvent: function (e) {
                if (void 0 !== this._listeners) {
                    var t = this._listeners[e.type];
                    if (void 0 !== t) {
                        e.target = this;
                        for (var n = t.slice(0), r = 0, i = n.length; r < i; r++) n[r].call(this, e)
                    }
                }
            }
        });
        for (var R = [], P = 0; P < 256; P++) R[P] = (P < 16 ? "0" : "") + P.toString(16);
        var C, O = {
            DEG2RAD: Math.PI / 180, RAD2DEG: 180 / Math.PI, generateUUID: function () {
                var e = 4294967295 * Math.random() | 0, t = 4294967295 * Math.random() | 0,
                    n = 4294967295 * Math.random() | 0, r = 4294967295 * Math.random() | 0;
                return (R[255 & e] + R[e >> 8 & 255] + R[e >> 16 & 255] + R[e >> 24 & 255] + "-" + R[255 & t] + R[t >> 8 & 255] + "-" + R[t >> 16 & 15 | 64] + R[t >> 24 & 255] + "-" + R[63 & n | 128] + R[n >> 8 & 255] + "-" + R[n >> 16 & 255] + R[n >> 24 & 255] + R[255 & r] + R[r >> 8 & 255] + R[r >> 16 & 255] + R[r >> 24 & 255]).toUpperCase()
            }, clamp: function (e, t, n) {
                return Math.max(t, Math.min(n, e))
            }, euclideanModulo: function (e, t) {
                return (e % t + t) % t
            }, mapLinear: function (e, t, n, r, i) {
                return r + (e - t) * (i - r) / (n - t)
            }, lerp: function (e, t, n) {
                return (1 - n) * e + n * t
            }, smoothstep: function (e, t, n) {
                return e <= t ? 0 : e >= n ? 1 : (e = (e - t) / (n - t)) * e * (3 - 2 * e)
            }, smootherstep: function (e, t, n) {
                return e <= t ? 0 : e >= n ? 1 : (e = (e - t) / (n - t)) * e * e * (e * (6 * e - 15) + 10)
            }, randInt: function (e, t) {
                return e + Math.floor(Math.random() * (t - e + 1))
            }, randFloat: function (e, t) {
                return e + Math.random() * (t - e)
            }, randFloatSpread: function (e) {
                return e * (.5 - Math.random())
            }, degToRad: function (e) {
                return e * O.DEG2RAD
            }, radToDeg: function (e) {
                return e * O.RAD2DEG
            }, isPowerOfTwo: function (e) {
                return 0 == (e & e - 1) && 0 !== e
            }, ceilPowerOfTwo: function (e) {
                return Math.pow(2, Math.ceil(Math.log(e) / Math.LN2))
            }, floorPowerOfTwo: function (e) {
                return Math.pow(2, Math.floor(Math.log(e) / Math.LN2))
            }, setQuaternionFromProperEuler: function (e, t, n, r, i) {
                var a = Math.cos, o = Math.sin, s = a(n / 2), c = o(n / 2), l = a((t + r) / 2), u = o((t + r) / 2),
                    h = a((t - r) / 2), p = o((t - r) / 2), d = a((r - t) / 2), f = o((r - t) / 2);
                switch (i) {
                    case"XYX":
                        e.set(s * u, c * h, c * p, s * l);
                        break;
                    case"YZY":
                        e.set(c * p, s * u, c * h, s * l);
                        break;
                    case"ZXZ":
                        e.set(c * h, c * p, s * u, s * l);
                        break;
                    case"XZX":
                        e.set(s * u, c * f, c * d, s * l);
                        break;
                    case"YXY":
                        e.set(c * d, s * u, c * f, s * l);
                        break;
                    case"ZYZ":
                        e.set(c * f, c * d, s * u, s * l);
                        break;
                    default:
                        console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + i)
                }
            }
        };

        function I(e, t) {
            this.x = e || 0, this.y = t || 0
        }

        function N() {
            this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1], arguments.length > 0 && console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")
        }

        Object.defineProperties(I.prototype, {
            width: {
                get: function () {
                    return this.x
                }, set: function (e) {
                    this.x = e
                }
            }, height: {
                get: function () {
                    return this.y
                }, set: function (e) {
                    this.y = e
                }
            }
        }), Object.assign(I.prototype, {
            isVector2: !0, set: function (e, t) {
                return this.x = e, this.y = t, this
            }, setScalar: function (e) {
                return this.x = e, this.y = e, this
            }, setX: function (e) {
                return this.x = e, this
            }, setY: function (e) {
                return this.y = e, this
            }, setComponent: function (e, t) {
                switch (e) {
                    case 0:
                        this.x = t;
                        break;
                    case 1:
                        this.y = t;
                        break;
                    default:
                        throw new Error("index is out of range: " + e)
                }
                return this
            }, getComponent: function (e) {
                switch (e) {
                    case 0:
                        return this.x;
                    case 1:
                        return this.y;
                    default:
                        throw new Error("index is out of range: " + e)
                }
            }, clone: function () {
                return new this.constructor(this.x, this.y)
            }, copy: function (e) {
                return this.x = e.x, this.y = e.y, this
            }, add: function (e, t) {
                return void 0 !== t ? (console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(e, t)) : (this.x += e.x, this.y += e.y, this)
            }, addScalar: function (e) {
                return this.x += e, this.y += e, this
            }, addVectors: function (e, t) {
                return this.x = e.x + t.x, this.y = e.y + t.y, this
            }, addScaledVector: function (e, t) {
                return this.x += e.x * t, this.y += e.y * t, this
            }, sub: function (e, t) {
                return void 0 !== t ? (console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(e, t)) : (this.x -= e.x, this.y -= e.y, this)
            }, subScalar: function (e) {
                return this.x -= e, this.y -= e, this
            }, subVectors: function (e, t) {
                return this.x = e.x - t.x, this.y = e.y - t.y, this
            }, multiply: function (e) {
                return this.x *= e.x, this.y *= e.y, this
            }, multiplyScalar: function (e) {
                return this.x *= e, this.y *= e, this
            }, divide: function (e) {
                return this.x /= e.x, this.y /= e.y, this
            }, divideScalar: function (e) {
                return this.multiplyScalar(1 / e)
            }, applyMatrix3: function (e) {
                var t = this.x, n = this.y, r = e.elements;
                return this.x = r[0] * t + r[3] * n + r[6], this.y = r[1] * t + r[4] * n + r[7], this
            }, min: function (e) {
                return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this
            }, max: function (e) {
                return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this
            }, clamp: function (e, t) {
                return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this
            }, clampScalar: function (e, t) {
                return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this
            }, clampLength: function (e, t) {
                var n = this.length();
                return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)))
            }, floor: function () {
                return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this
            }, ceil: function () {
                return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this
            }, round: function () {
                return this.x = Math.round(this.x), this.y = Math.round(this.y), this
            }, roundToZero: function () {
                return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this
            }, negate: function () {
                return this.x = -this.x, this.y = -this.y, this
            }, dot: function (e) {
                return this.x * e.x + this.y * e.y
            }, cross: function (e) {
                return this.x * e.y - this.y * e.x
            }, lengthSq: function () {
                return this.x * this.x + this.y * this.y
            }, length: function () {
                return Math.sqrt(this.x * this.x + this.y * this.y)
            }, manhattanLength: function () {
                return Math.abs(this.x) + Math.abs(this.y)
            }, normalize: function () {
                return this.divideScalar(this.length() || 1)
            }, angle: function () {
                return Math.atan2(-this.y, -this.x) + Math.PI
            }, distanceTo: function (e) {
                return Math.sqrt(this.distanceToSquared(e))
            }, distanceToSquared: function (e) {
                var t = this.x - e.x, n = this.y - e.y;
                return t * t + n * n
            }, manhattanDistanceTo: function (e) {
                return Math.abs(this.x - e.x) + Math.abs(this.y - e.y)
            }, setLength: function (e) {
                return this.normalize().multiplyScalar(e)
            }, lerp: function (e, t) {
                return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this
            }, lerpVectors: function (e, t, n) {
                return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this
            }, equals: function (e) {
                return e.x === this.x && e.y === this.y
            }, fromArray: function (e, t) {
                return void 0 === t && (t = 0), this.x = e[t], this.y = e[t + 1], this
            }, toArray: function (e, t) {
                return void 0 === e && (e = []), void 0 === t && (t = 0), e[t] = this.x, e[t + 1] = this.y, e
            }, fromBufferAttribute: function (e, t, n) {
                return void 0 !== n && console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."), this.x = e.getX(t), this.y = e.getY(t), this
            }, rotateAround: function (e, t) {
                var n = Math.cos(t), r = Math.sin(t), i = this.x - e.x, a = this.y - e.y;
                return this.x = i * n - a * r + e.x, this.y = i * r + a * n + e.y, this
            }, random: function () {
                return this.x = Math.random(), this.y = Math.random(), this
            }
        }), Object.assign(N.prototype, {
            isMatrix3: !0, set: function (e, t, n, r, i, a, o, s, c) {
                var l = this.elements;
                return l[0] = e, l[1] = r, l[2] = o, l[3] = t, l[4] = i, l[5] = s, l[6] = n, l[7] = a, l[8] = c, this
            }, identity: function () {
                return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1), this
            }, clone: function () {
                return (new this.constructor).fromArray(this.elements)
            }, copy: function (e) {
                var t = this.elements, n = e.elements;
                return t[0] = n[0], t[1] = n[1], t[2] = n[2], t[3] = n[3], t[4] = n[4], t[5] = n[5], t[6] = n[6], t[7] = n[7], t[8] = n[8], this
            }, extractBasis: function (e, t, n) {
                return e.setFromMatrix3Column(this, 0), t.setFromMatrix3Column(this, 1), n.setFromMatrix3Column(this, 2), this
            }, setFromMatrix4: function (e) {
                var t = e.elements;
                return this.set(t[0], t[4], t[8], t[1], t[5], t[9], t[2], t[6], t[10]), this
            }, multiply: function (e) {
                return this.multiplyMatrices(this, e)
            }, premultiply: function (e) {
                return this.multiplyMatrices(e, this)
            }, multiplyMatrices: function (e, t) {
                var n = e.elements, r = t.elements, i = this.elements, a = n[0], o = n[3], s = n[6], c = n[1], l = n[4],
                    u = n[7], h = n[2], p = n[5], d = n[8], f = r[0], m = r[3], v = r[6], g = r[1], y = r[4], x = r[7],
                    b = r[2], _ = r[5], w = r[8];
                return i[0] = a * f + o * g + s * b, i[3] = a * m + o * y + s * _, i[6] = a * v + o * x + s * w, i[1] = c * f + l * g + u * b, i[4] = c * m + l * y + u * _, i[7] = c * v + l * x + u * w, i[2] = h * f + p * g + d * b, i[5] = h * m + p * y + d * _, i[8] = h * v + p * x + d * w, this
            }, multiplyScalar: function (e) {
                var t = this.elements;
                return t[0] *= e, t[3] *= e, t[6] *= e, t[1] *= e, t[4] *= e, t[7] *= e, t[2] *= e, t[5] *= e, t[8] *= e, this
            }, determinant: function () {
                var e = this.elements, t = e[0], n = e[1], r = e[2], i = e[3], a = e[4], o = e[5], s = e[6], c = e[7],
                    l = e[8];
                return t * a * l - t * o * c - n * i * l + n * o * s + r * i * c - r * a * s
            }, getInverse: function (e, t) {
                void 0 !== t && console.warn("THREE.Matrix3: .getInverse() can no longer be configured to throw on degenerate.");
                var n = e.elements, r = this.elements, i = n[0], a = n[1], o = n[2], s = n[3], c = n[4], l = n[5],
                    u = n[6], h = n[7], p = n[8], d = p * c - l * h, f = l * u - p * s, m = h * s - c * u,
                    v = i * d + a * f + o * m;
                if (0 === v) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
                var g = 1 / v;
                return r[0] = d * g, r[1] = (o * h - p * a) * g, r[2] = (l * a - o * c) * g, r[3] = f * g, r[4] = (p * i - o * u) * g, r[5] = (o * s - l * i) * g, r[6] = m * g, r[7] = (a * u - h * i) * g, r[8] = (c * i - a * s) * g, this
            }, transpose: function () {
                var e, t = this.elements;
                return e = t[1], t[1] = t[3], t[3] = e, e = t[2], t[2] = t[6], t[6] = e, e = t[5], t[5] = t[7], t[7] = e, this
            }, getNormalMatrix: function (e) {
                return this.setFromMatrix4(e).getInverse(this).transpose()
            }, transposeIntoArray: function (e) {
                var t = this.elements;
                return e[0] = t[0], e[1] = t[3], e[2] = t[6], e[3] = t[1], e[4] = t[4], e[5] = t[7], e[6] = t[2], e[7] = t[5], e[8] = t[8], this
            }, setUvTransform: function (e, t, n, r, i, a, o) {
                var s = Math.cos(i), c = Math.sin(i);
                this.set(n * s, n * c, -n * (s * a + c * o) + a + e, -r * c, r * s, -r * (-c * a + s * o) + o + t, 0, 0, 1)
            }, scale: function (e, t) {
                var n = this.elements;
                return n[0] *= e, n[3] *= e, n[6] *= e, n[1] *= t, n[4] *= t, n[7] *= t, this
            }, rotate: function (e) {
                var t = Math.cos(e), n = Math.sin(e), r = this.elements, i = r[0], a = r[3], o = r[6], s = r[1],
                    c = r[4], l = r[7];
                return r[0] = t * i + n * s, r[3] = t * a + n * c, r[6] = t * o + n * l, r[1] = -n * i + t * s, r[4] = -n * a + t * c, r[7] = -n * o + t * l, this
            }, translate: function (e, t) {
                var n = this.elements;
                return n[0] += e * n[2], n[3] += e * n[5], n[6] += e * n[8], n[1] += t * n[2], n[4] += t * n[5], n[7] += t * n[8], this
            }, equals: function (e) {
                for (var t = this.elements, n = e.elements, r = 0; r < 9; r++) if (t[r] !== n[r]) return !1;
                return !0
            }, fromArray: function (e, t) {
                void 0 === t && (t = 0);
                for (var n = 0; n < 9; n++) this.elements[n] = e[n + t];
                return this
            }, toArray: function (e, t) {
                void 0 === e && (e = []), void 0 === t && (t = 0);
                var n = this.elements;
                return e[t] = n[0], e[t + 1] = n[1], e[t + 2] = n[2], e[t + 3] = n[3], e[t + 4] = n[4], e[t + 5] = n[5], e[t + 6] = n[6], e[t + 7] = n[7], e[t + 8] = n[8], e
            }
        });
        var D = {
            getDataURL: function (e) {
                var t;
                if ("undefined" == typeof HTMLCanvasElement) return e.src;
                if (e instanceof HTMLCanvasElement) t = e; else {
                    void 0 === C && (C = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas")), C.width = e.width, C.height = e.height;
                    var n = C.getContext("2d");
                    e instanceof ImageData ? n.putImageData(e, 0, 0) : n.drawImage(e, 0, 0, e.width, e.height), t = C
                }
                return t.width > 2048 || t.height > 2048 ? t.toDataURL("image/jpeg", .6) : t.toDataURL("image/png")
            }
        }, U = 0;

        function z(e, t, n, r, i, a, o, s, c, u) {
            Object.defineProperty(this, "id", {value: U++}), this.uuid = O.generateUUID(), this.name = "", this.image = void 0 !== e ? e : z.DEFAULT_IMAGE, this.mipmaps = [], this.mapping = void 0 !== t ? t : z.DEFAULT_MAPPING, this.wrapS = void 0 !== n ? n : l, this.wrapT = void 0 !== r ? r : l, this.magFilter = void 0 !== i ? i : f, this.minFilter = void 0 !== a ? a : v, this.anisotropy = void 0 !== c ? c : 1, this.format = void 0 !== o ? o : y, this.internalFormat = null, this.type = void 0 !== s ? s : 1009, this.offset = new I(0, 0), this.repeat = new I(1, 1), this.center = new I(0, 0), this.rotation = 0, this.matrixAutoUpdate = !0, this.matrix = new N, this.generateMipmaps = !0, this.premultiplyAlpha = !1, this.flipY = !0, this.unpackAlignment = 4, this.encoding = void 0 !== u ? u : 3e3, this.version = 0, this.onUpdate = null
        }

        function F(e, t, n, r) {
            this.x = e || 0, this.y = t || 0, this.z = n || 0, this.w = void 0 !== r ? r : 1
        }

        function B(e, t, n) {
            this.width = e, this.height = t, this.scissor = new F(0, 0, e, t), this.scissorTest = !1, this.viewport = new F(0, 0, e, t), n = n || {}, this.texture = new z(void 0, n.mapping, n.wrapS, n.wrapT, n.magFilter, n.minFilter, n.format, n.type, n.anisotropy, n.encoding), this.texture.image = {}, this.texture.image.width = e, this.texture.image.height = t, this.texture.generateMipmaps = void 0 !== n.generateMipmaps && n.generateMipmaps, this.texture.minFilter = void 0 !== n.minFilter ? n.minFilter : f, this.depthBuffer = void 0 === n.depthBuffer || n.depthBuffer, this.stencilBuffer = void 0 === n.stencilBuffer || n.stencilBuffer, this.depthTexture = void 0 !== n.depthTexture ? n.depthTexture : null
        }

        function H(e, t, n) {
            B.call(this, e, t, n), this.samples = 4
        }

        function G(e, t, n, r) {
            this._x = e || 0, this._y = t || 0, this._z = n || 0, this._w = void 0 !== r ? r : 1
        }

        z.DEFAULT_IMAGE = void 0, z.DEFAULT_MAPPING = 300, z.prototype = Object.assign(Object.create(L.prototype), {
            constructor: z, isTexture: !0, updateMatrix: function () {
                this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y)
            }, clone: function () {
                return (new this.constructor).copy(this)
            }, copy: function (e) {
                return this.name = e.name, this.image = e.image, this.mipmaps = e.mipmaps.slice(0), this.mapping = e.mapping, this.wrapS = e.wrapS, this.wrapT = e.wrapT, this.magFilter = e.magFilter, this.minFilter = e.minFilter, this.anisotropy = e.anisotropy, this.format = e.format, this.internalFormat = e.internalFormat, this.type = e.type, this.offset.copy(e.offset), this.repeat.copy(e.repeat), this.center.copy(e.center), this.rotation = e.rotation, this.matrixAutoUpdate = e.matrixAutoUpdate, this.matrix.copy(e.matrix), this.generateMipmaps = e.generateMipmaps, this.premultiplyAlpha = e.premultiplyAlpha, this.flipY = e.flipY, this.unpackAlignment = e.unpackAlignment, this.encoding = e.encoding, this
            }, toJSON: function (e) {
                var t = void 0 === e || "string" == typeof e;
                if (!t && void 0 !== e.textures[this.uuid]) return e.textures[this.uuid];
                var n = {
                    metadata: {version: 4.5, type: "Texture", generator: "Texture.toJSON"},
                    uuid: this.uuid,
                    name: this.name,
                    mapping: this.mapping,
                    repeat: [this.repeat.x, this.repeat.y],
                    offset: [this.offset.x, this.offset.y],
                    center: [this.center.x, this.center.y],
                    rotation: this.rotation,
                    wrap: [this.wrapS, this.wrapT],
                    format: this.format,
                    type: this.type,
                    encoding: this.encoding,
                    minFilter: this.minFilter,
                    magFilter: this.magFilter,
                    anisotropy: this.anisotropy,
                    flipY: this.flipY,
                    premultiplyAlpha: this.premultiplyAlpha,
                    unpackAlignment: this.unpackAlignment
                };
                if (void 0 !== this.image) {
                    var r = this.image;
                    if (void 0 === r.uuid && (r.uuid = O.generateUUID()), !t && void 0 === e.images[r.uuid]) {
                        var i;
                        if (Array.isArray(r)) {
                            i = [];
                            for (var a = 0, o = r.length; a < o; a++) i.push(D.getDataURL(r[a]))
                        } else i = D.getDataURL(r);
                        e.images[r.uuid] = {uuid: r.uuid, url: i}
                    }
                    n.image = r.uuid
                }
                return t || (e.textures[this.uuid] = n), n
            }, dispose: function () {
                this.dispatchEvent({type: "dispose"})
            }, transformUv: function (e) {
                if (300 !== this.mapping) return e;
                if (e.applyMatrix3(this.matrix), e.x < 0 || e.x > 1) switch (this.wrapS) {
                    case c:
                        e.x = e.x - Math.floor(e.x);
                        break;
                    case l:
                        e.x = e.x < 0 ? 0 : 1;
                        break;
                    case u:
                        1 === Math.abs(Math.floor(e.x) % 2) ? e.x = Math.ceil(e.x) - e.x : e.x = e.x - Math.floor(e.x)
                }
                if (e.y < 0 || e.y > 1) switch (this.wrapT) {
                    case c:
                        e.y = e.y - Math.floor(e.y);
                        break;
                    case l:
                        e.y = e.y < 0 ? 0 : 1;
                        break;
                    case u:
                        1 === Math.abs(Math.floor(e.y) % 2) ? e.y = Math.ceil(e.y) - e.y : e.y = e.y - Math.floor(e.y)
                }
                return this.flipY && (e.y = 1 - e.y), e
            }
        }), Object.defineProperty(z.prototype, "needsUpdate", {
            set: function (e) {
                !0 === e && this.version++
            }
        }), Object.defineProperties(F.prototype, {
            width: {
                get: function () {
                    return this.z
                }, set: function (e) {
                    this.z = e
                }
            }, height: {
                get: function () {
                    return this.w
                }, set: function (e) {
                    this.w = e
                }
            }
        }), Object.assign(F.prototype, {
            isVector4: !0, set: function (e, t, n, r) {
                return this.x = e, this.y = t, this.z = n, this.w = r, this
            }, setScalar: function (e) {
                return this.x = e, this.y = e, this.z = e, this.w = e, this
            }, setX: function (e) {
                return this.x = e, this
            }, setY: function (e) {
                return this.y = e, this
            }, setZ: function (e) {
                return this.z = e, this
            }, setW: function (e) {
                return this.w = e, this
            }, setComponent: function (e, t) {
                switch (e) {
                    case 0:
                        this.x = t;
                        break;
                    case 1:
                        this.y = t;
                        break;
                    case 2:
                        this.z = t;
                        break;
                    case 3:
                        this.w = t;
                        break;
                    default:
                        throw new Error("index is out of range: " + e)
                }
                return this
            }, getComponent: function (e) {
                switch (e) {
                    case 0:
                        return this.x;
                    case 1:
                        return this.y;
                    case 2:
                        return this.z;
                    case 3:
                        return this.w;
                    default:
                        throw new Error("index is out of range: " + e)
                }
            }, clone: function () {
                return new this.constructor(this.x, this.y, this.z, this.w)
            }, copy: function (e) {
                return this.x = e.x, this.y = e.y, this.z = e.z, this.w = void 0 !== e.w ? e.w : 1, this
            }, add: function (e, t) {
                return void 0 !== t ? (console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(e, t)) : (this.x += e.x, this.y += e.y, this.z += e.z, this.w += e.w, this)
            }, addScalar: function (e) {
                return this.x += e, this.y += e, this.z += e, this.w += e, this
            }, addVectors: function (e, t) {
                return this.x = e.x + t.x, this.y = e.y + t.y, this.z = e.z + t.z, this.w = e.w + t.w, this
            }, addScaledVector: function (e, t) {
                return this.x += e.x * t, this.y += e.y * t, this.z += e.z * t, this.w += e.w * t, this
            }, sub: function (e, t) {
                return void 0 !== t ? (console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(e, t)) : (this.x -= e.x, this.y -= e.y, this.z -= e.z, this.w -= e.w, this)
            }, subScalar: function (e) {
                return this.x -= e, this.y -= e, this.z -= e, this.w -= e, this
            }, subVectors: function (e, t) {
                return this.x = e.x - t.x, this.y = e.y - t.y, this.z = e.z - t.z, this.w = e.w - t.w, this
            }, multiplyScalar: function (e) {
                return this.x *= e, this.y *= e, this.z *= e, this.w *= e, this
            }, applyMatrix4: function (e) {
                var t = this.x, n = this.y, r = this.z, i = this.w, a = e.elements;
                return this.x = a[0] * t + a[4] * n + a[8] * r + a[12] * i, this.y = a[1] * t + a[5] * n + a[9] * r + a[13] * i, this.z = a[2] * t + a[6] * n + a[10] * r + a[14] * i, this.w = a[3] * t + a[7] * n + a[11] * r + a[15] * i, this
            }, divideScalar: function (e) {
                return this.multiplyScalar(1 / e)
            }, setAxisAngleFromQuaternion: function (e) {
                this.w = 2 * Math.acos(e.w);
                var t = Math.sqrt(1 - e.w * e.w);
                return t < 1e-4 ? (this.x = 1, this.y = 0, this.z = 0) : (this.x = e.x / t, this.y = e.y / t, this.z = e.z / t), this
            }, setAxisAngleFromRotationMatrix: function (e) {
                var t, n, r, i, a = e.elements, o = a[0], s = a[4], c = a[8], l = a[1], u = a[5], h = a[9], p = a[2],
                    d = a[6], f = a[10];
                if (Math.abs(s - l) < .01 && Math.abs(c - p) < .01 && Math.abs(h - d) < .01) {
                    if (Math.abs(s + l) < .1 && Math.abs(c + p) < .1 && Math.abs(h + d) < .1 && Math.abs(o + u + f - 3) < .1) return this.set(1, 0, 0, 0), this;
                    t = Math.PI;
                    var m = (o + 1) / 2, v = (u + 1) / 2, g = (f + 1) / 2, y = (s + l) / 4, x = (c + p) / 4,
                        b = (h + d) / 4;
                    return m > v && m > g ? m < .01 ? (n = 0, r = .707106781, i = .707106781) : (r = y / (n = Math.sqrt(m)), i = x / n) : v > g ? v < .01 ? (n = .707106781, r = 0, i = .707106781) : (n = y / (r = Math.sqrt(v)), i = b / r) : g < .01 ? (n = .707106781, r = .707106781, i = 0) : (n = x / (i = Math.sqrt(g)), r = b / i), this.set(n, r, i, t), this
                }
                var _ = Math.sqrt((d - h) * (d - h) + (c - p) * (c - p) + (l - s) * (l - s));
                return Math.abs(_) < .001 && (_ = 1), this.x = (d - h) / _, this.y = (c - p) / _, this.z = (l - s) / _, this.w = Math.acos((o + u + f - 1) / 2), this
            }, min: function (e) {
                return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this.z = Math.min(this.z, e.z), this.w = Math.min(this.w, e.w), this
            }, max: function (e) {
                return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this.z = Math.max(this.z, e.z), this.w = Math.max(this.w, e.w), this
            }, clamp: function (e, t) {
                return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this.z = Math.max(e.z, Math.min(t.z, this.z)), this.w = Math.max(e.w, Math.min(t.w, this.w)), this
            }, clampScalar: function (e, t) {
                return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this.z = Math.max(e, Math.min(t, this.z)), this.w = Math.max(e, Math.min(t, this.w)), this
            }, clampLength: function (e, t) {
                var n = this.length();
                return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)))
            }, floor: function () {
                return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this.w = Math.floor(this.w), this
            }, ceil: function () {
                return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this.w = Math.ceil(this.w), this
            }, round: function () {
                return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this.w = Math.round(this.w), this
            }, roundToZero: function () {
                return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z), this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w), this
            }, negate: function () {
                return this.x = -this.x, this.y = -this.y, this.z = -this.z, this.w = -this.w, this
            }, dot: function (e) {
                return this.x * e.x + this.y * e.y + this.z * e.z + this.w * e.w
            }, lengthSq: function () {
                return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w
            }, length: function () {
                return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)
            }, manhattanLength: function () {
                return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w)
            }, normalize: function () {
                return this.divideScalar(this.length() || 1)
            }, setLength: function (e) {
                return this.normalize().multiplyScalar(e)
            }, lerp: function (e, t) {
                return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this.z += (e.z - this.z) * t, this.w += (e.w - this.w) * t, this
            }, lerpVectors: function (e, t, n) {
                return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this.z = e.z + (t.z - e.z) * n, this.w = e.w + (t.w - e.w) * n, this
            }, equals: function (e) {
                return e.x === this.x && e.y === this.y && e.z === this.z && e.w === this.w
            }, fromArray: function (e, t) {
                return void 0 === t && (t = 0), this.x = e[t], this.y = e[t + 1], this.z = e[t + 2], this.w = e[t + 3], this
            }, toArray: function (e, t) {
                return void 0 === e && (e = []), void 0 === t && (t = 0), e[t] = this.x, e[t + 1] = this.y, e[t + 2] = this.z, e[t + 3] = this.w, e
            }, fromBufferAttribute: function (e, t, n) {
                return void 0 !== n && console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."), this.x = e.getX(t), this.y = e.getY(t), this.z = e.getZ(t), this.w = e.getW(t), this
            }, random: function () {
                return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this.w = Math.random(), this
            }
        }), B.prototype = Object.assign(Object.create(L.prototype), {
            constructor: B,
            isWebGLRenderTarget: !0,
            setSize: function (e, t) {
                this.width === e && this.height === t || (this.width = e, this.height = t, this.texture.image.width = e, this.texture.image.height = t, this.dispose()), this.viewport.set(0, 0, e, t), this.scissor.set(0, 0, e, t)
            },
            clone: function () {
                return (new this.constructor).copy(this)
            },
            copy: function (e) {
                return this.width = e.width, this.height = e.height, this.viewport.copy(e.viewport), this.texture = e.texture.clone(), this.depthBuffer = e.depthBuffer, this.stencilBuffer = e.stencilBuffer, this.depthTexture = e.depthTexture, this
            },
            dispose: function () {
                this.dispatchEvent({type: "dispose"})
            }
        }), H.prototype = Object.assign(Object.create(B.prototype), {
            constructor: H,
            isWebGLMultisampleRenderTarget: !0,
            copy: function (e) {
                return B.prototype.copy.call(this, e), this.samples = e.samples, this
            }
        }), Object.assign(G, {
            slerp: function (e, t, n, r) {
                return n.copy(e).slerp(t, r)
            }, slerpFlat: function (e, t, n, r, i, a, o) {
                var s = n[r + 0], c = n[r + 1], l = n[r + 2], u = n[r + 3], h = i[a + 0], p = i[a + 1], d = i[a + 2],
                    f = i[a + 3];
                if (u !== f || s !== h || c !== p || l !== d) {
                    var m = 1 - o, v = s * h + c * p + l * d + u * f, g = v >= 0 ? 1 : -1, y = 1 - v * v;
                    if (y > Number.EPSILON) {
                        var x = Math.sqrt(y), b = Math.atan2(x, v * g);
                        m = Math.sin(m * b) / x, o = Math.sin(o * b) / x
                    }
                    var _ = o * g;
                    if (s = s * m + h * _, c = c * m + p * _, l = l * m + d * _, u = u * m + f * _, m === 1 - o) {
                        var w = 1 / Math.sqrt(s * s + c * c + l * l + u * u);
                        s *= w, c *= w, l *= w, u *= w
                    }
                }
                e[t] = s, e[t + 1] = c, e[t + 2] = l, e[t + 3] = u
            }, multiplyQuaternionsFlat: function (e, t, n, r, i, a) {
                var o = n[r], s = n[r + 1], c = n[r + 2], l = n[r + 3], u = i[a], h = i[a + 1], p = i[a + 2],
                    d = i[a + 3];
                return e[t] = o * d + l * u + s * p - c * h, e[t + 1] = s * d + l * h + c * u - o * p, e[t + 2] = c * d + l * p + o * h - s * u, e[t + 3] = l * d - o * u - s * h - c * p, e
            }
        }), Object.defineProperties(G.prototype, {
            x: {
                get: function () {
                    return this._x
                }, set: function (e) {
                    this._x = e, this._onChangeCallback()
                }
            }, y: {
                get: function () {
                    return this._y
                }, set: function (e) {
                    this._y = e, this._onChangeCallback()
                }
            }, z: {
                get: function () {
                    return this._z
                }, set: function (e) {
                    this._z = e, this._onChangeCallback()
                }
            }, w: {
                get: function () {
                    return this._w
                }, set: function (e) {
                    this._w = e, this._onChangeCallback()
                }
            }
        }), Object.assign(G.prototype, {
            isQuaternion: !0, set: function (e, t, n, r) {
                return this._x = e, this._y = t, this._z = n, this._w = r, this._onChangeCallback(), this
            }, clone: function () {
                return new this.constructor(this._x, this._y, this._z, this._w)
            }, copy: function (e) {
                return this._x = e.x, this._y = e.y, this._z = e.z, this._w = e.w, this._onChangeCallback(), this
            }, setFromEuler: function (e, t) {
                if (!e || !e.isEuler) throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");
                var n = e._x, r = e._y, i = e._z, a = e.order, o = Math.cos, s = Math.sin, c = o(n / 2), l = o(r / 2),
                    u = o(i / 2), h = s(n / 2), p = s(r / 2), d = s(i / 2);
                switch (a) {
                    case"XYZ":
                        this._x = h * l * u + c * p * d, this._y = c * p * u - h * l * d, this._z = c * l * d + h * p * u, this._w = c * l * u - h * p * d;
                        break;
                    case"YXZ":
                        this._x = h * l * u + c * p * d, this._y = c * p * u - h * l * d, this._z = c * l * d - h * p * u, this._w = c * l * u + h * p * d;
                        break;
                    case"ZXY":
                        this._x = h * l * u - c * p * d, this._y = c * p * u + h * l * d, this._z = c * l * d + h * p * u, this._w = c * l * u - h * p * d;
                        break;
                    case"ZYX":
                        this._x = h * l * u - c * p * d, this._y = c * p * u + h * l * d, this._z = c * l * d - h * p * u, this._w = c * l * u + h * p * d;
                        break;
                    case"YZX":
                        this._x = h * l * u + c * p * d, this._y = c * p * u + h * l * d, this._z = c * l * d - h * p * u, this._w = c * l * u - h * p * d;
                        break;
                    case"XZY":
                        this._x = h * l * u - c * p * d, this._y = c * p * u - h * l * d, this._z = c * l * d + h * p * u, this._w = c * l * u + h * p * d;
                        break;
                    default:
                        console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + a)
                }
                return !1 !== t && this._onChangeCallback(), this
            }, setFromAxisAngle: function (e, t) {
                var n = t / 2, r = Math.sin(n);
                return this._x = e.x * r, this._y = e.y * r, this._z = e.z * r, this._w = Math.cos(n), this._onChangeCallback(), this
            }, setFromRotationMatrix: function (e) {
                var t, n = e.elements, r = n[0], i = n[4], a = n[8], o = n[1], s = n[5], c = n[9], l = n[2], u = n[6],
                    h = n[10], p = r + s + h;
                return p > 0 ? (t = .5 / Math.sqrt(p + 1), this._w = .25 / t, this._x = (u - c) * t, this._y = (a - l) * t, this._z = (o - i) * t) : r > s && r > h ? (t = 2 * Math.sqrt(1 + r - s - h), this._w = (u - c) / t, this._x = .25 * t, this._y = (i + o) / t, this._z = (a + l) / t) : s > h ? (t = 2 * Math.sqrt(1 + s - r - h), this._w = (a - l) / t, this._x = (i + o) / t, this._y = .25 * t, this._z = (c + u) / t) : (t = 2 * Math.sqrt(1 + h - r - s), this._w = (o - i) / t, this._x = (a + l) / t, this._y = (c + u) / t, this._z = .25 * t), this._onChangeCallback(), this
            }, setFromUnitVectors: function (e, t) {
                var n = e.dot(t) + 1;
                return n < 1e-6 ? (n = 0, Math.abs(e.x) > Math.abs(e.z) ? (this._x = -e.y, this._y = e.x, this._z = 0, this._w = n) : (this._x = 0, this._y = -e.z, this._z = e.y, this._w = n)) : (this._x = e.y * t.z - e.z * t.y, this._y = e.z * t.x - e.x * t.z, this._z = e.x * t.y - e.y * t.x, this._w = n), this.normalize()
            }, angleTo: function (e) {
                return 2 * Math.acos(Math.abs(O.clamp(this.dot(e), -1, 1)))
            }, rotateTowards: function (e, t) {
                var n = this.angleTo(e);
                if (0 === n) return this;
                var r = Math.min(1, t / n);
                return this.slerp(e, r), this
            }, inverse: function () {
                return this.conjugate()
            }, conjugate: function () {
                return this._x *= -1, this._y *= -1, this._z *= -1, this._onChangeCallback(), this
            }, dot: function (e) {
                return this._x * e._x + this._y * e._y + this._z * e._z + this._w * e._w
            }, lengthSq: function () {
                return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w
            }, length: function () {
                return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w)
            }, normalize: function () {
                var e = this.length();
                return 0 === e ? (this._x = 0, this._y = 0, this._z = 0, this._w = 1) : (e = 1 / e, this._x = this._x * e, this._y = this._y * e, this._z = this._z * e, this._w = this._w * e), this._onChangeCallback(), this
            }, multiply: function (e, t) {
                return void 0 !== t ? (console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."), this.multiplyQuaternions(e, t)) : this.multiplyQuaternions(this, e)
            }, premultiply: function (e) {
                return this.multiplyQuaternions(e, this)
            }, multiplyQuaternions: function (e, t) {
                var n = e._x, r = e._y, i = e._z, a = e._w, o = t._x, s = t._y, c = t._z, l = t._w;
                return this._x = n * l + a * o + r * c - i * s, this._y = r * l + a * s + i * o - n * c, this._z = i * l + a * c + n * s - r * o, this._w = a * l - n * o - r * s - i * c, this._onChangeCallback(), this
            }, slerp: function (e, t) {
                if (0 === t) return this;
                if (1 === t) return this.copy(e);
                var n = this._x, r = this._y, i = this._z, a = this._w, o = a * e._w + n * e._x + r * e._y + i * e._z;
                if (o < 0 ? (this._w = -e._w, this._x = -e._x, this._y = -e._y, this._z = -e._z, o = -o) : this.copy(e), o >= 1) return this._w = a, this._x = n, this._y = r, this._z = i, this;
                var s = 1 - o * o;
                if (s <= Number.EPSILON) {
                    var c = 1 - t;
                    return this._w = c * a + t * this._w, this._x = c * n + t * this._x, this._y = c * r + t * this._y, this._z = c * i + t * this._z, this.normalize(), this._onChangeCallback(), this
                }
                var l = Math.sqrt(s), u = Math.atan2(l, o), h = Math.sin((1 - t) * u) / l, p = Math.sin(t * u) / l;
                return this._w = a * h + this._w * p, this._x = n * h + this._x * p, this._y = r * h + this._y * p, this._z = i * h + this._z * p, this._onChangeCallback(), this
            }, equals: function (e) {
                return e._x === this._x && e._y === this._y && e._z === this._z && e._w === this._w
            }, fromArray: function (e, t) {
                return void 0 === t && (t = 0), this._x = e[t], this._y = e[t + 1], this._z = e[t + 2], this._w = e[t + 3], this._onChangeCallback(), this
            }, toArray: function (e, t) {
                return void 0 === e && (e = []), void 0 === t && (t = 0), e[t] = this._x, e[t + 1] = this._y, e[t + 2] = this._z, e[t + 3] = this._w, e
            }, fromBufferAttribute: function (e, t) {
                return this._x = e.getX(t), this._y = e.getY(t), this._z = e.getZ(t), this._w = e.getW(t), this
            }, _onChange: function (e) {
                return this._onChangeCallback = e, this
            }, _onChangeCallback: function () {
            }
        });
        var k = new V, j = new G;

        function V(e, t, n) {
            this.x = e || 0, this.y = t || 0, this.z = n || 0
        }

        Object.assign(V.prototype, {
            isVector3: !0, set: function (e, t, n) {
                return this.x = e, this.y = t, this.z = n, this
            }, setScalar: function (e) {
                return this.x = e, this.y = e, this.z = e, this
            }, setX: function (e) {
                return this.x = e, this
            }, setY: function (e) {
                return this.y = e, this
            }, setZ: function (e) {
                return this.z = e, this
            }, setComponent: function (e, t) {
                switch (e) {
                    case 0:
                        this.x = t;
                        break;
                    case 1:
                        this.y = t;
                        break;
                    case 2:
                        this.z = t;
                        break;
                    default:
                        throw new Error("index is out of range: " + e)
                }
                return this
            }, getComponent: function (e) {
                switch (e) {
                    case 0:
                        return this.x;
                    case 1:
                        return this.y;
                    case 2:
                        return this.z;
                    default:
                        throw new Error("index is out of range: " + e)
                }
            }, clone: function () {
                return new this.constructor(this.x, this.y, this.z)
            }, copy: function (e) {
                return this.x = e.x, this.y = e.y, this.z = e.z, this
            }, add: function (e, t) {
                return void 0 !== t ? (console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(e, t)) : (this.x += e.x, this.y += e.y, this.z += e.z, this)
            }, addScalar: function (e) {
                return this.x += e, this.y += e, this.z += e, this
            }, addVectors: function (e, t) {
                return this.x = e.x + t.x, this.y = e.y + t.y, this.z = e.z + t.z, this
            }, addScaledVector: function (e, t) {
                return this.x += e.x * t, this.y += e.y * t, this.z += e.z * t, this
            }, sub: function (e, t) {
                return void 0 !== t ? (console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(e, t)) : (this.x -= e.x, this.y -= e.y, this.z -= e.z, this)
            }, subScalar: function (e) {
                return this.x -= e, this.y -= e, this.z -= e, this
            }, subVectors: function (e, t) {
                return this.x = e.x - t.x, this.y = e.y - t.y, this.z = e.z - t.z, this
            }, multiply: function (e, t) {
                return void 0 !== t ? (console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."), this.multiplyVectors(e, t)) : (this.x *= e.x, this.y *= e.y, this.z *= e.z, this)
            }, multiplyScalar: function (e) {
                return this.x *= e, this.y *= e, this.z *= e, this
            }, multiplyVectors: function (e, t) {
                return this.x = e.x * t.x, this.y = e.y * t.y, this.z = e.z * t.z, this
            }, applyEuler: function (e) {
                return e && e.isEuler || console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."), this.applyQuaternion(j.setFromEuler(e))
            }, applyAxisAngle: function (e, t) {
                return this.applyQuaternion(j.setFromAxisAngle(e, t))
            }, applyMatrix3: function (e) {
                var t = this.x, n = this.y, r = this.z, i = e.elements;
                return this.x = i[0] * t + i[3] * n + i[6] * r, this.y = i[1] * t + i[4] * n + i[7] * r, this.z = i[2] * t + i[5] * n + i[8] * r, this
            }, applyNormalMatrix: function (e) {
                return this.applyMatrix3(e).normalize()
            }, applyMatrix4: function (e) {
                var t = this.x, n = this.y, r = this.z, i = e.elements,
                    a = 1 / (i[3] * t + i[7] * n + i[11] * r + i[15]);
                return this.x = (i[0] * t + i[4] * n + i[8] * r + i[12]) * a, this.y = (i[1] * t + i[5] * n + i[9] * r + i[13]) * a, this.z = (i[2] * t + i[6] * n + i[10] * r + i[14]) * a, this
            }, applyQuaternion: function (e) {
                var t = this.x, n = this.y, r = this.z, i = e.x, a = e.y, o = e.z, s = e.w, c = s * t + a * r - o * n,
                    l = s * n + o * t - i * r, u = s * r + i * n - a * t, h = -i * t - a * n - o * r;
                return this.x = c * s + h * -i + l * -o - u * -a, this.y = l * s + h * -a + u * -i - c * -o, this.z = u * s + h * -o + c * -a - l * -i, this
            }, project: function (e) {
                return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)
            }, unproject: function (e) {
                return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)
            }, transformDirection: function (e) {
                var t = this.x, n = this.y, r = this.z, i = e.elements;
                return this.x = i[0] * t + i[4] * n + i[8] * r, this.y = i[1] * t + i[5] * n + i[9] * r, this.z = i[2] * t + i[6] * n + i[10] * r, this.normalize()
            }, divide: function (e) {
                return this.x /= e.x, this.y /= e.y, this.z /= e.z, this
            }, divideScalar: function (e) {
                return this.multiplyScalar(1 / e)
            }, min: function (e) {
                return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this.z = Math.min(this.z, e.z), this
            }, max: function (e) {
                return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this.z = Math.max(this.z, e.z), this
            }, clamp: function (e, t) {
                return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this.z = Math.max(e.z, Math.min(t.z, this.z)), this
            }, clampScalar: function (e, t) {
                return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this.z = Math.max(e, Math.min(t, this.z)), this
            }, clampLength: function (e, t) {
                var n = this.length();
                return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)))
            }, floor: function () {
                return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this
            }, ceil: function () {
                return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this
            }, round: function () {
                return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this
            }, roundToZero: function () {
                return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z), this
            }, negate: function () {
                return this.x = -this.x, this.y = -this.y, this.z = -this.z, this
            }, dot: function (e) {
                return this.x * e.x + this.y * e.y + this.z * e.z
            }, lengthSq: function () {
                return this.x * this.x + this.y * this.y + this.z * this.z
            }, length: function () {
                return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)
            }, manhattanLength: function () {
                return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z)
            }, normalize: function () {
                return this.divideScalar(this.length() || 1)
            }, setLength: function (e) {
                return this.normalize().multiplyScalar(e)
            }, lerp: function (e, t) {
                return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this.z += (e.z - this.z) * t, this
            }, lerpVectors: function (e, t, n) {
                return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this.z = e.z + (t.z - e.z) * n, this
            }, cross: function (e, t) {
                return void 0 !== t ? (console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."), this.crossVectors(e, t)) : this.crossVectors(this, e)
            }, crossVectors: function (e, t) {
                var n = e.x, r = e.y, i = e.z, a = t.x, o = t.y, s = t.z;
                return this.x = r * s - i * o, this.y = i * a - n * s, this.z = n * o - r * a, this
            }, projectOnVector: function (e) {
                var t = e.lengthSq();
                if (0 === t) return this.set(0, 0, 0);
                var n = e.dot(this) / t;
                return this.copy(e).multiplyScalar(n)
            }, projectOnPlane: function (e) {
                return k.copy(this).projectOnVector(e), this.sub(k)
            }, reflect: function (e) {
                return this.sub(k.copy(e).multiplyScalar(2 * this.dot(e)))
            }, angleTo: function (e) {
                var t = Math.sqrt(this.lengthSq() * e.lengthSq());
                if (0 === t) return Math.PI / 2;
                var n = this.dot(e) / t;
                return Math.acos(O.clamp(n, -1, 1))
            }, distanceTo: function (e) {
                return Math.sqrt(this.distanceToSquared(e))
            }, distanceToSquared: function (e) {
                var t = this.x - e.x, n = this.y - e.y, r = this.z - e.z;
                return t * t + n * n + r * r
            }, manhattanDistanceTo: function (e) {
                return Math.abs(this.x - e.x) + Math.abs(this.y - e.y) + Math.abs(this.z - e.z)
            }, setFromSpherical: function (e) {
                return this.setFromSphericalCoords(e.radius, e.phi, e.theta)
            }, setFromSphericalCoords: function (e, t, n) {
                var r = Math.sin(t) * e;
                return this.x = r * Math.sin(n), this.y = Math.cos(t) * e, this.z = r * Math.cos(n), this
            }, setFromCylindrical: function (e) {
                return this.setFromCylindricalCoords(e.radius, e.theta, e.y)
            }, setFromCylindricalCoords: function (e, t, n) {
                return this.x = e * Math.sin(t), this.y = n, this.z = e * Math.cos(t), this
            }, setFromMatrixPosition: function (e) {
                var t = e.elements;
                return this.x = t[12], this.y = t[13], this.z = t[14], this
            }, setFromMatrixScale: function (e) {
                var t = this.setFromMatrixColumn(e, 0).length(), n = this.setFromMatrixColumn(e, 1).length(),
                    r = this.setFromMatrixColumn(e, 2).length();
                return this.x = t, this.y = n, this.z = r, this
            }, setFromMatrixColumn: function (e, t) {
                return this.fromArray(e.elements, 4 * t)
            }, setFromMatrix3Column: function (e, t) {
                return this.fromArray(e.elements, 3 * t)
            }, equals: function (e) {
                return e.x === this.x && e.y === this.y && e.z === this.z
            }, fromArray: function (e, t) {
                return void 0 === t && (t = 0), this.x = e[t], this.y = e[t + 1], this.z = e[t + 2], this
            }, toArray: function (e, t) {
                return void 0 === e && (e = []), void 0 === t && (t = 0), e[t] = this.x, e[t + 1] = this.y, e[t + 2] = this.z, e
            }, fromBufferAttribute: function (e, t, n) {
                return void 0 !== n && console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."), this.x = e.getX(t), this.y = e.getY(t), this.z = e.getZ(t), this
            }, random: function () {
                return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this
            }
        });
        var W = new V, q = new Q, X = new V(0, 0, 0), Y = new V(1, 1, 1), J = new V, Z = new V, K = new V;

        function Q() {
            this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], arguments.length > 0 && console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")
        }

        Object.assign(Q.prototype, {
            isMatrix4: !0, set: function (e, t, n, r, i, a, o, s, c, l, u, h, p, d, f, m) {
                var v = this.elements;
                return v[0] = e, v[4] = t, v[8] = n, v[12] = r, v[1] = i, v[5] = a, v[9] = o, v[13] = s, v[2] = c, v[6] = l, v[10] = u, v[14] = h, v[3] = p, v[7] = d, v[11] = f, v[15] = m, this
            }, identity: function () {
                return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this
            }, clone: function () {
                return (new Q).fromArray(this.elements)
            }, copy: function (e) {
                var t = this.elements, n = e.elements;
                return t[0] = n[0], t[1] = n[1], t[2] = n[2], t[3] = n[3], t[4] = n[4], t[5] = n[5], t[6] = n[6], t[7] = n[7], t[8] = n[8], t[9] = n[9], t[10] = n[10], t[11] = n[11], t[12] = n[12], t[13] = n[13], t[14] = n[14], t[15] = n[15], this
            }, copyPosition: function (e) {
                var t = this.elements, n = e.elements;
                return t[12] = n[12], t[13] = n[13], t[14] = n[14], this
            }, extractBasis: function (e, t, n) {
                return e.setFromMatrixColumn(this, 0), t.setFromMatrixColumn(this, 1), n.setFromMatrixColumn(this, 2), this
            }, makeBasis: function (e, t, n) {
                return this.set(e.x, t.x, n.x, 0, e.y, t.y, n.y, 0, e.z, t.z, n.z, 0, 0, 0, 0, 1), this
            }, extractRotation: function (e) {
                var t = this.elements, n = e.elements, r = 1 / W.setFromMatrixColumn(e, 0).length(),
                    i = 1 / W.setFromMatrixColumn(e, 1).length(), a = 1 / W.setFromMatrixColumn(e, 2).length();
                return t[0] = n[0] * r, t[1] = n[1] * r, t[2] = n[2] * r, t[3] = 0, t[4] = n[4] * i, t[5] = n[5] * i, t[6] = n[6] * i, t[7] = 0, t[8] = n[8] * a, t[9] = n[9] * a, t[10] = n[10] * a, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1, this
            }, makeRotationFromEuler: function (e) {
                e && e.isEuler || console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
                var t = this.elements, n = e.x, r = e.y, i = e.z, a = Math.cos(n), o = Math.sin(n), s = Math.cos(r),
                    c = Math.sin(r), l = Math.cos(i), u = Math.sin(i);
                if ("XYZ" === e.order) {
                    var h = a * l, p = a * u, d = o * l, f = o * u;
                    t[0] = s * l, t[4] = -s * u, t[8] = c, t[1] = p + d * c, t[5] = h - f * c, t[9] = -o * s, t[2] = f - h * c, t[6] = d + p * c, t[10] = a * s
                } else if ("YXZ" === e.order) {
                    var m = s * l, v = s * u, g = c * l, y = c * u;
                    t[0] = m + y * o, t[4] = g * o - v, t[8] = a * c, t[1] = a * u, t[5] = a * l, t[9] = -o, t[2] = v * o - g, t[6] = y + m * o, t[10] = a * s
                } else if ("ZXY" === e.order) {
                    m = s * l, v = s * u, g = c * l, y = c * u;
                    t[0] = m - y * o, t[4] = -a * u, t[8] = g + v * o, t[1] = v + g * o, t[5] = a * l, t[9] = y - m * o, t[2] = -a * c, t[6] = o, t[10] = a * s
                } else if ("ZYX" === e.order) {
                    h = a * l, p = a * u, d = o * l, f = o * u;
                    t[0] = s * l, t[4] = d * c - p, t[8] = h * c + f, t[1] = s * u, t[5] = f * c + h, t[9] = p * c - d, t[2] = -c, t[6] = o * s, t[10] = a * s
                } else if ("YZX" === e.order) {
                    var x = a * s, b = a * c, _ = o * s, w = o * c;
                    t[0] = s * l, t[4] = w - x * u, t[8] = _ * u + b, t[1] = u, t[5] = a * l, t[9] = -o * l, t[2] = -c * l, t[6] = b * u + _, t[10] = x - w * u
                } else if ("XZY" === e.order) {
                    x = a * s, b = a * c, _ = o * s, w = o * c;
                    t[0] = s * l, t[4] = -u, t[8] = c * l, t[1] = x * u + w, t[5] = a * l, t[9] = b * u - _, t[2] = _ * u - b, t[6] = o * l, t[10] = w * u + x
                }
                return t[3] = 0, t[7] = 0, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1, this
            }, makeRotationFromQuaternion: function (e) {
                return this.compose(X, e, Y)
            }, lookAt: function (e, t, n) {
                var r = this.elements;
                return K.subVectors(e, t), 0 === K.lengthSq() && (K.z = 1), K.normalize(), J.crossVectors(n, K), 0 === J.lengthSq() && (1 === Math.abs(n.z) ? K.x += 1e-4 : K.z += 1e-4, K.normalize(), J.crossVectors(n, K)), J.normalize(), Z.crossVectors(K, J), r[0] = J.x, r[4] = Z.x, r[8] = K.x, r[1] = J.y, r[5] = Z.y, r[9] = K.y, r[2] = J.z, r[6] = Z.z, r[10] = K.z, this
            }, multiply: function (e, t) {
                return void 0 !== t ? (console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."), this.multiplyMatrices(e, t)) : this.multiplyMatrices(this, e)
            }, premultiply: function (e) {
                return this.multiplyMatrices(e, this)
            }, multiplyMatrices: function (e, t) {
                var n = e.elements, r = t.elements, i = this.elements, a = n[0], o = n[4], s = n[8], c = n[12],
                    l = n[1], u = n[5], h = n[9], p = n[13], d = n[2], f = n[6], m = n[10], v = n[14], g = n[3],
                    y = n[7], x = n[11], b = n[15], _ = r[0], w = r[4], M = r[8], S = r[12], T = r[1], E = r[5],
                    A = r[9], L = r[13], R = r[2], P = r[6], C = r[10], O = r[14], I = r[3], N = r[7], D = r[11],
                    U = r[15];
                return i[0] = a * _ + o * T + s * R + c * I, i[4] = a * w + o * E + s * P + c * N, i[8] = a * M + o * A + s * C + c * D, i[12] = a * S + o * L + s * O + c * U, i[1] = l * _ + u * T + h * R + p * I, i[5] = l * w + u * E + h * P + p * N, i[9] = l * M + u * A + h * C + p * D, i[13] = l * S + u * L + h * O + p * U, i[2] = d * _ + f * T + m * R + v * I, i[6] = d * w + f * E + m * P + v * N, i[10] = d * M + f * A + m * C + v * D, i[14] = d * S + f * L + m * O + v * U, i[3] = g * _ + y * T + x * R + b * I, i[7] = g * w + y * E + x * P + b * N, i[11] = g * M + y * A + x * C + b * D, i[15] = g * S + y * L + x * O + b * U, this
            }, multiplyScalar: function (e) {
                var t = this.elements;
                return t[0] *= e, t[4] *= e, t[8] *= e, t[12] *= e, t[1] *= e, t[5] *= e, t[9] *= e, t[13] *= e, t[2] *= e, t[6] *= e, t[10] *= e, t[14] *= e, t[3] *= e, t[7] *= e, t[11] *= e, t[15] *= e, this
            }, determinant: function () {
                var e = this.elements, t = e[0], n = e[4], r = e[8], i = e[12], a = e[1], o = e[5], s = e[9], c = e[13],
                    l = e[2], u = e[6], h = e[10], p = e[14];
                return e[3] * (+i * s * u - r * c * u - i * o * h + n * c * h + r * o * p - n * s * p) + e[7] * (+t * s * p - t * c * h + i * a * h - r * a * p + r * c * l - i * s * l) + e[11] * (+t * c * u - t * o * p - i * a * u + n * a * p + i * o * l - n * c * l) + e[15] * (-r * o * l - t * s * u + t * o * h + r * a * u - n * a * h + n * s * l)
            }, transpose: function () {
                var e, t = this.elements;
                return e = t[1], t[1] = t[4], t[4] = e, e = t[2], t[2] = t[8], t[8] = e, e = t[6], t[6] = t[9], t[9] = e, e = t[3], t[3] = t[12], t[12] = e, e = t[7], t[7] = t[13], t[13] = e, e = t[11], t[11] = t[14], t[14] = e, this
            }, setPosition: function (e, t, n) {
                var r = this.elements;
                return e.isVector3 ? (r[12] = e.x, r[13] = e.y, r[14] = e.z) : (r[12] = e, r[13] = t, r[14] = n), this
            }, getInverse: function (e, t) {
                void 0 !== t && console.warn("THREE.Matrix4: .getInverse() can no longer be configured to throw on degenerate.");
                var n = this.elements, r = e.elements, i = r[0], a = r[1], o = r[2], s = r[3], c = r[4], l = r[5],
                    u = r[6], h = r[7], p = r[8], d = r[9], f = r[10], m = r[11], v = r[12], g = r[13], y = r[14],
                    x = r[15], b = d * y * h - g * f * h + g * u * m - l * y * m - d * u * x + l * f * x,
                    _ = v * f * h - p * y * h - v * u * m + c * y * m + p * u * x - c * f * x,
                    w = p * g * h - v * d * h + v * l * m - c * g * m - p * l * x + c * d * x,
                    M = v * d * u - p * g * u - v * l * f + c * g * f + p * l * y - c * d * y,
                    S = i * b + a * _ + o * w + s * M;
                if (0 === S) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                var T = 1 / S;
                return n[0] = b * T, n[1] = (g * f * s - d * y * s - g * o * m + a * y * m + d * o * x - a * f * x) * T, n[2] = (l * y * s - g * u * s + g * o * h - a * y * h - l * o * x + a * u * x) * T, n[3] = (d * u * s - l * f * s - d * o * h + a * f * h + l * o * m - a * u * m) * T, n[4] = _ * T, n[5] = (p * y * s - v * f * s + v * o * m - i * y * m - p * o * x + i * f * x) * T, n[6] = (v * u * s - c * y * s - v * o * h + i * y * h + c * o * x - i * u * x) * T, n[7] = (c * f * s - p * u * s + p * o * h - i * f * h - c * o * m + i * u * m) * T, n[8] = w * T, n[9] = (v * d * s - p * g * s - v * a * m + i * g * m + p * a * x - i * d * x) * T, n[10] = (c * g * s - v * l * s + v * a * h - i * g * h - c * a * x + i * l * x) * T, n[11] = (p * l * s - c * d * s - p * a * h + i * d * h + c * a * m - i * l * m) * T, n[12] = M * T, n[13] = (p * g * o - v * d * o + v * a * f - i * g * f - p * a * y + i * d * y) * T, n[14] = (v * l * o - c * g * o - v * a * u + i * g * u + c * a * y - i * l * y) * T, n[15] = (c * d * o - p * l * o + p * a * u - i * d * u - c * a * f + i * l * f) * T, this
            }, scale: function (e) {
                var t = this.elements, n = e.x, r = e.y, i = e.z;
                return t[0] *= n, t[4] *= r, t[8] *= i, t[1] *= n, t[5] *= r, t[9] *= i, t[2] *= n, t[6] *= r, t[10] *= i, t[3] *= n, t[7] *= r, t[11] *= i, this
            }, getMaxScaleOnAxis: function () {
                var e = this.elements, t = e[0] * e[0] + e[1] * e[1] + e[2] * e[2],
                    n = e[4] * e[4] + e[5] * e[5] + e[6] * e[6], r = e[8] * e[8] + e[9] * e[9] + e[10] * e[10];
                return Math.sqrt(Math.max(t, n, r))
            }, makeTranslation: function (e, t, n) {
                return this.set(1, 0, 0, e, 0, 1, 0, t, 0, 0, 1, n, 0, 0, 0, 1), this
            }, makeRotationX: function (e) {
                var t = Math.cos(e), n = Math.sin(e);
                return this.set(1, 0, 0, 0, 0, t, -n, 0, 0, n, t, 0, 0, 0, 0, 1), this
            }, makeRotationY: function (e) {
                var t = Math.cos(e), n = Math.sin(e);
                return this.set(t, 0, n, 0, 0, 1, 0, 0, -n, 0, t, 0, 0, 0, 0, 1), this
            }, makeRotationZ: function (e) {
                var t = Math.cos(e), n = Math.sin(e);
                return this.set(t, -n, 0, 0, n, t, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this
            }, makeRotationAxis: function (e, t) {
                var n = Math.cos(t), r = Math.sin(t), i = 1 - n, a = e.x, o = e.y, s = e.z, c = i * a, l = i * o;
                return this.set(c * a + n, c * o - r * s, c * s + r * o, 0, c * o + r * s, l * o + n, l * s - r * a, 0, c * s - r * o, l * s + r * a, i * s * s + n, 0, 0, 0, 0, 1), this
            }, makeScale: function (e, t, n) {
                return this.set(e, 0, 0, 0, 0, t, 0, 0, 0, 0, n, 0, 0, 0, 0, 1), this
            }, makeShear: function (e, t, n) {
                return this.set(1, t, n, 0, e, 1, n, 0, e, t, 1, 0, 0, 0, 0, 1), this
            }, compose: function (e, t, n) {
                var r = this.elements, i = t._x, a = t._y, o = t._z, s = t._w, c = i + i, l = a + a, u = o + o,
                    h = i * c, p = i * l, d = i * u, f = a * l, m = a * u, v = o * u, g = s * c, y = s * l, x = s * u,
                    b = n.x, _ = n.y, w = n.z;
                return r[0] = (1 - (f + v)) * b, r[1] = (p + x) * b, r[2] = (d - y) * b, r[3] = 0, r[4] = (p - x) * _, r[5] = (1 - (h + v)) * _, r[6] = (m + g) * _, r[7] = 0, r[8] = (d + y) * w, r[9] = (m - g) * w, r[10] = (1 - (h + f)) * w, r[11] = 0, r[12] = e.x, r[13] = e.y, r[14] = e.z, r[15] = 1, this
            }, decompose: function (e, t, n) {
                var r = this.elements, i = W.set(r[0], r[1], r[2]).length(), a = W.set(r[4], r[5], r[6]).length(),
                    o = W.set(r[8], r[9], r[10]).length();
                this.determinant() < 0 && (i = -i), e.x = r[12], e.y = r[13], e.z = r[14], q.copy(this);
                var s = 1 / i, c = 1 / a, l = 1 / o;
                return q.elements[0] *= s, q.elements[1] *= s, q.elements[2] *= s, q.elements[4] *= c, q.elements[5] *= c, q.elements[6] *= c, q.elements[8] *= l, q.elements[9] *= l, q.elements[10] *= l, t.setFromRotationMatrix(q), n.x = i, n.y = a, n.z = o, this
            }, makePerspective: function (e, t, n, r, i, a) {
                void 0 === a && console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");
                var o = this.elements, s = 2 * i / (t - e), c = 2 * i / (n - r), l = (t + e) / (t - e),
                    u = (n + r) / (n - r), h = -(a + i) / (a - i), p = -2 * a * i / (a - i);
                return o[0] = s, o[4] = 0, o[8] = l, o[12] = 0, o[1] = 0, o[5] = c, o[9] = u, o[13] = 0, o[2] = 0, o[6] = 0, o[10] = h, o[14] = p, o[3] = 0, o[7] = 0, o[11] = -1, o[15] = 0, this
            }, makeOrthographic: function (e, t, n, r, i, a) {
                var o = this.elements, s = 1 / (t - e), c = 1 / (n - r), l = 1 / (a - i), u = (t + e) * s,
                    h = (n + r) * c, p = (a + i) * l;
                return o[0] = 2 * s, o[4] = 0, o[8] = 0, o[12] = -u, o[1] = 0, o[5] = 2 * c, o[9] = 0, o[13] = -h, o[2] = 0, o[6] = 0, o[10] = -2 * l, o[14] = -p, o[3] = 0, o[7] = 0, o[11] = 0, o[15] = 1, this
            }, equals: function (e) {
                for (var t = this.elements, n = e.elements, r = 0; r < 16; r++) if (t[r] !== n[r]) return !1;
                return !0
            }, fromArray: function (e, t) {
                void 0 === t && (t = 0);
                for (var n = 0; n < 16; n++) this.elements[n] = e[n + t];
                return this
            }, toArray: function (e, t) {
                void 0 === e && (e = []), void 0 === t && (t = 0);
                var n = this.elements;
                return e[t] = n[0], e[t + 1] = n[1], e[t + 2] = n[2], e[t + 3] = n[3], e[t + 4] = n[4], e[t + 5] = n[5], e[t + 6] = n[6], e[t + 7] = n[7], e[t + 8] = n[8], e[t + 9] = n[9], e[t + 10] = n[10], e[t + 11] = n[11], e[t + 12] = n[12], e[t + 13] = n[13], e[t + 14] = n[14], e[t + 15] = n[15], e
            }
        });
        var $ = new Q, ee = new G;

        function te(e, t, n, r) {
            this._x = e || 0, this._y = t || 0, this._z = n || 0, this._order = r || te.DefaultOrder
        }

        function ne() {
            this.mask = 1
        }

        te.RotationOrders = ["XYZ", "YZX", "ZXY", "XZY", "YXZ", "ZYX"], te.DefaultOrder = "XYZ", Object.defineProperties(te.prototype, {
            x: {
                get: function () {
                    return this._x
                }, set: function (e) {
                    this._x = e, this._onChangeCallback()
                }
            }, y: {
                get: function () {
                    return this._y
                }, set: function (e) {
                    this._y = e, this._onChangeCallback()
                }
            }, z: {
                get: function () {
                    return this._z
                }, set: function (e) {
                    this._z = e, this._onChangeCallback()
                }
            }, order: {
                get: function () {
                    return this._order
                }, set: function (e) {
                    this._order = e, this._onChangeCallback()
                }
            }
        }), Object.assign(te.prototype, {
            isEuler: !0, set: function (e, t, n, r) {
                return this._x = e, this._y = t, this._z = n, this._order = r || this._order, this._onChangeCallback(), this
            }, clone: function () {
                return new this.constructor(this._x, this._y, this._z, this._order)
            }, copy: function (e) {
                return this._x = e._x, this._y = e._y, this._z = e._z, this._order = e._order, this._onChangeCallback(), this
            }, setFromRotationMatrix: function (e, t, n) {
                var r = O.clamp, i = e.elements, a = i[0], o = i[4], s = i[8], c = i[1], l = i[5], u = i[9], h = i[2],
                    p = i[6], d = i[10];
                switch (t = t || this._order) {
                    case"XYZ":
                        this._y = Math.asin(r(s, -1, 1)), Math.abs(s) < .9999999 ? (this._x = Math.atan2(-u, d), this._z = Math.atan2(-o, a)) : (this._x = Math.atan2(p, l), this._z = 0);
                        break;
                    case"YXZ":
                        this._x = Math.asin(-r(u, -1, 1)), Math.abs(u) < .9999999 ? (this._y = Math.atan2(s, d), this._z = Math.atan2(c, l)) : (this._y = Math.atan2(-h, a), this._z = 0);
                        break;
                    case"ZXY":
                        this._x = Math.asin(r(p, -1, 1)), Math.abs(p) < .9999999 ? (this._y = Math.atan2(-h, d), this._z = Math.atan2(-o, l)) : (this._y = 0, this._z = Math.atan2(c, a));
                        break;
                    case"ZYX":
                        this._y = Math.asin(-r(h, -1, 1)), Math.abs(h) < .9999999 ? (this._x = Math.atan2(p, d), this._z = Math.atan2(c, a)) : (this._x = 0, this._z = Math.atan2(-o, l));
                        break;
                    case"YZX":
                        this._z = Math.asin(r(c, -1, 1)), Math.abs(c) < .9999999 ? (this._x = Math.atan2(-u, l), this._y = Math.atan2(-h, a)) : (this._x = 0, this._y = Math.atan2(s, d));
                        break;
                    case"XZY":
                        this._z = Math.asin(-r(o, -1, 1)), Math.abs(o) < .9999999 ? (this._x = Math.atan2(p, l), this._y = Math.atan2(s, a)) : (this._x = Math.atan2(-u, d), this._y = 0);
                        break;
                    default:
                        console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + t)
                }
                return this._order = t, !1 !== n && this._onChangeCallback(), this
            }, setFromQuaternion: function (e, t, n) {
                return $.makeRotationFromQuaternion(e), this.setFromRotationMatrix($, t, n)
            }, setFromVector3: function (e, t) {
                return this.set(e.x, e.y, e.z, t || this._order)
            }, reorder: function (e) {
                return ee.setFromEuler(this), this.setFromQuaternion(ee, e)
            }, equals: function (e) {
                return e._x === this._x && e._y === this._y && e._z === this._z && e._order === this._order
            }, fromArray: function (e) {
                return this._x = e[0], this._y = e[1], this._z = e[2], void 0 !== e[3] && (this._order = e[3]), this._onChangeCallback(), this
            }, toArray: function (e, t) {
                return void 0 === e && (e = []), void 0 === t && (t = 0), e[t] = this._x, e[t + 1] = this._y, e[t + 2] = this._z, e[t + 3] = this._order, e
            }, toVector3: function (e) {
                return e ? e.set(this._x, this._y, this._z) : new V(this._x, this._y, this._z)
            }, _onChange: function (e) {
                return this._onChangeCallback = e, this
            }, _onChangeCallback: function () {
            }
        }), Object.assign(ne.prototype, {
            set: function (e) {
                this.mask = 1 << e | 0
            }, enable: function (e) {
                this.mask |= 1 << e | 0
            }, enableAll: function () {
                this.mask = -1
            }, toggle: function (e) {
                this.mask ^= 1 << e | 0
            }, disable: function (e) {
                this.mask &= ~(1 << e | 0)
            }, disableAll: function () {
                this.mask = 0
            }, test: function (e) {
                return 0 != (this.mask & e.mask)
            }
        });
        let re = 0;
        const ie = new V, ae = new G, oe = new Q, se = new V, ce = new V, le = new V, ue = new G, he = new V(1, 0, 0),
            pe = new V(0, 1, 0), de = new V(0, 0, 1), fe = {type: "added"}, me = {type: "removed"};

        function ve() {
            Object.defineProperty(this, "id", {value: re++}), this.uuid = O.generateUUID(), this.name = "", this.type = "Object3D", this.parent = null, this.children = [], this.up = ve.DefaultUp.clone();
            var e = new V, t = new te, n = new G, r = new V(1, 1, 1);
            t._onChange((function () {
                n.setFromEuler(t, !1)
            })), n._onChange((function () {
                t.setFromQuaternion(n, void 0, !1)
            })), Object.defineProperties(this, {
                position: {configurable: !0, enumerable: !0, value: e},
                rotation: {configurable: !0, enumerable: !0, value: t},
                quaternion: {configurable: !0, enumerable: !0, value: n},
                scale: {configurable: !0, enumerable: !0, value: r},
                modelViewMatrix: {value: new Q},
                normalMatrix: {value: new N}
            }), this.matrix = new Q, this.matrixWorld = new Q, this.matrixAutoUpdate = ve.DefaultMatrixAutoUpdate, this.matrixWorldNeedsUpdate = !1, this.layers = new ne, this.visible = !0, this.castShadow = !1, this.receiveShadow = !1, this.frustumCulled = !0, this.renderOrder = 0, this.userData = {}
        }

        function ge() {
            ve.call(this), this.type = "Scene", this.background = null, this.environment = null, this.fog = null, this.overrideMaterial = null, this.autoUpdate = !0, "undefined" != typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {detail: this}))
        }

        ve.DefaultUp = new V(0, 1, 0), ve.DefaultMatrixAutoUpdate = !0, ve.prototype = Object.assign(Object.create(L.prototype), {
            constructor: ve, isObject3D: !0, onBeforeRender: function () {
            }, onAfterRender: function () {
            }, applyMatrix4: function (e) {
                this.matrixAutoUpdate && this.updateMatrix(), this.matrix.premultiply(e), this.matrix.decompose(this.position, this.quaternion, this.scale)
            }, applyQuaternion: function (e) {
                return this.quaternion.premultiply(e), this
            }, setRotationFromAxisAngle: function (e, t) {
                this.quaternion.setFromAxisAngle(e, t)
            }, setRotationFromEuler: function (e) {
                this.quaternion.setFromEuler(e, !0)
            }, setRotationFromMatrix: function (e) {
                this.quaternion.setFromRotationMatrix(e)
            }, setRotationFromQuaternion: function (e) {
                this.quaternion.copy(e)
            }, rotateOnAxis: function (e, t) {
                return ae.setFromAxisAngle(e, t), this.quaternion.multiply(ae), this
            }, rotateOnWorldAxis: function (e, t) {
                return ae.setFromAxisAngle(e, t), this.quaternion.premultiply(ae), this
            }, rotateX: function (e) {
                return this.rotateOnAxis(he, e)
            }, rotateY: function (e) {
                return this.rotateOnAxis(pe, e)
            }, rotateZ: function (e) {
                return this.rotateOnAxis(de, e)
            }, translateOnAxis: function (e, t) {
                return ie.copy(e).applyQuaternion(this.quaternion), this.position.add(ie.multiplyScalar(t)), this
            }, translateX: function (e) {
                return this.translateOnAxis(he, e)
            }, translateY: function (e) {
                return this.translateOnAxis(pe, e)
            }, translateZ: function (e) {
                return this.translateOnAxis(de, e)
            }, localToWorld: function (e) {
                return e.applyMatrix4(this.matrixWorld)
            }, worldToLocal: function (e) {
                return e.applyMatrix4(oe.getInverse(this.matrixWorld))
            }, lookAt: function (e, t, n) {
                e.isVector3 ? se.copy(e) : se.set(e, t, n);
                var r = this.parent;
                this.updateWorldMatrix(!0, !1), ce.setFromMatrixPosition(this.matrixWorld), this.isCamera || this.isLight ? oe.lookAt(ce, se, this.up) : oe.lookAt(se, ce, this.up), this.quaternion.setFromRotationMatrix(oe), r && (oe.extractRotation(r.matrixWorld), ae.setFromRotationMatrix(oe), this.quaternion.premultiply(ae.inverse()))
            }, add: function (e) {
                if (arguments.length > 1) {
                    for (var t = 0; t < arguments.length; t++) this.add(arguments[t]);
                    return this
                }
                return e === this ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", e), this) : (e && e.isObject3D ? (null !== e.parent && e.parent.remove(e), e.parent = this, this.children.push(e), e.dispatchEvent(fe)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", e), this)
            }, remove: function (e) {
                if (arguments.length > 1) {
                    for (var t = 0; t < arguments.length; t++) this.remove(arguments[t]);
                    return this
                }
                var n = this.children.indexOf(e);
                return -1 !== n && (e.parent = null, this.children.splice(n, 1), e.dispatchEvent(me)), this
            }, attach: function (e) {
                return this.updateWorldMatrix(!0, !1), oe.getInverse(this.matrixWorld), null !== e.parent && (e.parent.updateWorldMatrix(!0, !1), oe.multiply(e.parent.matrixWorld)), e.applyMatrix4(oe), e.updateWorldMatrix(!1, !1), this.add(e), this
            }, getObjectById: function (e) {
                return this.getObjectByProperty("id", e)
            }, getObjectByName: function (e) {
                return this.getObjectByProperty("name", e)
            }, getObjectByProperty: function (e, t) {
                if (this[e] === t) return this;
                for (var n = 0, r = this.children.length; n < r; n++) {
                    var i = this.children[n].getObjectByProperty(e, t);
                    if (void 0 !== i) return i
                }
            }, getWorldPosition: function (e) {
                return void 0 === e && (e = new V), this.updateMatrixWorld(!0), e.setFromMatrixPosition(this.matrixWorld)
            }, getWorldQuaternion: function (e) {
                return void 0 === e && (console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"), e = new G), this.updateMatrixWorld(!0), this.matrixWorld.decompose(ce, e, le), e
            }, getWorldScale: function (e) {
                return void 0 === e && (console.warn("THREE.Object3D: .getWorldScale() target is now required"), e = new V), this.updateMatrixWorld(!0), this.matrixWorld.decompose(ce, ue, e), e
            }, getWorldDirection: function (e) {
                void 0 === e && (console.warn("THREE.Object3D: .getWorldDirection() target is now required"), e = new V), this.updateMatrixWorld(!0);
                var t = this.matrixWorld.elements;
                return e.set(t[8], t[9], t[10]).normalize()
            }, raycast: function () {
            }, traverse: function (e) {
                e(this);
                for (var t = this.children, n = 0, r = t.length; n < r; n++) t[n].traverse(e)
            }, traverseVisible: function (e) {
                if (!1 !== this.visible) {
                    e(this);
                    for (var t = this.children, n = 0, r = t.length; n < r; n++) t[n].traverseVisible(e)
                }
            }, traverseAncestors: function (e) {
                var t = this.parent;
                null !== t && (e(t), t.traverseAncestors(e))
            }, updateMatrix: function () {
                this.matrix.compose(this.position, this.quaternion, this.scale), this.matrixWorldNeedsUpdate = !0
            }, updateMatrixWorld: function (e) {
                this.matrixAutoUpdate && this.updateMatrix(), (this.matrixWorldNeedsUpdate || e) && (null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), this.matrixWorldNeedsUpdate = !1, e = !0);
                for (var t = this.children, n = 0, r = t.length; n < r; n++) t[n].updateMatrixWorld(e)
            }, updateWorldMatrix: function (e, t) {
                var n = this.parent;
                if (!0 === e && null !== n && n.updateWorldMatrix(!0, !1), this.matrixAutoUpdate && this.updateMatrix(), null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), !0 === t) for (var r = this.children, i = 0, a = r.length; i < a; i++) r[i].updateWorldMatrix(!1, !0)
            }, toJSON: function (e) {
                var t = void 0 === e || "string" == typeof e, n = {};
                t && (e = {
                    geometries: {},
                    materials: {},
                    textures: {},
                    images: {},
                    shapes: {}
                }, n.metadata = {version: 4.5, type: "Object", generator: "Object3D.toJSON"});
                var r = {};

                function i(t, n) {
                    return void 0 === t[n.uuid] && (t[n.uuid] = n.toJSON(e)), n.uuid
                }

                if (r.uuid = this.uuid, r.type = this.type, "" !== this.name && (r.name = this.name), !0 === this.castShadow && (r.castShadow = !0), !0 === this.receiveShadow && (r.receiveShadow = !0), !1 === this.visible && (r.visible = !1), !1 === this.frustumCulled && (r.frustumCulled = !1), 0 !== this.renderOrder && (r.renderOrder = this.renderOrder), "{}" !== JSON.stringify(this.userData) && (r.userData = this.userData), r.layers = this.layers.mask, r.matrix = this.matrix.toArray(), !1 === this.matrixAutoUpdate && (r.matrixAutoUpdate = !1), this.isInstancedMesh && (r.type = "InstancedMesh", r.count = this.count, r.instanceMatrix = this.instanceMatrix.toJSON()), this.isMesh || this.isLine || this.isPoints) {
                    r.geometry = i(e.geometries, this.geometry);
                    var a = this.geometry.parameters;
                    if (void 0 !== a && void 0 !== a.shapes) {
                        var o = a.shapes;
                        if (Array.isArray(o)) for (var s = 0, c = o.length; s < c; s++) {
                            var l = o[s];
                            i(e.shapes, l)
                        } else i(e.shapes, o)
                    }
                }
                if (void 0 !== this.material) if (Array.isArray(this.material)) {
                    var u = [];
                    for (s = 0, c = this.material.length; s < c; s++) u.push(i(e.materials, this.material[s]));
                    r.material = u
                } else r.material = i(e.materials, this.material);
                if (this.children.length > 0) {
                    r.children = [];
                    for (s = 0; s < this.children.length; s++) r.children.push(this.children[s].toJSON(e).object)
                }
                if (t) {
                    var h = m(e.geometries), p = m(e.materials), d = m(e.textures), f = m(e.images);
                    o = m(e.shapes);
                    h.length > 0 && (n.geometries = h), p.length > 0 && (n.materials = p), d.length > 0 && (n.textures = d), f.length > 0 && (n.images = f), o.length > 0 && (n.shapes = o)
                }
                return n.object = r, n;

                function m(e) {
                    var t = [];
                    for (var n in e) {
                        var r = e[n];
                        delete r.metadata, t.push(r)
                    }
                    return t
                }
            }, clone: function (e) {
                return (new this.constructor).copy(this, e)
            }, copy: function (e, t) {
                if (void 0 === t && (t = !0), this.name = e.name, this.up.copy(e.up), this.position.copy(e.position), this.quaternion.copy(e.quaternion), this.scale.copy(e.scale), this.matrix.copy(e.matrix), this.matrixWorld.copy(e.matrixWorld), this.matrixAutoUpdate = e.matrixAutoUpdate, this.matrixWorldNeedsUpdate = e.matrixWorldNeedsUpdate, this.layers.mask = e.layers.mask, this.visible = e.visible, this.castShadow = e.castShadow, this.receiveShadow = e.receiveShadow, this.frustumCulled = e.frustumCulled, this.renderOrder = e.renderOrder, this.userData = JSON.parse(JSON.stringify(e.userData)), !0 === t) for (var n = 0; n < e.children.length; n++) {
                    var r = e.children[n];
                    this.add(r.clone())
                }
                return this
            }
        }), ge.prototype = Object.assign(Object.create(ve.prototype), {
            constructor: ge,
            isScene: !0,
            copy: function (e, t) {
                return ve.prototype.copy.call(this, e, t), null !== e.background && (this.background = e.background.clone()), null !== e.environment && (this.environment = e.environment.clone()), null !== e.fog && (this.fog = e.fog.clone()), null !== e.overrideMaterial && (this.overrideMaterial = e.overrideMaterial.clone()), this.autoUpdate = e.autoUpdate, this.matrixAutoUpdate = e.matrixAutoUpdate, this
            },
            toJSON: function (e) {
                var t = ve.prototype.toJSON.call(this, e);
                return null !== this.background && (t.object.background = this.background.toJSON(e)), null !== this.environment && (t.object.environment = this.environment.toJSON(e)), null !== this.fog && (t.object.fog = this.fog.toJSON()), t
            },
            dispose: function () {
                this.dispatchEvent({type: "dispose"})
            }
        });
        var ye = [new V, new V, new V, new V, new V, new V, new V, new V], xe = new V, be = new Ce, _e = new V,
            we = new V, Me = new V, Se = new V, Te = new V, Ee = new V, Ae = new V, Le = new V, Re = new V, Pe = new V;

        function Ce(e, t) {
            this.min = void 0 !== e ? e : new V(1 / 0, 1 / 0, 1 / 0), this.max = void 0 !== t ? t : new V(-1 / 0, -1 / 0, -1 / 0)
        }

        function Oe(e, t, n, r, i) {
            var a, o;
            for (a = 0, o = e.length - 3; a <= o; a += 3) {
                Pe.fromArray(e, a);
                var s = i.x * Math.abs(Pe.x) + i.y * Math.abs(Pe.y) + i.z * Math.abs(Pe.z), c = t.dot(Pe),
                    l = n.dot(Pe), u = r.dot(Pe);
                if (Math.max(-Math.max(c, l, u), Math.min(c, l, u)) > s) return !1
            }
            return !0
        }

        Object.assign(Ce.prototype, {
            isBox3: !0, set: function (e, t) {
                return this.min.copy(e), this.max.copy(t), this
            }, setFromArray: function (e) {
                for (var t = 1 / 0, n = 1 / 0, r = 1 / 0, i = -1 / 0, a = -1 / 0, o = -1 / 0, s = 0, c = e.length; s < c; s += 3) {
                    var l = e[s], u = e[s + 1], h = e[s + 2];
                    l < t && (t = l), u < n && (n = u), h < r && (r = h), l > i && (i = l), u > a && (a = u), h > o && (o = h)
                }
                return this.min.set(t, n, r), this.max.set(i, a, o), this
            }, setFromBufferAttribute: function (e) {
                for (var t = 1 / 0, n = 1 / 0, r = 1 / 0, i = -1 / 0, a = -1 / 0, o = -1 / 0, s = 0, c = e.count; s < c; s++) {
                    var l = e.getX(s), u = e.getY(s), h = e.getZ(s);
                    l < t && (t = l), u < n && (n = u), h < r && (r = h), l > i && (i = l), u > a && (a = u), h > o && (o = h)
                }
                return this.min.set(t, n, r), this.max.set(i, a, o), this
            }, setFromPoints: function (e) {
                this.makeEmpty();
                for (var t = 0, n = e.length; t < n; t++) this.expandByPoint(e[t]);
                return this
            }, setFromCenterAndSize: function (e, t) {
                var n = xe.copy(t).multiplyScalar(.5);
                return this.min.copy(e).sub(n), this.max.copy(e).add(n), this
            }, setFromObject: function (e) {
                return this.makeEmpty(), this.expandByObject(e)
            }, clone: function () {
                return (new this.constructor).copy(this)
            }, copy: function (e) {
                return this.min.copy(e.min), this.max.copy(e.max), this
            }, makeEmpty: function () {
                return this.min.x = this.min.y = this.min.z = 1 / 0, this.max.x = this.max.y = this.max.z = -1 / 0, this
            }, isEmpty: function () {
                return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z
            }, getCenter: function (e) {
                return void 0 === e && (console.warn("THREE.Box3: .getCenter() target is now required"), e = new V), this.isEmpty() ? e.set(0, 0, 0) : e.addVectors(this.min, this.max).multiplyScalar(.5)
            }, getSize: function (e) {
                return void 0 === e && (console.warn("THREE.Box3: .getSize() target is now required"), e = new V), this.isEmpty() ? e.set(0, 0, 0) : e.subVectors(this.max, this.min)
            }, expandByPoint: function (e) {
                return this.min.min(e), this.max.max(e), this
            }, expandByVector: function (e) {
                return this.min.sub(e), this.max.add(e), this
            }, expandByScalar: function (e) {
                return this.min.addScalar(-e), this.max.addScalar(e), this
            }, expandByObject: function (e) {
                e.updateWorldMatrix(!1, !1);
                var t = e.geometry;
                void 0 !== t && (null === t.boundingBox && t.computeBoundingBox(), be.copy(t.boundingBox), be.applyMatrix4(e.matrixWorld), this.union(be));
                for (var n = e.children, r = 0, i = n.length; r < i; r++) this.expandByObject(n[r]);
                return this
            }, containsPoint: function (e) {
                return !(e.x < this.min.x || e.x > this.max.x || e.y < this.min.y || e.y > this.max.y || e.z < this.min.z || e.z > this.max.z)
            }, containsBox: function (e) {
                return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y && this.min.z <= e.min.z && e.max.z <= this.max.z
            }, getParameter: function (e, t) {
                return void 0 === t && (console.warn("THREE.Box3: .getParameter() target is now required"), t = new V), t.set((e.x - this.min.x) / (this.max.x - this.min.x), (e.y - this.min.y) / (this.max.y - this.min.y), (e.z - this.min.z) / (this.max.z - this.min.z))
            }, intersectsBox: function (e) {
                return !(e.max.x < this.min.x || e.min.x > this.max.x || e.max.y < this.min.y || e.min.y > this.max.y || e.max.z < this.min.z || e.min.z > this.max.z)
            }, intersectsSphere: function (e) {
                return this.clampPoint(e.center, xe), xe.distanceToSquared(e.center) <= e.radius * e.radius
            }, intersectsPlane: function (e) {
                var t, n;
                return e.normal.x > 0 ? (t = e.normal.x * this.min.x, n = e.normal.x * this.max.x) : (t = e.normal.x * this.max.x, n = e.normal.x * this.min.x), e.normal.y > 0 ? (t += e.normal.y * this.min.y, n += e.normal.y * this.max.y) : (t += e.normal.y * this.max.y, n += e.normal.y * this.min.y), e.normal.z > 0 ? (t += e.normal.z * this.min.z, n += e.normal.z * this.max.z) : (t += e.normal.z * this.max.z, n += e.normal.z * this.min.z), t <= -e.constant && n >= -e.constant
            }, intersectsTriangle: function (e) {
                if (this.isEmpty()) return !1;
                this.getCenter(Ae), Le.subVectors(this.max, Ae), _e.subVectors(e.a, Ae), we.subVectors(e.b, Ae), Me.subVectors(e.c, Ae), Se.subVectors(we, _e), Te.subVectors(Me, we), Ee.subVectors(_e, Me);
                var t = [0, -Se.z, Se.y, 0, -Te.z, Te.y, 0, -Ee.z, Ee.y, Se.z, 0, -Se.x, Te.z, 0, -Te.x, Ee.z, 0, -Ee.x, -Se.y, Se.x, 0, -Te.y, Te.x, 0, -Ee.y, Ee.x, 0];
                return !!Oe(t, _e, we, Me, Le) && (!!Oe(t = [1, 0, 0, 0, 1, 0, 0, 0, 1], _e, we, Me, Le) && (Re.crossVectors(Se, Te), Oe(t = [Re.x, Re.y, Re.z], _e, we, Me, Le)))
            }, clampPoint: function (e, t) {
                return void 0 === t && (console.warn("THREE.Box3: .clampPoint() target is now required"), t = new V), t.copy(e).clamp(this.min, this.max)
            }, distanceToPoint: function (e) {
                return xe.copy(e).clamp(this.min, this.max).sub(e).length()
            }, getBoundingSphere: function (e) {
                return void 0 === e && console.error("THREE.Box3: .getBoundingSphere() target is now required"), this.getCenter(e.center), e.radius = .5 * this.getSize(xe).length(), e
            }, intersect: function (e) {
                return this.min.max(e.min), this.max.min(e.max), this.isEmpty() && this.makeEmpty(), this
            }, union: function (e) {
                return this.min.min(e.min), this.max.max(e.max), this
            }, applyMatrix4: function (e) {
                return this.isEmpty() || (ye[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(e), ye[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(e), ye[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(e), ye[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(e), ye[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(e), ye[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(e), ye[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(e), ye[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(e), this.setFromPoints(ye)), this
            }, translate: function (e) {
                return this.min.add(e), this.max.add(e), this
            }, equals: function (e) {
                return e.min.equals(this.min) && e.max.equals(this.max)
            }
        });
        var Ie = new Ce;

        function Ne(e, t) {
            this.center = void 0 !== e ? e : new V, this.radius = void 0 !== t ? t : -1
        }

        Object.assign(Ne.prototype, {
            set: function (e, t) {
                return this.center.copy(e), this.radius = t, this
            }, setFromPoints: function (e, t) {
                var n = this.center;
                void 0 !== t ? n.copy(t) : Ie.setFromPoints(e).getCenter(n);
                for (var r = 0, i = 0, a = e.length; i < a; i++) r = Math.max(r, n.distanceToSquared(e[i]));
                return this.radius = Math.sqrt(r), this
            }, clone: function () {
                return (new this.constructor).copy(this)
            }, copy: function (e) {
                return this.center.copy(e.center), this.radius = e.radius, this
            }, isEmpty: function () {
                return this.radius < 0
            }, makeEmpty: function () {
                return this.center.set(0, 0, 0), this.radius = -1, this
            }, containsPoint: function (e) {
                return e.distanceToSquared(this.center) <= this.radius * this.radius
            }, distanceToPoint: function (e) {
                return e.distanceTo(this.center) - this.radius
            }, intersectsSphere: function (e) {
                var t = this.radius + e.radius;
                return e.center.distanceToSquared(this.center) <= t * t
            }, intersectsBox: function (e) {
                return e.intersectsSphere(this)
            }, intersectsPlane: function (e) {
                return Math.abs(e.distanceToPoint(this.center)) <= this.radius
            }, clampPoint: function (e, t) {
                var n = this.center.distanceToSquared(e);
                return void 0 === t && (console.warn("THREE.Sphere: .clampPoint() target is now required"), t = new V), t.copy(e), n > this.radius * this.radius && (t.sub(this.center).normalize(), t.multiplyScalar(this.radius).add(this.center)), t
            }, getBoundingBox: function (e) {
                return void 0 === e && (console.warn("THREE.Sphere: .getBoundingBox() target is now required"), e = new Ce), this.isEmpty() ? (e.makeEmpty(), e) : (e.set(this.center, this.center), e.expandByScalar(this.radius), e)
            }, applyMatrix4: function (e) {
                return this.center.applyMatrix4(e), this.radius = this.radius * e.getMaxScaleOnAxis(), this
            }, translate: function (e) {
                return this.center.add(e), this
            }, equals: function (e) {
                return e.center.equals(this.center) && e.radius === this.radius
            }
        });
        var De = new V, Ue = new V, ze = new V, Fe = new V, Be = new V, He = new V, Ge = new V;

        function ke(e, t) {
            this.origin = void 0 !== e ? e : new V, this.direction = void 0 !== t ? t : new V(0, 0, -1)
        }

        Object.assign(ke.prototype, {
            set: function (e, t) {
                return this.origin.copy(e), this.direction.copy(t), this
            }, clone: function () {
                return (new this.constructor).copy(this)
            }, copy: function (e) {
                return this.origin.copy(e.origin), this.direction.copy(e.direction), this
            }, at: function (e, t) {
                return void 0 === t && (console.warn("THREE.Ray: .at() target is now required"), t = new V), t.copy(this.direction).multiplyScalar(e).add(this.origin)
            }, lookAt: function (e) {
                return this.direction.copy(e).sub(this.origin).normalize(), this
            }, recast: function (e) {
                return this.origin.copy(this.at(e, De)), this
            }, closestPointToPoint: function (e, t) {
                void 0 === t && (console.warn("THREE.Ray: .closestPointToPoint() target is now required"), t = new V), t.subVectors(e, this.origin);
                var n = t.dot(this.direction);
                return n < 0 ? t.copy(this.origin) : t.copy(this.direction).multiplyScalar(n).add(this.origin)
            }, distanceToPoint: function (e) {
                return Math.sqrt(this.distanceSqToPoint(e))
            }, distanceSqToPoint: function (e) {
                var t = De.subVectors(e, this.origin).dot(this.direction);
                return t < 0 ? this.origin.distanceToSquared(e) : (De.copy(this.direction).multiplyScalar(t).add(this.origin), De.distanceToSquared(e))
            }, distanceSqToSegment: function (e, t, n, r) {
                Ue.copy(e).add(t).multiplyScalar(.5), ze.copy(t).sub(e).normalize(), Fe.copy(this.origin).sub(Ue);
                var i, a, o, s, c = .5 * e.distanceTo(t), l = -this.direction.dot(ze), u = Fe.dot(this.direction),
                    h = -Fe.dot(ze), p = Fe.lengthSq(), d = Math.abs(1 - l * l);
                if (d > 0) if (a = l * u - h, s = c * d, (i = l * h - u) >= 0) if (a >= -s) if (a <= s) {
                    var f = 1 / d;
                    o = (i *= f) * (i + l * (a *= f) + 2 * u) + a * (l * i + a + 2 * h) + p
                } else a = c, o = -(i = Math.max(0, -(l * a + u))) * i + a * (a + 2 * h) + p; else a = -c, o = -(i = Math.max(0, -(l * a + u))) * i + a * (a + 2 * h) + p; else a <= -s ? o = -(i = Math.max(0, -(-l * c + u))) * i + (a = i > 0 ? -c : Math.min(Math.max(-c, -h), c)) * (a + 2 * h) + p : a <= s ? (i = 0, o = (a = Math.min(Math.max(-c, -h), c)) * (a + 2 * h) + p) : o = -(i = Math.max(0, -(l * c + u))) * i + (a = i > 0 ? c : Math.min(Math.max(-c, -h), c)) * (a + 2 * h) + p; else a = l > 0 ? -c : c, o = -(i = Math.max(0, -(l * a + u))) * i + a * (a + 2 * h) + p;
                return n && n.copy(this.direction).multiplyScalar(i).add(this.origin), r && r.copy(ze).multiplyScalar(a).add(Ue), o
            }, intersectSphere: function (e, t) {
                De.subVectors(e.center, this.origin);
                var n = De.dot(this.direction), r = De.dot(De) - n * n, i = e.radius * e.radius;
                if (r > i) return null;
                var a = Math.sqrt(i - r), o = n - a, s = n + a;
                return o < 0 && s < 0 ? null : o < 0 ? this.at(s, t) : this.at(o, t)
            }, intersectsSphere: function (e) {
                return this.distanceSqToPoint(e.center) <= e.radius * e.radius
            }, distanceToPlane: function (e) {
                var t = e.normal.dot(this.direction);
                if (0 === t) return 0 === e.distanceToPoint(this.origin) ? 0 : null;
                var n = -(this.origin.dot(e.normal) + e.constant) / t;
                return n >= 0 ? n : null
            }, intersectPlane: function (e, t) {
                var n = this.distanceToPlane(e);
                return null === n ? null : this.at(n, t)
            }, intersectsPlane: function (e) {
                var t = e.distanceToPoint(this.origin);
                return 0 === t || e.normal.dot(this.direction) * t < 0
            }, intersectBox: function (e, t) {
                var n, r, i, a, o, s, c = 1 / this.direction.x, l = 1 / this.direction.y, u = 1 / this.direction.z,
                    h = this.origin;
                return c >= 0 ? (n = (e.min.x - h.x) * c, r = (e.max.x - h.x) * c) : (n = (e.max.x - h.x) * c, r = (e.min.x - h.x) * c), l >= 0 ? (i = (e.min.y - h.y) * l, a = (e.max.y - h.y) * l) : (i = (e.max.y - h.y) * l, a = (e.min.y - h.y) * l), n > a || i > r ? null : ((i > n || n != n) && (n = i), (a < r || r != r) && (r = a), u >= 0 ? (o = (e.min.z - h.z) * u, s = (e.max.z - h.z) * u) : (o = (e.max.z - h.z) * u, s = (e.min.z - h.z) * u), n > s || o > r ? null : ((o > n || n != n) && (n = o), (s < r || r != r) && (r = s), r < 0 ? null : this.at(n >= 0 ? n : r, t)))
            }, intersectsBox: function (e) {
                return null !== this.intersectBox(e, De)
            }, intersectTriangle: function (e, t, n, r, i) {
                Be.subVectors(t, e), He.subVectors(n, e), Ge.crossVectors(Be, He);
                var a, o = this.direction.dot(Ge);
                if (o > 0) {
                    if (r) return null;
                    a = 1
                } else {
                    if (!(o < 0)) return null;
                    a = -1, o = -o
                }
                Fe.subVectors(this.origin, e);
                var s = a * this.direction.dot(He.crossVectors(Fe, He));
                if (s < 0) return null;
                var c = a * this.direction.dot(Be.cross(Fe));
                if (c < 0) return null;
                if (s + c > o) return null;
                var l = -a * Fe.dot(Ge);
                return l < 0 ? null : this.at(l / o, i)
            }, applyMatrix4: function (e) {
                return this.origin.applyMatrix4(e), this.direction.transformDirection(e), this
            }, equals: function (e) {
                return e.origin.equals(this.origin) && e.direction.equals(this.direction)
            }
        });
        var je = new V, Ve = new V, We = new N;

        function qe(e, t) {
            this.normal = void 0 !== e ? e : new V(1, 0, 0), this.constant = void 0 !== t ? t : 0
        }

        Object.assign(qe.prototype, {
            isPlane: !0, set: function (e, t) {
                return this.normal.copy(e), this.constant = t, this
            }, setComponents: function (e, t, n, r) {
                return this.normal.set(e, t, n), this.constant = r, this
            }, setFromNormalAndCoplanarPoint: function (e, t) {
                return this.normal.copy(e), this.constant = -t.dot(this.normal), this
            }, setFromCoplanarPoints: function (e, t, n) {
                var r = je.subVectors(n, t).cross(Ve.subVectors(e, t)).normalize();
                return this.setFromNormalAndCoplanarPoint(r, e), this
            }, clone: function () {
                return (new this.constructor).copy(this)
            }, copy: function (e) {
                return this.normal.copy(e.normal), this.constant = e.constant, this
            }, normalize: function () {
                var e = 1 / this.normal.length();
                return this.normal.multiplyScalar(e), this.constant *= e, this
            }, negate: function () {
                return this.constant *= -1, this.normal.negate(), this
            }, distanceToPoint: function (e) {
                return this.normal.dot(e) + this.constant
            }, distanceToSphere: function (e) {
                return this.distanceToPoint(e.center) - e.radius
            }, projectPoint: function (e, t) {
                return void 0 === t && (console.warn("THREE.Plane: .projectPoint() target is now required"), t = new V), t.copy(this.normal).multiplyScalar(-this.distanceToPoint(e)).add(e)
            }, intersectLine: function (e, t) {
                void 0 === t && (console.warn("THREE.Plane: .intersectLine() target is now required"), t = new V);
                var n = e.delta(je), r = this.normal.dot(n);
                if (0 === r) return 0 === this.distanceToPoint(e.start) ? t.copy(e.start) : void 0;
                var i = -(e.start.dot(this.normal) + this.constant) / r;
                return i < 0 || i > 1 ? void 0 : t.copy(n).multiplyScalar(i).add(e.start)
            }, intersectsLine: function (e) {
                var t = this.distanceToPoint(e.start), n = this.distanceToPoint(e.end);
                return t < 0 && n > 0 || n < 0 && t > 0
            }, intersectsBox: function (e) {
                return e.intersectsPlane(this)
            }, intersectsSphere: function (e) {
                return e.intersectsPlane(this)
            }, coplanarPoint: function (e) {
                return void 0 === e && (console.warn("THREE.Plane: .coplanarPoint() target is now required"), e = new V), e.copy(this.normal).multiplyScalar(-this.constant)
            }, applyMatrix4: function (e, t) {
                var n = t || We.getNormalMatrix(e), r = this.coplanarPoint(je).applyMatrix4(e),
                    i = this.normal.applyMatrix3(n).normalize();
                return this.constant = -r.dot(i), this
            }, translate: function (e) {
                return this.constant -= e.dot(this.normal), this
            }, equals: function (e) {
                return e.normal.equals(this.normal) && e.constant === this.constant
            }
        });
        var Xe = new V, Ye = new V, Je = new V, Ze = new V, Ke = new V, Qe = new V, $e = new V, et = new V, tt = new V,
            nt = new V;

        function rt(e, t, n) {
            this.a = void 0 !== e ? e : new V, this.b = void 0 !== t ? t : new V, this.c = void 0 !== n ? n : new V
        }

        Object.assign(rt, {
            getNormal: function (e, t, n, r) {
                void 0 === r && (console.warn("THREE.Triangle: .getNormal() target is now required"), r = new V), r.subVectors(n, t), Xe.subVectors(e, t), r.cross(Xe);
                var i = r.lengthSq();
                return i > 0 ? r.multiplyScalar(1 / Math.sqrt(i)) : r.set(0, 0, 0)
            }, getBarycoord: function (e, t, n, r, i) {
                Xe.subVectors(r, t), Ye.subVectors(n, t), Je.subVectors(e, t);
                var a = Xe.dot(Xe), o = Xe.dot(Ye), s = Xe.dot(Je), c = Ye.dot(Ye), l = Ye.dot(Je), u = a * c - o * o;
                if (void 0 === i && (console.warn("THREE.Triangle: .getBarycoord() target is now required"), i = new V), 0 === u) return i.set(-2, -1, -1);
                var h = 1 / u, p = (c * s - o * l) * h, d = (a * l - o * s) * h;
                return i.set(1 - p - d, d, p)
            }, containsPoint: function (e, t, n, r) {
                return rt.getBarycoord(e, t, n, r, Ze), Ze.x >= 0 && Ze.y >= 0 && Ze.x + Ze.y <= 1
            }, getUV: function (e, t, n, r, i, a, o, s) {
                return this.getBarycoord(e, t, n, r, Ze), s.set(0, 0), s.addScaledVector(i, Ze.x), s.addScaledVector(a, Ze.y), s.addScaledVector(o, Ze.z), s
            }, isFrontFacing: function (e, t, n, r) {
                return Xe.subVectors(n, t), Ye.subVectors(e, t), Xe.cross(Ye).dot(r) < 0
            }
        }), Object.assign(rt.prototype, {
            set: function (e, t, n) {
                return this.a.copy(e), this.b.copy(t), this.c.copy(n), this
            }, setFromPointsAndIndices: function (e, t, n, r) {
                return this.a.copy(e[t]), this.b.copy(e[n]), this.c.copy(e[r]), this
            }, clone: function () {
                return (new this.constructor).copy(this)
            }, copy: function (e) {
                return this.a.copy(e.a), this.b.copy(e.b), this.c.copy(e.c), this
            }, getArea: function () {
                return Xe.subVectors(this.c, this.b), Ye.subVectors(this.a, this.b), .5 * Xe.cross(Ye).length()
            }, getMidpoint: function (e) {
                return void 0 === e && (console.warn("THREE.Triangle: .getMidpoint() target is now required"), e = new V), e.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3)
            }, getNormal: function (e) {
                return rt.getNormal(this.a, this.b, this.c, e)
            }, getPlane: function (e) {
                return void 0 === e && (console.warn("THREE.Triangle: .getPlane() target is now required"), e = new qe), e.setFromCoplanarPoints(this.a, this.b, this.c)
            }, getBarycoord: function (e, t) {
                return rt.getBarycoord(e, this.a, this.b, this.c, t)
            }, getUV: function (e, t, n, r, i) {
                return rt.getUV(e, this.a, this.b, this.c, t, n, r, i)
            }, containsPoint: function (e) {
                return rt.containsPoint(e, this.a, this.b, this.c)
            }, isFrontFacing: function (e) {
                return rt.isFrontFacing(this.a, this.b, this.c, e)
            }, intersectsBox: function (e) {
                return e.intersectsTriangle(this)
            }, closestPointToPoint: function (e, t) {
                void 0 === t && (console.warn("THREE.Triangle: .closestPointToPoint() target is now required"), t = new V);
                var n, r, i = this.a, a = this.b, o = this.c;
                Ke.subVectors(a, i), Qe.subVectors(o, i), et.subVectors(e, i);
                var s = Ke.dot(et), c = Qe.dot(et);
                if (s <= 0 && c <= 0) return t.copy(i);
                tt.subVectors(e, a);
                var l = Ke.dot(tt), u = Qe.dot(tt);
                if (l >= 0 && u <= l) return t.copy(a);
                var h = s * u - l * c;
                if (h <= 0 && s >= 0 && l <= 0) return n = s / (s - l), t.copy(i).addScaledVector(Ke, n);
                nt.subVectors(e, o);
                var p = Ke.dot(nt), d = Qe.dot(nt);
                if (d >= 0 && p <= d) return t.copy(o);
                var f = p * c - s * d;
                if (f <= 0 && c >= 0 && d <= 0) return r = c / (c - d), t.copy(i).addScaledVector(Qe, r);
                var m = l * d - p * u;
                if (m <= 0 && u - l >= 0 && p - d >= 0) return $e.subVectors(o, a), r = (u - l) / (u - l + (p - d)), t.copy(a).addScaledVector($e, r);
                var v = 1 / (m + f + h);
                return n = f * v, r = h * v, t.copy(i).addScaledVector(Ke, n).addScaledVector(Qe, r)
            }, equals: function (e) {
                return e.a.equals(this.a) && e.b.equals(this.b) && e.c.equals(this.c)
            }
        });
        var it = {
            aliceblue: 15792383,
            antiquewhite: 16444375,
            aqua: 65535,
            aquamarine: 8388564,
            azure: 15794175,
            beige: 16119260,
            bisque: 16770244,
            black: 0,
            blanchedalmond: 16772045,
            blue: 255,
            blueviolet: 9055202,
            brown: 10824234,
            burlywood: 14596231,
            cadetblue: 6266528,
            chartreuse: 8388352,
            chocolate: 13789470,
            coral: 16744272,
            cornflowerblue: 6591981,
            cornsilk: 16775388,
            crimson: 14423100,
            cyan: 65535,
            darkblue: 139,
            darkcyan: 35723,
            darkgoldenrod: 12092939,
            darkgray: 11119017,
            darkgreen: 25600,
            darkgrey: 11119017,
            darkkhaki: 12433259,
            darkmagenta: 9109643,
            darkolivegreen: 5597999,
            darkorange: 16747520,
            darkorchid: 10040012,
            darkred: 9109504,
            darksalmon: 15308410,
            darkseagreen: 9419919,
            darkslateblue: 4734347,
            darkslategray: 3100495,
            darkslategrey: 3100495,
            darkturquoise: 52945,
            darkviolet: 9699539,
            deeppink: 16716947,
            deepskyblue: 49151,
            dimgray: 6908265,
            dimgrey: 6908265,
            dodgerblue: 2003199,
            firebrick: 11674146,
            floralwhite: 16775920,
            forestgreen: 2263842,
            fuchsia: 16711935,
            gainsboro: 14474460,
            ghostwhite: 16316671,
            gold: 16766720,
            goldenrod: 14329120,
            gray: 8421504,
            green: 32768,
            greenyellow: 11403055,
            grey: 8421504,
            honeydew: 15794160,
            hotpink: 16738740,
            indianred: 13458524,
            indigo: 4915330,
            ivory: 16777200,
            khaki: 15787660,
            lavender: 15132410,
            lavenderblush: 16773365,
            lawngreen: 8190976,
            lemonchiffon: 16775885,
            lightblue: 11393254,
            lightcoral: 15761536,
            lightcyan: 14745599,
            lightgoldenrodyellow: 16448210,
            lightgray: 13882323,
            lightgreen: 9498256,
            lightgrey: 13882323,
            lightpink: 16758465,
            lightsalmon: 16752762,
            lightseagreen: 2142890,
            lightskyblue: 8900346,
            lightslategray: 7833753,
            lightslategrey: 7833753,
            lightsteelblue: 11584734,
            lightyellow: 16777184,
            lime: 65280,
            limegreen: 3329330,
            linen: 16445670,
            magenta: 16711935,
            maroon: 8388608,
            mediumaquamarine: 6737322,
            mediumblue: 205,
            mediumorchid: 12211667,
            mediumpurple: 9662683,
            mediumseagreen: 3978097,
            mediumslateblue: 8087790,
            mediumspringgreen: 64154,
            mediumturquoise: 4772300,
            mediumvioletred: 13047173,
            midnightblue: 1644912,
            mintcream: 16121850,
            mistyrose: 16770273,
            moccasin: 16770229,
            navajowhite: 16768685,
            navy: 128,
            oldlace: 16643558,
            olive: 8421376,
            olivedrab: 7048739,
            orange: 16753920,
            orangered: 16729344,
            orchid: 14315734,
            palegoldenrod: 15657130,
            palegreen: 10025880,
            paleturquoise: 11529966,
            palevioletred: 14381203,
            papayawhip: 16773077,
            peachpuff: 16767673,
            peru: 13468991,
            pink: 16761035,
            plum: 14524637,
            powderblue: 11591910,
            purple: 8388736,
            rebeccapurple: 6697881,
            red: 16711680,
            rosybrown: 12357519,
            royalblue: 4286945,
            saddlebrown: 9127187,
            salmon: 16416882,
            sandybrown: 16032864,
            seagreen: 3050327,
            seashell: 16774638,
            sienna: 10506797,
            silver: 12632256,
            skyblue: 8900331,
            slateblue: 6970061,
            slategray: 7372944,
            slategrey: 7372944,
            snow: 16775930,
            springgreen: 65407,
            steelblue: 4620980,
            tan: 13808780,
            teal: 32896,
            thistle: 14204888,
            tomato: 16737095,
            turquoise: 4251856,
            violet: 15631086,
            wheat: 16113331,
            white: 16777215,
            whitesmoke: 16119285,
            yellow: 16776960,
            yellowgreen: 10145074
        }, at = {h: 0, s: 0, l: 0}, ot = {h: 0, s: 0, l: 0};

        function st(e, t, n) {
            return void 0 === t && void 0 === n ? this.set(e) : this.setRGB(e, t, n)
        }

        function ct(e, t, n) {
            return n < 0 && (n += 1), n > 1 && (n -= 1), n < 1 / 6 ? e + 6 * (t - e) * n : n < .5 ? t : n < 2 / 3 ? e + 6 * (t - e) * (2 / 3 - n) : e
        }

        function lt(e) {
            return e < .04045 ? .0773993808 * e : Math.pow(.9478672986 * e + .0521327014, 2.4)
        }

        function ut(e) {
            return e < .0031308 ? 12.92 * e : 1.055 * Math.pow(e, .41666) - .055
        }

        function ht(e, t, n, r, i, a) {
            this.a = e, this.b = t, this.c = n, this.normal = r && r.isVector3 ? r : new V, this.vertexNormals = Array.isArray(r) ? r : [], this.color = i && i.isColor ? i : new st, this.vertexColors = Array.isArray(i) ? i : [], this.materialIndex = void 0 !== a ? a : 0
        }

        Object.assign(st.prototype, {
            isColor: !0, r: 1, g: 1, b: 1, set: function (e) {
                return e && e.isColor ? this.copy(e) : "number" == typeof e ? this.setHex(e) : "string" == typeof e && this.setStyle(e), this
            }, setScalar: function (e) {
                return this.r = e, this.g = e, this.b = e, this
            }, setHex: function (e) {
                return e = Math.floor(e), this.r = (e >> 16 & 255) / 255, this.g = (e >> 8 & 255) / 255, this.b = (255 & e) / 255, this
            }, setRGB: function (e, t, n) {
                return this.r = e, this.g = t, this.b = n, this
            }, setHSL: function (e, t, n) {
                if (e = O.euclideanModulo(e, 1), t = O.clamp(t, 0, 1), n = O.clamp(n, 0, 1), 0 === t) this.r = this.g = this.b = n; else {
                    var r = n <= .5 ? n * (1 + t) : n + t - n * t, i = 2 * n - r;
                    this.r = ct(i, r, e + 1 / 3), this.g = ct(i, r, e), this.b = ct(i, r, e - 1 / 3)
                }
                return this
            }, setStyle: function (e) {
                function t(t) {
                    void 0 !== t && parseFloat(t) < 1 && console.warn("THREE.Color: Alpha component of " + e + " will be ignored.")
                }

                var n;
                if (n = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(e)) {
                    var r, i = n[1], a = n[2];
                    switch (i) {
                        case"rgb":
                        case"rgba":
                            if (r = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a)) return this.r = Math.min(255, parseInt(r[1], 10)) / 255, this.g = Math.min(255, parseInt(r[2], 10)) / 255, this.b = Math.min(255, parseInt(r[3], 10)) / 255, t(r[5]), this;
                            if (r = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a)) return this.r = Math.min(100, parseInt(r[1], 10)) / 100, this.g = Math.min(100, parseInt(r[2], 10)) / 100, this.b = Math.min(100, parseInt(r[3], 10)) / 100, t(r[5]), this;
                            break;
                        case"hsl":
                        case"hsla":
                            if (r = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a)) {
                                var o = parseFloat(r[1]) / 360, s = parseInt(r[2], 10) / 100,
                                    c = parseInt(r[3], 10) / 100;
                                return t(r[5]), this.setHSL(o, s, c)
                            }
                    }
                } else if (n = /^\#([A-Fa-f0-9]+)$/.exec(e)) {
                    var l = n[1], u = l.length;
                    if (3 === u) return this.r = parseInt(l.charAt(0) + l.charAt(0), 16) / 255, this.g = parseInt(l.charAt(1) + l.charAt(1), 16) / 255, this.b = parseInt(l.charAt(2) + l.charAt(2), 16) / 255, this;
                    if (6 === u) return this.r = parseInt(l.charAt(0) + l.charAt(1), 16) / 255, this.g = parseInt(l.charAt(2) + l.charAt(3), 16) / 255, this.b = parseInt(l.charAt(4) + l.charAt(5), 16) / 255, this
                }
                return e && e.length > 0 ? this.setColorName(e) : this
            }, setColorName: function (e) {
                var t = it[e];
                return void 0 !== t ? this.setHex(t) : console.warn("THREE.Color: Unknown color " + e), this
            }, clone: function () {
                return new this.constructor(this.r, this.g, this.b)
            }, copy: function (e) {
                return this.r = e.r, this.g = e.g, this.b = e.b, this
            }, copyGammaToLinear: function (e, t) {
                return void 0 === t && (t = 2), this.r = Math.pow(e.r, t), this.g = Math.pow(e.g, t), this.b = Math.pow(e.b, t), this
            }, copyLinearToGamma: function (e, t) {
                void 0 === t && (t = 2);
                var n = t > 0 ? 1 / t : 1;
                return this.r = Math.pow(e.r, n), this.g = Math.pow(e.g, n), this.b = Math.pow(e.b, n), this
            }, convertGammaToLinear: function (e) {
                return this.copyGammaToLinear(this, e), this
            }, convertLinearToGamma: function (e) {
                return this.copyLinearToGamma(this, e), this
            }, copySRGBToLinear: function (e) {
                return this.r = lt(e.r), this.g = lt(e.g), this.b = lt(e.b), this
            }, copyLinearToSRGB: function (e) {
                return this.r = ut(e.r), this.g = ut(e.g), this.b = ut(e.b), this
            }, convertSRGBToLinear: function () {
                return this.copySRGBToLinear(this), this
            }, convertLinearToSRGB: function () {
                return this.copyLinearToSRGB(this), this
            }, getHex: function () {
                return 255 * this.r << 16 ^ 255 * this.g << 8 ^ 255 * this.b << 0
            }, getHexString: function () {
                return ("000000" + this.getHex().toString(16)).slice(-6)
            }, getHSL: function (e) {
                void 0 === e && (console.warn("THREE.Color: .getHSL() target is now required"), e = {h: 0, s: 0, l: 0});
                var t, n, r = this.r, i = this.g, a = this.b, o = Math.max(r, i, a), s = Math.min(r, i, a),
                    c = (s + o) / 2;
                if (s === o) t = 0, n = 0; else {
                    var l = o - s;
                    switch (n = c <= .5 ? l / (o + s) : l / (2 - o - s), o) {
                        case r:
                            t = (i - a) / l + (i < a ? 6 : 0);
                            break;
                        case i:
                            t = (a - r) / l + 2;
                            break;
                        case a:
                            t = (r - i) / l + 4
                    }
                    t /= 6
                }
                return e.h = t, e.s = n, e.l = c, e
            }, getStyle: function () {
                return "rgb(" + (255 * this.r | 0) + "," + (255 * this.g | 0) + "," + (255 * this.b | 0) + ")"
            }, offsetHSL: function (e, t, n) {
                return this.getHSL(at), at.h += e, at.s += t, at.l += n, this.setHSL(at.h, at.s, at.l), this
            }, add: function (e) {
                return this.r += e.r, this.g += e.g, this.b += e.b, this
            }, addColors: function (e, t) {
                return this.r = e.r + t.r, this.g = e.g + t.g, this.b = e.b + t.b, this
            }, addScalar: function (e) {
                return this.r += e, this.g += e, this.b += e, this
            }, sub: function (e) {
                return this.r = Math.max(0, this.r - e.r), this.g = Math.max(0, this.g - e.g), this.b = Math.max(0, this.b - e.b), this
            }, multiply: function (e) {
                return this.r *= e.r, this.g *= e.g, this.b *= e.b, this
            }, multiplyScalar: function (e) {
                return this.r *= e, this.g *= e, this.b *= e, this
            }, lerp: function (e, t) {
                return this.r += (e.r - this.r) * t, this.g += (e.g - this.g) * t, this.b += (e.b - this.b) * t, this
            }, lerpHSL: function (e, t) {
                this.getHSL(at), e.getHSL(ot);
                var n = O.lerp(at.h, ot.h, t), r = O.lerp(at.s, ot.s, t), i = O.lerp(at.l, ot.l, t);
                return this.setHSL(n, r, i), this
            }, equals: function (e) {
                return e.r === this.r && e.g === this.g && e.b === this.b
            }, fromArray: function (e, t) {
                return void 0 === t && (t = 0), this.r = e[t], this.g = e[t + 1], this.b = e[t + 2], this
            }, toArray: function (e, t) {
                return void 0 === e && (e = []), void 0 === t && (t = 0), e[t] = this.r, e[t + 1] = this.g, e[t + 2] = this.b, e
            }, toJSON: function () {
                return this.getHex()
            }
        }), st.NAMES = it, Object.assign(ht.prototype, {
            clone: function () {
                return (new this.constructor).copy(this)
            }, copy: function (e) {
                this.a = e.a, this.b = e.b, this.c = e.c, this.normal.copy(e.normal), this.color.copy(e.color), this.materialIndex = e.materialIndex;
                for (var t = 0, n = e.vertexNormals.length; t < n; t++) this.vertexNormals[t] = e.vertexNormals[t].clone();
                for (t = 0, n = e.vertexColors.length; t < n; t++) this.vertexColors[t] = e.vertexColors[t].clone();
                return this
            }
        });
        var pt = 0;

        function dt() {
            Object.defineProperty(this, "id", {value: pt++}), this.uuid = O.generateUUID(), this.name = "", this.type = "Material", this.fog = !0, this.blending = 1, this.side = a, this.flatShading = !1, this.vertexColors = !1, this.opacity = 1, this.transparent = !1, this.blendSrc = 204, this.blendDst = 205, this.blendEquation = 100, this.blendSrcAlpha = null, this.blendDstAlpha = null, this.blendEquationAlpha = null, this.depthFunc = 3, this.depthTest = !0, this.depthWrite = !0, this.stencilWriteMask = 255, this.stencilFunc = 519, this.stencilRef = 0, this.stencilFuncMask = 255, this.stencilFail = 7680, this.stencilZFail = 7680, this.stencilZPass = 7680, this.stencilWrite = !1, this.clippingPlanes = null, this.clipIntersection = !1, this.clipShadows = !1, this.shadowSide = null, this.colorWrite = !0, this.precision = null, this.polygonOffset = !1, this.polygonOffsetFactor = 0, this.polygonOffsetUnits = 0, this.dithering = !1, this.alphaTest = 0, this.premultipliedAlpha = !1, this.visible = !0, this.toneMapped = !0, this.userData = {}, this.version = 0
        }

        function ft(e) {
            dt.call(this), this.type = "MeshBasicMaterial", this.color = new st(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = 0, this.reflectivity = 1, this.refractionRatio = .98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.skinning = !1, this.morphTargets = !1, this.setValues(e)
        }

        dt.prototype = Object.assign(Object.create(L.prototype), {
            constructor: dt, isMaterial: !0, onBeforeCompile: function () {
            }, setValues: function (e) {
                if (void 0 !== e) for (var t in e) {
                    var n = e[t];
                    if (void 0 !== n) if ("shading" !== t) {
                        var r = this[t];
                        void 0 !== r ? r && r.isColor ? r.set(n) : r && r.isVector3 && n && n.isVector3 ? r.copy(n) : this[t] = n : console.warn("THREE." + this.type + ": '" + t + "' is not a property of this material.")
                    } else console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead."), this.flatShading = 1 === n; else console.warn("THREE.Material: '" + t + "' parameter is undefined.")
                }
            }, toJSON: function (e) {
                var t = void 0 === e || "string" == typeof e;
                t && (e = {textures: {}, images: {}});
                var n = {metadata: {version: 4.5, type: "Material", generator: "Material.toJSON"}};

                function r(e) {
                    var t = [];
                    for (var n in e) {
                        var r = e[n];
                        delete r.metadata, t.push(r)
                    }
                    return t
                }

                if (n.uuid = this.uuid, n.type = this.type, "" !== this.name && (n.name = this.name), this.color && this.color.isColor && (n.color = this.color.getHex()), void 0 !== this.roughness && (n.roughness = this.roughness), void 0 !== this.metalness && (n.metalness = this.metalness), this.sheen && this.sheen.isColor && (n.sheen = this.sheen.getHex()), this.emissive && this.emissive.isColor && (n.emissive = this.emissive.getHex()), this.emissiveIntensity && 1 !== this.emissiveIntensity && (n.emissiveIntensity = this.emissiveIntensity), this.specular && this.specular.isColor && (n.specular = this.specular.getHex()), void 0 !== this.shininess && (n.shininess = this.shininess), void 0 !== this.clearcoat && (n.clearcoat = this.clearcoat), void 0 !== this.clearcoatRoughness && (n.clearcoatRoughness = this.clearcoatRoughness), this.clearcoatMap && this.clearcoatMap.isTexture && (n.clearcoatMap = this.clearcoatMap.toJSON(e).uuid), this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture && (n.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(e).uuid), this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && (n.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(e).uuid, n.clearcoatNormalScale = this.clearcoatNormalScale.toArray()), this.map && this.map.isTexture && (n.map = this.map.toJSON(e).uuid), this.matcap && this.matcap.isTexture && (n.matcap = this.matcap.toJSON(e).uuid), this.alphaMap && this.alphaMap.isTexture && (n.alphaMap = this.alphaMap.toJSON(e).uuid), this.lightMap && this.lightMap.isTexture && (n.lightMap = this.lightMap.toJSON(e).uuid), this.aoMap && this.aoMap.isTexture && (n.aoMap = this.aoMap.toJSON(e).uuid, n.aoMapIntensity = this.aoMapIntensity), this.bumpMap && this.bumpMap.isTexture && (n.bumpMap = this.bumpMap.toJSON(e).uuid, n.bumpScale = this.bumpScale), this.normalMap && this.normalMap.isTexture && (n.normalMap = this.normalMap.toJSON(e).uuid, n.normalMapType = this.normalMapType, n.normalScale = this.normalScale.toArray()), this.displacementMap && this.displacementMap.isTexture && (n.displacementMap = this.displacementMap.toJSON(e).uuid, n.displacementScale = this.displacementScale, n.displacementBias = this.displacementBias), this.roughnessMap && this.roughnessMap.isTexture && (n.roughnessMap = this.roughnessMap.toJSON(e).uuid), this.metalnessMap && this.metalnessMap.isTexture && (n.metalnessMap = this.metalnessMap.toJSON(e).uuid), this.emissiveMap && this.emissiveMap.isTexture && (n.emissiveMap = this.emissiveMap.toJSON(e).uuid), this.specularMap && this.specularMap.isTexture && (n.specularMap = this.specularMap.toJSON(e).uuid), this.envMap && this.envMap.isTexture && (n.envMap = this.envMap.toJSON(e).uuid, n.reflectivity = this.reflectivity, n.refractionRatio = this.refractionRatio, void 0 !== this.combine && (n.combine = this.combine), void 0 !== this.envMapIntensity && (n.envMapIntensity = this.envMapIntensity)), this.gradientMap && this.gradientMap.isTexture && (n.gradientMap = this.gradientMap.toJSON(e).uuid), void 0 !== this.size && (n.size = this.size), void 0 !== this.sizeAttenuation && (n.sizeAttenuation = this.sizeAttenuation), 1 !== this.blending && (n.blending = this.blending), !0 === this.flatShading && (n.flatShading = this.flatShading), this.side !== a && (n.side = this.side), this.vertexColors && (n.vertexColors = !0), this.opacity < 1 && (n.opacity = this.opacity), !0 === this.transparent && (n.transparent = this.transparent), n.depthFunc = this.depthFunc, n.depthTest = this.depthTest, n.depthWrite = this.depthWrite, n.stencilWrite = this.stencilWrite, n.stencilWriteMask = this.stencilWriteMask, n.stencilFunc = this.stencilFunc, n.stencilRef = this.stencilRef, n.stencilFuncMask = this.stencilFuncMask, n.stencilFail = this.stencilFail, n.stencilZFail = this.stencilZFail, n.stencilZPass = this.stencilZPass, this.rotation && 0 !== this.rotation && (n.rotation = this.rotation), !0 === this.polygonOffset && (n.polygonOffset = !0), 0 !== this.polygonOffsetFactor && (n.polygonOffsetFactor = this.polygonOffsetFactor), 0 !== this.polygonOffsetUnits && (n.polygonOffsetUnits = this.polygonOffsetUnits), this.linewidth && 1 !== this.linewidth && (n.linewidth = this.linewidth), void 0 !== this.dashSize && (n.dashSize = this.dashSize), void 0 !== this.gapSize && (n.gapSize = this.gapSize), void 0 !== this.scale && (n.scale = this.scale), !0 === this.dithering && (n.dithering = !0), this.alphaTest > 0 && (n.alphaTest = this.alphaTest), !0 === this.premultipliedAlpha && (n.premultipliedAlpha = this.premultipliedAlpha), !0 === this.wireframe && (n.wireframe = this.wireframe), this.wireframeLinewidth > 1 && (n.wireframeLinewidth = this.wireframeLinewidth), "round" !== this.wireframeLinecap && (n.wireframeLinecap = this.wireframeLinecap), "round" !== this.wireframeLinejoin && (n.wireframeLinejoin = this.wireframeLinejoin), !0 === this.morphTargets && (n.morphTargets = !0), !0 === this.morphNormals && (n.morphNormals = !0), !0 === this.skinning && (n.skinning = !0), !1 === this.visible && (n.visible = !1), !1 === this.toneMapped && (n.toneMapped = !1), "{}" !== JSON.stringify(this.userData) && (n.userData = this.userData), t) {
                    var i = r(e.textures), o = r(e.images);
                    i.length > 0 && (n.textures = i), o.length > 0 && (n.images = o)
                }
                return n
            }, clone: function () {
                return (new this.constructor).copy(this)
            }, copy: function (e) {
                this.name = e.name, this.fog = e.fog, this.blending = e.blending, this.side = e.side, this.flatShading = e.flatShading, this.vertexColors = e.vertexColors, this.opacity = e.opacity, this.transparent = e.transparent, this.blendSrc = e.blendSrc, this.blendDst = e.blendDst, this.blendEquation = e.blendEquation, this.blendSrcAlpha = e.blendSrcAlpha, this.blendDstAlpha = e.blendDstAlpha, this.blendEquationAlpha = e.blendEquationAlpha, this.depthFunc = e.depthFunc, this.depthTest = e.depthTest, this.depthWrite = e.depthWrite, this.stencilWriteMask = e.stencilWriteMask, this.stencilFunc = e.stencilFunc, this.stencilRef = e.stencilRef, this.stencilFuncMask = e.stencilFuncMask, this.stencilFail = e.stencilFail, this.stencilZFail = e.stencilZFail, this.stencilZPass = e.stencilZPass, this.stencilWrite = e.stencilWrite;
                var t = e.clippingPlanes, n = null;
                if (null !== t) {
                    var r = t.length;
                    n = new Array(r);
                    for (var i = 0; i !== r; ++i) n[i] = t[i].clone()
                }
                return this.clippingPlanes = n, this.clipIntersection = e.clipIntersection, this.clipShadows = e.clipShadows, this.shadowSide = e.shadowSide, this.colorWrite = e.colorWrite, this.precision = e.precision, this.polygonOffset = e.polygonOffset, this.polygonOffsetFactor = e.polygonOffsetFactor, this.polygonOffsetUnits = e.polygonOffsetUnits, this.dithering = e.dithering, this.alphaTest = e.alphaTest, this.premultipliedAlpha = e.premultipliedAlpha, this.visible = e.visible, this.toneMapped = e.toneMapped, this.userData = JSON.parse(JSON.stringify(e.userData)), this
            }, dispose: function () {
                this.dispatchEvent({type: "dispose"})
            }
        }), Object.defineProperty(dt.prototype, "needsUpdate", {
            set: function (e) {
                !0 === e && this.version++
            }
        }), ft.prototype = Object.create(dt.prototype), ft.prototype.constructor = ft, ft.prototype.isMeshBasicMaterial = !0, ft.prototype.copy = function (e) {
            return dt.prototype.copy.call(this, e), this.color.copy(e.color), this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.skinning = e.skinning, this.morphTargets = e.morphTargets, this
        };
        var mt = new V;

        function vt(e, t, n) {
            if (Array.isArray(e)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
            this.name = "", this.array = e, this.itemSize = t, this.count = void 0 !== e ? e.length / t : 0, this.normalized = !0 === n, this.usage = 35044, this.updateRange = {
                offset: 0,
                count: -1
            }, this.version = 0
        }

        function gt(e, t, n) {
            vt.call(this, new Int8Array(e), t, n)
        }

        function yt(e, t, n) {
            vt.call(this, new Uint8Array(e), t, n)
        }

        function xt(e, t, n) {
            vt.call(this, new Uint8ClampedArray(e), t, n)
        }

        function bt(e, t, n) {
            vt.call(this, new Int16Array(e), t, n)
        }

        function _t(e, t, n) {
            vt.call(this, new Uint16Array(e), t, n)
        }

        function wt(e, t, n) {
            vt.call(this, new Int32Array(e), t, n)
        }

        function Mt(e, t, n) {
            vt.call(this, new Uint32Array(e), t, n)
        }

        function St(e, t, n) {
            vt.call(this, new Float32Array(e), t, n)
        }

        function Tt(e, t, n) {
            vt.call(this, new Float64Array(e), t, n)
        }

        function Et() {
            this.vertices = [], this.normals = [], this.colors = [], this.uvs = [], this.uvs2 = [], this.groups = [], this.morphTargets = {}, this.skinWeights = [], this.skinIndices = [], this.boundingBox = null, this.boundingSphere = null, this.verticesNeedUpdate = !1, this.normalsNeedUpdate = !1, this.colorsNeedUpdate = !1, this.uvsNeedUpdate = !1, this.groupsNeedUpdate = !1
        }

        function At(e) {
            if (0 === e.length) return -1 / 0;
            let t = e[0];
            for (let n = 1, r = e.length; n < r; ++n) e[n] > t && (t = e[n]);
            return t
        }

        Object.defineProperty(vt.prototype, "needsUpdate", {
            set: function (e) {
                !0 === e && this.version++
            }
        }), Object.assign(vt.prototype, {
            isBufferAttribute: !0, onUploadCallback: function () {
            }, setUsage: function (e) {
                return this.usage = e, this
            }, copy: function (e) {
                return this.name = e.name, this.array = new e.array.constructor(e.array), this.itemSize = e.itemSize, this.count = e.count, this.normalized = e.normalized, this.usage = e.usage, this
            }, copyAt: function (e, t, n) {
                e *= this.itemSize, n *= t.itemSize;
                for (var r = 0, i = this.itemSize; r < i; r++) this.array[e + r] = t.array[n + r];
                return this
            }, copyArray: function (e) {
                return this.array.set(e), this
            }, copyColorsArray: function (e) {
                for (var t = this.array, n = 0, r = 0, i = e.length; r < i; r++) {
                    var a = e[r];
                    void 0 === a && (console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined", r), a = new st), t[n++] = a.r, t[n++] = a.g, t[n++] = a.b
                }
                return this
            }, copyVector2sArray: function (e) {
                for (var t = this.array, n = 0, r = 0, i = e.length; r < i; r++) {
                    var a = e[r];
                    void 0 === a && (console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined", r), a = new I), t[n++] = a.x, t[n++] = a.y
                }
                return this
            }, copyVector3sArray: function (e) {
                for (var t = this.array, n = 0, r = 0, i = e.length; r < i; r++) {
                    var a = e[r];
                    void 0 === a && (console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined", r), a = new V), t[n++] = a.x, t[n++] = a.y, t[n++] = a.z
                }
                return this
            }, copyVector4sArray: function (e) {
                for (var t = this.array, n = 0, r = 0, i = e.length; r < i; r++) {
                    var a = e[r];
                    void 0 === a && (console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined", r), a = new F), t[n++] = a.x, t[n++] = a.y, t[n++] = a.z, t[n++] = a.w
                }
                return this
            }, applyMatrix3: function (e) {
                for (var t = 0, n = this.count; t < n; t++) mt.x = this.getX(t), mt.y = this.getY(t), mt.z = this.getZ(t), mt.applyMatrix3(e), this.setXYZ(t, mt.x, mt.y, mt.z);
                return this
            }, applyMatrix4: function (e) {
                for (var t = 0, n = this.count; t < n; t++) mt.x = this.getX(t), mt.y = this.getY(t), mt.z = this.getZ(t), mt.applyMatrix4(e), this.setXYZ(t, mt.x, mt.y, mt.z);
                return this
            }, applyNormalMatrix: function (e) {
                for (var t = 0, n = this.count; t < n; t++) mt.x = this.getX(t), mt.y = this.getY(t), mt.z = this.getZ(t), mt.applyNormalMatrix(e), this.setXYZ(t, mt.x, mt.y, mt.z);
                return this
            }, transformDirection: function (e) {
                for (var t = 0, n = this.count; t < n; t++) mt.x = this.getX(t), mt.y = this.getY(t), mt.z = this.getZ(t), mt.transformDirection(e), this.setXYZ(t, mt.x, mt.y, mt.z);
                return this
            }, set: function (e, t) {
                return void 0 === t && (t = 0), this.array.set(e, t), this
            }, getX: function (e) {
                return this.array[e * this.itemSize]
            }, setX: function (e, t) {
                return this.array[e * this.itemSize] = t, this
            }, getY: function (e) {
                return this.array[e * this.itemSize + 1]
            }, setY: function (e, t) {
                return this.array[e * this.itemSize + 1] = t, this
            }, getZ: function (e) {
                return this.array[e * this.itemSize + 2]
            }, setZ: function (e, t) {
                return this.array[e * this.itemSize + 2] = t, this
            }, getW: function (e) {
                return this.array[e * this.itemSize + 3]
            }, setW: function (e, t) {
                return this.array[e * this.itemSize + 3] = t, this
            }, setXY: function (e, t, n) {
                return e *= this.itemSize, this.array[e + 0] = t, this.array[e + 1] = n, this
            }, setXYZ: function (e, t, n, r) {
                return e *= this.itemSize, this.array[e + 0] = t, this.array[e + 1] = n, this.array[e + 2] = r, this
            }, setXYZW: function (e, t, n, r, i) {
                return e *= this.itemSize, this.array[e + 0] = t, this.array[e + 1] = n, this.array[e + 2] = r, this.array[e + 3] = i, this
            }, onUpload: function (e) {
                return this.onUploadCallback = e, this
            }, clone: function () {
                return new this.constructor(this.array, this.itemSize).copy(this)
            }, toJSON: function () {
                return {
                    itemSize: this.itemSize,
                    type: this.array.constructor.name,
                    array: Array.prototype.slice.call(this.array),
                    normalized: this.normalized
                }
            }
        }), gt.prototype = Object.create(vt.prototype), gt.prototype.constructor = gt, yt.prototype = Object.create(vt.prototype), yt.prototype.constructor = yt, xt.prototype = Object.create(vt.prototype), xt.prototype.constructor = xt, bt.prototype = Object.create(vt.prototype), bt.prototype.constructor = bt, _t.prototype = Object.create(vt.prototype), _t.prototype.constructor = _t, wt.prototype = Object.create(vt.prototype), wt.prototype.constructor = wt, Mt.prototype = Object.create(vt.prototype), Mt.prototype.constructor = Mt, St.prototype = Object.create(vt.prototype), St.prototype.constructor = St, Tt.prototype = Object.create(vt.prototype), Tt.prototype.constructor = Tt, Object.assign(Et.prototype, {
            computeGroups: function (e) {
                for (var t, n = [], r = void 0, i = e.faces, a = 0; a < i.length; a++) {
                    var o = i[a];
                    o.materialIndex !== r && (r = o.materialIndex, void 0 !== t && (t.count = 3 * a - t.start, n.push(t)), t = {
                        start: 3 * a,
                        materialIndex: r
                    })
                }
                void 0 !== t && (t.count = 3 * a - t.start, n.push(t)), this.groups = n
            }, fromGeometry: function (e) {
                var t, n = e.faces, r = e.vertices, i = e.faceVertexUvs, a = i[0] && i[0].length > 0,
                    o = i[1] && i[1].length > 0, s = e.morphTargets, c = s.length;
                if (c > 0) {
                    t = [];
                    for (var l = 0; l < c; l++) t[l] = {name: s[l].name, data: []};
                    this.morphTargets.position = t
                }
                var u, h = e.morphNormals, p = h.length;
                if (p > 0) {
                    u = [];
                    for (l = 0; l < p; l++) u[l] = {name: h[l].name, data: []};
                    this.morphTargets.normal = u
                }
                var d = e.skinIndices, f = e.skinWeights, m = d.length === r.length, v = f.length === r.length;
                r.length > 0 && 0 === n.length && console.error("THREE.DirectGeometry: Faceless geometries are not supported.");
                for (l = 0; l < n.length; l++) {
                    var g = n[l];
                    this.vertices.push(r[g.a], r[g.b], r[g.c]);
                    var y = g.vertexNormals;
                    if (3 === y.length) this.normals.push(y[0], y[1], y[2]); else {
                        var x = g.normal;
                        this.normals.push(x, x, x)
                    }
                    var b, _ = g.vertexColors;
                    if (3 === _.length) this.colors.push(_[0], _[1], _[2]); else {
                        var w = g.color;
                        this.colors.push(w, w, w)
                    }
                    if (!0 === a) void 0 !== (b = i[0][l]) ? this.uvs.push(b[0], b[1], b[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ", l), this.uvs.push(new I, new I, new I));
                    if (!0 === o) void 0 !== (b = i[1][l]) ? this.uvs2.push(b[0], b[1], b[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ", l), this.uvs2.push(new I, new I, new I));
                    for (var M = 0; M < c; M++) {
                        var S = s[M].vertices;
                        t[M].data.push(S[g.a], S[g.b], S[g.c])
                    }
                    for (M = 0; M < p; M++) {
                        var T = h[M].vertexNormals[l];
                        u[M].data.push(T.a, T.b, T.c)
                    }
                    m && this.skinIndices.push(d[g.a], d[g.b], d[g.c]), v && this.skinWeights.push(f[g.a], f[g.b], f[g.c])
                }
                return this.computeGroups(e), this.verticesNeedUpdate = e.verticesNeedUpdate, this.normalsNeedUpdate = e.normalsNeedUpdate, this.colorsNeedUpdate = e.colorsNeedUpdate, this.uvsNeedUpdate = e.uvsNeedUpdate, this.groupsNeedUpdate = e.groupsNeedUpdate, null !== e.boundingSphere && (this.boundingSphere = e.boundingSphere.clone()), null !== e.boundingBox && (this.boundingBox = e.boundingBox.clone()), this
            }
        });
        var Lt = 1, Rt = new Q, Pt = new ve, Ct = new V, Ot = new Ce, It = new Ce, Nt = new V;

        function Dt() {
            Object.defineProperty(this, "id", {value: Lt += 2}), this.uuid = O.generateUUID(), this.name = "", this.type = "BufferGeometry", this.index = null, this.attributes = {}, this.morphAttributes = {}, this.morphTargetsRelative = !1, this.groups = [], this.boundingBox = null, this.boundingSphere = null, this.drawRange = {
                start: 0,
                count: 1 / 0
            }, this.userData = {}
        }

        Dt.prototype = Object.assign(Object.create(L.prototype), {
            constructor: Dt, isBufferGeometry: !0, getIndex: function () {
                return this.index
            }, setIndex: function (e) {
                Array.isArray(e) ? this.index = new (At(e) > 65535 ? Mt : _t)(e, 1) : this.index = e
            }, getAttribute: function (e) {
                return this.attributes[e]
            }, setAttribute: function (e, t) {
                return this.attributes[e] = t, this
            }, deleteAttribute: function (e) {
                return delete this.attributes[e], this
            }, addGroup: function (e, t, n) {
                this.groups.push({start: e, count: t, materialIndex: void 0 !== n ? n : 0})
            }, clearGroups: function () {
                this.groups = []
            }, setDrawRange: function (e, t) {
                this.drawRange.start = e, this.drawRange.count = t
            }, applyMatrix4: function (e) {
                var t = this.attributes.position;
                void 0 !== t && (t.applyMatrix4(e), t.needsUpdate = !0);
                var n = this.attributes.normal;
                if (void 0 !== n) {
                    var r = (new N).getNormalMatrix(e);
                    n.applyNormalMatrix(r), n.needsUpdate = !0
                }
                var i = this.attributes.tangent;
                return void 0 !== i && (i.transformDirection(e), i.needsUpdate = !0), null !== this.boundingBox && this.computeBoundingBox(), null !== this.boundingSphere && this.computeBoundingSphere(), this
            }, rotateX: function (e) {
                return Rt.makeRotationX(e), this.applyMatrix4(Rt), this
            }, rotateY: function (e) {
                return Rt.makeRotationY(e), this.applyMatrix4(Rt), this
            }, rotateZ: function (e) {
                return Rt.makeRotationZ(e), this.applyMatrix4(Rt), this
            }, translate: function (e, t, n) {
                return Rt.makeTranslation(e, t, n), this.applyMatrix4(Rt), this
            }, scale: function (e, t, n) {
                return Rt.makeScale(e, t, n), this.applyMatrix4(Rt), this
            }, lookAt: function (e) {
                return Pt.lookAt(e), Pt.updateMatrix(), this.applyMatrix4(Pt.matrix), this
            }, center: function () {
                return this.computeBoundingBox(), this.boundingBox.getCenter(Ct).negate(), this.translate(Ct.x, Ct.y, Ct.z), this
            }, setFromObject: function (e) {
                var t = e.geometry;
                if (e.isPoints || e.isLine) {
                    var n = new St(3 * t.vertices.length, 3), r = new St(3 * t.colors.length, 3);
                    if (this.setAttribute("position", n.copyVector3sArray(t.vertices)), this.setAttribute("color", r.copyColorsArray(t.colors)), t.lineDistances && t.lineDistances.length === t.vertices.length) {
                        var i = new St(t.lineDistances.length, 1);
                        this.setAttribute("lineDistance", i.copyArray(t.lineDistances))
                    }
                    null !== t.boundingSphere && (this.boundingSphere = t.boundingSphere.clone()), null !== t.boundingBox && (this.boundingBox = t.boundingBox.clone())
                } else e.isMesh && t && t.isGeometry && this.fromGeometry(t);
                return this
            }, setFromPoints: function (e) {
                for (var t = [], n = 0, r = e.length; n < r; n++) {
                    var i = e[n];
                    t.push(i.x, i.y, i.z || 0)
                }
                return this.setAttribute("position", new St(t, 3)), this
            }, updateFromObject: function (e) {
                var t, n = e.geometry;
                if (e.isMesh) {
                    var r = n.__directGeometry;
                    if (!0 === n.elementsNeedUpdate && (r = void 0, n.elementsNeedUpdate = !1), void 0 === r) return this.fromGeometry(n);
                    r.verticesNeedUpdate = n.verticesNeedUpdate, r.normalsNeedUpdate = n.normalsNeedUpdate, r.colorsNeedUpdate = n.colorsNeedUpdate, r.uvsNeedUpdate = n.uvsNeedUpdate, r.groupsNeedUpdate = n.groupsNeedUpdate, n.verticesNeedUpdate = !1, n.normalsNeedUpdate = !1, n.colorsNeedUpdate = !1, n.uvsNeedUpdate = !1, n.groupsNeedUpdate = !1, n = r
                }
                return !0 === n.verticesNeedUpdate && (void 0 !== (t = this.attributes.position) && (t.copyVector3sArray(n.vertices), t.needsUpdate = !0), n.verticesNeedUpdate = !1), !0 === n.normalsNeedUpdate && (void 0 !== (t = this.attributes.normal) && (t.copyVector3sArray(n.normals), t.needsUpdate = !0), n.normalsNeedUpdate = !1), !0 === n.colorsNeedUpdate && (void 0 !== (t = this.attributes.color) && (t.copyColorsArray(n.colors), t.needsUpdate = !0), n.colorsNeedUpdate = !1), n.uvsNeedUpdate && (void 0 !== (t = this.attributes.uv) && (t.copyVector2sArray(n.uvs), t.needsUpdate = !0), n.uvsNeedUpdate = !1), n.lineDistancesNeedUpdate && (void 0 !== (t = this.attributes.lineDistance) && (t.copyArray(n.lineDistances), t.needsUpdate = !0), n.lineDistancesNeedUpdate = !1), n.groupsNeedUpdate && (n.computeGroups(e.geometry), this.groups = n.groups, n.groupsNeedUpdate = !1), this
            }, fromGeometry: function (e) {
                return e.__directGeometry = (new Et).fromGeometry(e), this.fromDirectGeometry(e.__directGeometry)
            }, fromDirectGeometry: function (e) {
                var t = new Float32Array(3 * e.vertices.length);
                if (this.setAttribute("position", new vt(t, 3).copyVector3sArray(e.vertices)), e.normals.length > 0) {
                    var n = new Float32Array(3 * e.normals.length);
                    this.setAttribute("normal", new vt(n, 3).copyVector3sArray(e.normals))
                }
                if (e.colors.length > 0) {
                    var r = new Float32Array(3 * e.colors.length);
                    this.setAttribute("color", new vt(r, 3).copyColorsArray(e.colors))
                }
                if (e.uvs.length > 0) {
                    var i = new Float32Array(2 * e.uvs.length);
                    this.setAttribute("uv", new vt(i, 2).copyVector2sArray(e.uvs))
                }
                if (e.uvs2.length > 0) {
                    var a = new Float32Array(2 * e.uvs2.length);
                    this.setAttribute("uv2", new vt(a, 2).copyVector2sArray(e.uvs2))
                }
                for (var o in this.groups = e.groups, e.morphTargets) {
                    for (var s = [], c = e.morphTargets[o], l = 0, u = c.length; l < u; l++) {
                        var h = c[l], p = new St(3 * h.data.length, 3);
                        p.name = h.name, s.push(p.copyVector3sArray(h.data))
                    }
                    this.morphAttributes[o] = s
                }
                if (e.skinIndices.length > 0) {
                    var d = new St(4 * e.skinIndices.length, 4);
                    this.setAttribute("skinIndex", d.copyVector4sArray(e.skinIndices))
                }
                if (e.skinWeights.length > 0) {
                    var f = new St(4 * e.skinWeights.length, 4);
                    this.setAttribute("skinWeight", f.copyVector4sArray(e.skinWeights))
                }
                return null !== e.boundingSphere && (this.boundingSphere = e.boundingSphere.clone()), null !== e.boundingBox && (this.boundingBox = e.boundingBox.clone()), this
            }, computeBoundingBox: function () {
                null === this.boundingBox && (this.boundingBox = new Ce);
                var e = this.attributes.position, t = this.morphAttributes.position;
                if (void 0 !== e) {
                    if (this.boundingBox.setFromBufferAttribute(e), t) for (var n = 0, r = t.length; n < r; n++) {
                        var i = t[n];
                        Ot.setFromBufferAttribute(i), this.morphTargetsRelative ? (Nt.addVectors(this.boundingBox.min, Ot.min), this.boundingBox.expandByPoint(Nt), Nt.addVectors(this.boundingBox.max, Ot.max), this.boundingBox.expandByPoint(Nt)) : (this.boundingBox.expandByPoint(Ot.min), this.boundingBox.expandByPoint(Ot.max))
                    }
                } else this.boundingBox.makeEmpty();
                (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this)
            }, computeBoundingSphere: function () {
                null === this.boundingSphere && (this.boundingSphere = new Ne);
                var e = this.attributes.position, t = this.morphAttributes.position;
                if (e) {
                    var n = this.boundingSphere.center;
                    if (Ot.setFromBufferAttribute(e), t) for (var r = 0, i = t.length; r < i; r++) {
                        var a = t[r];
                        It.setFromBufferAttribute(a), this.morphTargetsRelative ? (Nt.addVectors(Ot.min, It.min), Ot.expandByPoint(Nt), Nt.addVectors(Ot.max, It.max), Ot.expandByPoint(Nt)) : (Ot.expandByPoint(It.min), Ot.expandByPoint(It.max))
                    }
                    Ot.getCenter(n);
                    var o = 0;
                    for (r = 0, i = e.count; r < i; r++) Nt.fromBufferAttribute(e, r), o = Math.max(o, n.distanceToSquared(Nt));
                    if (t) for (r = 0, i = t.length; r < i; r++) {
                        a = t[r];
                        for (var s = this.morphTargetsRelative, c = 0, l = a.count; c < l; c++) Nt.fromBufferAttribute(a, c), s && (Ct.fromBufferAttribute(e, c), Nt.add(Ct)), o = Math.max(o, n.distanceToSquared(Nt))
                    }
                    this.boundingSphere.radius = Math.sqrt(o), isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this)
                }
            }, computeFaceNormals: function () {
            }, computeVertexNormals: function () {
                var e = this.index, t = this.attributes;
                if (t.position) {
                    var n = t.position.array;
                    if (void 0 === t.normal) this.setAttribute("normal", new vt(new Float32Array(n.length), 3)); else for (var r = t.normal.array, i = 0, a = r.length; i < a; i++) r[i] = 0;
                    var o, s, c, l = t.normal.array, u = new V, h = new V, p = new V, d = new V, f = new V;
                    if (e) {
                        var m = e.array;
                        for (i = 0, a = e.count; i < a; i += 3) o = 3 * m[i + 0], s = 3 * m[i + 1], c = 3 * m[i + 2], u.fromArray(n, o), h.fromArray(n, s), p.fromArray(n, c), d.subVectors(p, h), f.subVectors(u, h), d.cross(f), l[o] += d.x, l[o + 1] += d.y, l[o + 2] += d.z, l[s] += d.x, l[s + 1] += d.y, l[s + 2] += d.z, l[c] += d.x, l[c + 1] += d.y, l[c + 2] += d.z
                    } else for (i = 0, a = n.length; i < a; i += 9) u.fromArray(n, i), h.fromArray(n, i + 3), p.fromArray(n, i + 6), d.subVectors(p, h), f.subVectors(u, h), d.cross(f), l[i] = d.x, l[i + 1] = d.y, l[i + 2] = d.z, l[i + 3] = d.x, l[i + 4] = d.y, l[i + 5] = d.z, l[i + 6] = d.x, l[i + 7] = d.y, l[i + 8] = d.z;
                    this.normalizeNormals(), t.normal.needsUpdate = !0
                }
            }, merge: function (e, t) {
                if (e && e.isBufferGeometry) {
                    void 0 === t && (t = 0, console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));
                    var n = this.attributes;
                    for (var r in n) if (void 0 !== e.attributes[r]) for (var i = n[r].array, a = e.attributes[r], o = a.array, s = a.itemSize * t, c = Math.min(o.length, i.length - s), l = 0, u = s; l < c; l++, u++) i[u] = o[l];
                    return this
                }
                console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", e)
            }, normalizeNormals: function () {
                for (var e = this.attributes.normal, t = 0, n = e.count; t < n; t++) Nt.x = e.getX(t), Nt.y = e.getY(t), Nt.z = e.getZ(t), Nt.normalize(), e.setXYZ(t, Nt.x, Nt.y, Nt.z)
            }, toNonIndexed: function () {
                function e(e, t) {
                    for (var n = e.array, r = e.itemSize, i = e.normalized, a = new n.constructor(t.length * r), o = 0, s = 0, c = 0, l = t.length; c < l; c++) {
                        o = t[c] * r;
                        for (var u = 0; u < r; u++) a[s++] = n[o++]
                    }
                    return new vt(a, r, i)
                }

                if (null === this.index) return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."), this;
                var t = new Dt, n = this.index.array, r = this.attributes;
                for (var i in r) {
                    var a = e(r[i], n);
                    t.setAttribute(i, a)
                }
                var o = this.morphAttributes;
                for (i in o) {
                    for (var s = [], c = o[i], l = 0, u = c.length; l < u; l++) {
                        a = e(c[l], n);
                        s.push(a)
                    }
                    t.morphAttributes[i] = s
                }
                t.morphTargetsRelative = this.morphTargetsRelative;
                for (var h = this.groups, p = (l = 0, h.length); l < p; l++) {
                    var d = h[l];
                    t.addGroup(d.start, d.count, d.materialIndex)
                }
                return t
            }, toJSON: function () {
                var e = {metadata: {version: 4.5, type: "BufferGeometry", generator: "BufferGeometry.toJSON"}};
                if (e.uuid = this.uuid, e.type = this.type, "" !== this.name && (e.name = this.name), Object.keys(this.userData).length > 0 && (e.userData = this.userData), void 0 !== this.parameters) {
                    var t = this.parameters;
                    for (var n in t) void 0 !== t[n] && (e[n] = t[n]);
                    return e
                }
                e.data = {attributes: {}};
                var r = this.index;
                null !== r && (e.data.index = {
                    type: r.array.constructor.name,
                    array: Array.prototype.slice.call(r.array)
                });
                var i = this.attributes;
                for (var n in i) {
                    var a = (p = i[n]).toJSON();
                    "" !== p.name && (a.name = p.name), e.data.attributes[n] = a
                }
                var o = {}, s = !1;
                for (var n in this.morphAttributes) {
                    for (var c = this.morphAttributes[n], l = [], u = 0, h = c.length; u < h; u++) {
                        var p;
                        a = (p = c[u]).toJSON();
                        "" !== p.name && (a.name = p.name), l.push(a)
                    }
                    l.length > 0 && (o[n] = l, s = !0)
                }
                s && (e.data.morphAttributes = o, e.data.morphTargetsRelative = this.morphTargetsRelative);
                var d = this.groups;
                d.length > 0 && (e.data.groups = JSON.parse(JSON.stringify(d)));
                var f = this.boundingSphere;
                return null !== f && (e.data.boundingSphere = {center: f.center.toArray(), radius: f.radius}), e
            }, clone: function () {
                return (new Dt).copy(this)
            }, copy: function (e) {
                var t, n, r;
                this.index = null, this.attributes = {}, this.morphAttributes = {}, this.groups = [], this.boundingBox = null, this.boundingSphere = null, this.name = e.name;
                var i = e.index;
                null !== i && this.setIndex(i.clone());
                var a = e.attributes;
                for (t in a) {
                    var o = a[t];
                    this.setAttribute(t, o.clone())
                }
                var s = e.morphAttributes;
                for (t in s) {
                    var c = [], l = s[t];
                    for (n = 0, r = l.length; n < r; n++) c.push(l[n].clone());
                    this.morphAttributes[t] = c
                }
                this.morphTargetsRelative = e.morphTargetsRelative;
                var u = e.groups;
                for (n = 0, r = u.length; n < r; n++) {
                    var h = u[n];
                    this.addGroup(h.start, h.count, h.materialIndex)
                }
                var p = e.boundingBox;
                null !== p && (this.boundingBox = p.clone());
                var d = e.boundingSphere;
                return null !== d && (this.boundingSphere = d.clone()), this.drawRange.start = e.drawRange.start, this.drawRange.count = e.drawRange.count, this.userData = e.userData, this
            }, dispose: function () {
                this.dispatchEvent({type: "dispose"})
            }
        });
        var Ut = new Q, zt = new ke, Ft = new Ne, Bt = new V, Ht = new V, Gt = new V, kt = new V, jt = new V,
            Vt = new V, Wt = new V, qt = new V, Xt = new V, Yt = new I, Jt = new I, Zt = new I, Kt = new V, Qt = new V;

        function $t(e, t) {
            ve.call(this), this.type = "Mesh", this.geometry = void 0 !== e ? e : new Dt, this.material = void 0 !== t ? t : new ft, this.updateMorphTargets()
        }

        function en(e, t, n, r, i, a, s, c) {
            if (null === (1 === t.side ? r.intersectTriangle(s, a, i, !0, c) : r.intersectTriangle(i, a, s, t.side !== o, c))) return null;
            Qt.copy(c), Qt.applyMatrix4(e.matrixWorld);
            var l = n.ray.origin.distanceTo(Qt);
            return l < n.near || l > n.far ? null : {distance: l, point: Qt.clone(), object: e}
        }

        function tn(e, t, n, r, i, a, o, s, c, l, u, h) {
            Bt.fromBufferAttribute(i, l), Ht.fromBufferAttribute(i, u), Gt.fromBufferAttribute(i, h);
            var p = e.morphTargetInfluences;
            if (t.morphTargets && a && p) {
                Wt.set(0, 0, 0), qt.set(0, 0, 0), Xt.set(0, 0, 0);
                for (var d = 0, f = a.length; d < f; d++) {
                    var m = p[d], v = a[d];
                    0 !== m && (kt.fromBufferAttribute(v, l), jt.fromBufferAttribute(v, u), Vt.fromBufferAttribute(v, h), o ? (Wt.addScaledVector(kt, m), qt.addScaledVector(jt, m), Xt.addScaledVector(Vt, m)) : (Wt.addScaledVector(kt.sub(Bt), m), qt.addScaledVector(jt.sub(Ht), m), Xt.addScaledVector(Vt.sub(Gt), m)))
                }
                Bt.add(Wt), Ht.add(qt), Gt.add(Xt)
            }
            e.isSkinnedMesh && (e.boneTransform(l, Bt), e.boneTransform(u, Ht), e.boneTransform(h, Gt));
            var g = en(e, t, n, r, Bt, Ht, Gt, Kt);
            if (g) {
                s && (Yt.fromBufferAttribute(s, l), Jt.fromBufferAttribute(s, u), Zt.fromBufferAttribute(s, h), g.uv = rt.getUV(Kt, Bt, Ht, Gt, Yt, Jt, Zt, new I)), c && (Yt.fromBufferAttribute(c, l), Jt.fromBufferAttribute(c, u), Zt.fromBufferAttribute(c, h), g.uv2 = rt.getUV(Kt, Bt, Ht, Gt, Yt, Jt, Zt, new I));
                var y = new ht(l, u, h);
                rt.getNormal(Bt, Ht, Gt, y.normal), g.face = y
            }
            return g
        }

        $t.prototype = Object.assign(Object.create(ve.prototype), {
            constructor: $t, isMesh: !0, copy: function (e) {
                return ve.prototype.copy.call(this, e), void 0 !== e.morphTargetInfluences && (this.morphTargetInfluences = e.morphTargetInfluences.slice()), void 0 !== e.morphTargetDictionary && (this.morphTargetDictionary = Object.assign({}, e.morphTargetDictionary)), this
            }, updateMorphTargets: function () {
                var e, t, n, r = this.geometry;
                if (r.isBufferGeometry) {
                    var i = r.morphAttributes, a = Object.keys(i);
                    if (a.length > 0) {
                        var o = i[a[0]];
                        if (void 0 !== o) for (this.morphTargetInfluences = [], this.morphTargetDictionary = {}, e = 0, t = o.length; e < t; e++) n = o[e].name || String(e), this.morphTargetInfluences.push(0), this.morphTargetDictionary[n] = e
                    }
                } else {
                    var s = r.morphTargets;
                    void 0 !== s && s.length > 0 && console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")
                }
            }, raycast: function (e, t) {
                var n, r = this.geometry, i = this.material, a = this.matrixWorld;
                if (void 0 !== i && (null === r.boundingSphere && r.computeBoundingSphere(), Ft.copy(r.boundingSphere), Ft.applyMatrix4(a), !1 !== e.ray.intersectsSphere(Ft) && (Ut.getInverse(a), zt.copy(e.ray).applyMatrix4(Ut), null === r.boundingBox || !1 !== zt.intersectsBox(r.boundingBox)))) if (r.isBufferGeometry) {
                    var o, s, c, l, u, h, p, d, f, m = r.index, v = r.attributes.position,
                        g = r.morphAttributes.position, y = r.morphTargetsRelative, x = r.attributes.uv,
                        b = r.attributes.uv2, _ = r.groups, w = r.drawRange;
                    if (null !== m) if (Array.isArray(i)) for (l = 0, h = _.length; l < h; l++) for (f = i[(d = _[l]).materialIndex], u = Math.max(d.start, w.start), p = Math.min(d.start + d.count, w.start + w.count); u < p; u += 3) o = m.getX(u), s = m.getX(u + 1), c = m.getX(u + 2), (n = tn(this, f, e, zt, v, g, y, x, b, o, s, c)) && (n.faceIndex = Math.floor(u / 3), n.face.materialIndex = d.materialIndex, t.push(n)); else for (l = Math.max(0, w.start), h = Math.min(m.count, w.start + w.count); l < h; l += 3) o = m.getX(l), s = m.getX(l + 1), c = m.getX(l + 2), (n = tn(this, i, e, zt, v, g, y, x, b, o, s, c)) && (n.faceIndex = Math.floor(l / 3), t.push(n)); else if (void 0 !== v) if (Array.isArray(i)) for (l = 0, h = _.length; l < h; l++) for (f = i[(d = _[l]).materialIndex], u = Math.max(d.start, w.start), p = Math.min(d.start + d.count, w.start + w.count); u < p; u += 3) (n = tn(this, f, e, zt, v, g, y, x, b, o = u, s = u + 1, c = u + 2)) && (n.faceIndex = Math.floor(u / 3), n.face.materialIndex = d.materialIndex, t.push(n)); else for (l = Math.max(0, w.start), h = Math.min(v.count, w.start + w.count); l < h; l += 3) (n = tn(this, i, e, zt, v, g, y, x, b, o = l, s = l + 1, c = l + 2)) && (n.faceIndex = Math.floor(l / 3), t.push(n))
                } else if (r.isGeometry) {
                    var M, S, T, E, A = Array.isArray(i), L = r.vertices, R = r.faces, P = r.faceVertexUvs[0];
                    P.length > 0 && (E = P);
                    for (var C = 0, O = R.length; C < O; C++) {
                        var N = R[C], D = A ? i[N.materialIndex] : i;
                        if (void 0 !== D && (M = L[N.a], S = L[N.b], T = L[N.c], n = en(this, D, e, zt, M, S, T, Kt))) {
                            if (E && E[C]) {
                                var U = E[C];
                                Yt.copy(U[0]), Jt.copy(U[1]), Zt.copy(U[2]), n.uv = rt.getUV(Kt, M, S, T, Yt, Jt, Zt, new I)
                            }
                            n.face = N, n.faceIndex = C, t.push(n)
                        }
                    }
                }
            }, clone: function () {
                return new this.constructor(this.geometry, this.material).copy(this)
            }
        });
        var nn = 0, rn = new Q, an = new ve, on = new V;

        function sn() {
            Object.defineProperty(this, "id", {value: nn += 2}), this.uuid = O.generateUUID(), this.name = "", this.type = "Geometry", this.vertices = [], this.colors = [], this.faces = [], this.faceVertexUvs = [[]], this.morphTargets = [], this.morphNormals = [], this.skinWeights = [], this.skinIndices = [], this.lineDistances = [], this.boundingBox = null, this.boundingSphere = null, this.elementsNeedUpdate = !1, this.verticesNeedUpdate = !1, this.uvsNeedUpdate = !1, this.normalsNeedUpdate = !1, this.colorsNeedUpdate = !1, this.lineDistancesNeedUpdate = !1, this.groupsNeedUpdate = !1
        }

        sn.prototype = Object.assign(Object.create(L.prototype), {
            constructor: sn, isGeometry: !0, applyMatrix4: function (e) {
                for (var t = (new N).getNormalMatrix(e), n = 0, r = this.vertices.length; n < r; n++) {
                    this.vertices[n].applyMatrix4(e)
                }
                for (n = 0, r = this.faces.length; n < r; n++) {
                    var i = this.faces[n];
                    i.normal.applyMatrix3(t).normalize();
                    for (var a = 0, o = i.vertexNormals.length; a < o; a++) i.vertexNormals[a].applyMatrix3(t).normalize()
                }
                return null !== this.boundingBox && this.computeBoundingBox(), null !== this.boundingSphere && this.computeBoundingSphere(), this.verticesNeedUpdate = !0, this.normalsNeedUpdate = !0, this
            }, rotateX: function (e) {
                return rn.makeRotationX(e), this.applyMatrix4(rn), this
            }, rotateY: function (e) {
                return rn.makeRotationY(e), this.applyMatrix4(rn), this
            }, rotateZ: function (e) {
                return rn.makeRotationZ(e), this.applyMatrix4(rn), this
            }, translate: function (e, t, n) {
                return rn.makeTranslation(e, t, n), this.applyMatrix4(rn), this
            }, scale: function (e, t, n) {
                return rn.makeScale(e, t, n), this.applyMatrix4(rn), this
            }, lookAt: function (e) {
                return an.lookAt(e), an.updateMatrix(), this.applyMatrix4(an.matrix), this
            }, fromBufferGeometry: function (e) {
                var t = this, n = null !== e.index ? e.index.array : void 0, r = e.attributes;
                if (void 0 === r.position) return console.error("THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion."), this;
                var i = r.position.array, a = void 0 !== r.normal ? r.normal.array : void 0,
                    o = void 0 !== r.color ? r.color.array : void 0, s = void 0 !== r.uv ? r.uv.array : void 0,
                    c = void 0 !== r.uv2 ? r.uv2.array : void 0;
                void 0 !== c && (this.faceVertexUvs[1] = []);
                for (var l = 0; l < i.length; l += 3) t.vertices.push((new V).fromArray(i, l)), void 0 !== o && t.colors.push((new st).fromArray(o, l));

                function u(e, n, r, i) {
                    var l = void 0 === o ? [] : [t.colors[e].clone(), t.colors[n].clone(), t.colors[r].clone()],
                        u = new ht(e, n, r, void 0 === a ? [] : [(new V).fromArray(a, 3 * e), (new V).fromArray(a, 3 * n), (new V).fromArray(a, 3 * r)], l, i);
                    t.faces.push(u), void 0 !== s && t.faceVertexUvs[0].push([(new I).fromArray(s, 2 * e), (new I).fromArray(s, 2 * n), (new I).fromArray(s, 2 * r)]), void 0 !== c && t.faceVertexUvs[1].push([(new I).fromArray(c, 2 * e), (new I).fromArray(c, 2 * n), (new I).fromArray(c, 2 * r)])
                }

                var h = e.groups;
                if (h.length > 0) for (l = 0; l < h.length; l++) for (var p = h[l], d = p.start, f = d, m = d + p.count; f < m; f += 3) void 0 !== n ? u(n[f], n[f + 1], n[f + 2], p.materialIndex) : u(f, f + 1, f + 2, p.materialIndex); else if (void 0 !== n) for (l = 0; l < n.length; l += 3) u(n[l], n[l + 1], n[l + 2]); else for (l = 0; l < i.length / 3; l += 3) u(l, l + 1, l + 2);
                return this.computeFaceNormals(), null !== e.boundingBox && (this.boundingBox = e.boundingBox.clone()), null !== e.boundingSphere && (this.boundingSphere = e.boundingSphere.clone()), this
            }, center: function () {
                return this.computeBoundingBox(), this.boundingBox.getCenter(on).negate(), this.translate(on.x, on.y, on.z), this
            }, normalize: function () {
                this.computeBoundingSphere();
                var e = this.boundingSphere.center, t = this.boundingSphere.radius, n = 0 === t ? 1 : 1 / t, r = new Q;
                return r.set(n, 0, 0, -n * e.x, 0, n, 0, -n * e.y, 0, 0, n, -n * e.z, 0, 0, 0, 1), this.applyMatrix4(r), this
            }, computeFaceNormals: function () {
                for (var e = new V, t = new V, n = 0, r = this.faces.length; n < r; n++) {
                    var i = this.faces[n], a = this.vertices[i.a], o = this.vertices[i.b], s = this.vertices[i.c];
                    e.subVectors(s, o), t.subVectors(a, o), e.cross(t), e.normalize(), i.normal.copy(e)
                }
            }, computeVertexNormals: function (e) {
                var t, n, r, i, a, o;
                for (void 0 === e && (e = !0), o = new Array(this.vertices.length), t = 0, n = this.vertices.length; t < n; t++) o[t] = new V;
                if (e) {
                    var s, c, l, u = new V, h = new V;
                    for (r = 0, i = this.faces.length; r < i; r++) a = this.faces[r], s = this.vertices[a.a], c = this.vertices[a.b], l = this.vertices[a.c], u.subVectors(l, c), h.subVectors(s, c), u.cross(h), o[a.a].add(u), o[a.b].add(u), o[a.c].add(u)
                } else for (this.computeFaceNormals(), r = 0, i = this.faces.length; r < i; r++) o[(a = this.faces[r]).a].add(a.normal), o[a.b].add(a.normal), o[a.c].add(a.normal);
                for (t = 0, n = this.vertices.length; t < n; t++) o[t].normalize();
                for (r = 0, i = this.faces.length; r < i; r++) {
                    var p = (a = this.faces[r]).vertexNormals;
                    3 === p.length ? (p[0].copy(o[a.a]), p[1].copy(o[a.b]), p[2].copy(o[a.c])) : (p[0] = o[a.a].clone(), p[1] = o[a.b].clone(), p[2] = o[a.c].clone())
                }
                this.faces.length > 0 && (this.normalsNeedUpdate = !0)
            }, computeFlatVertexNormals: function () {
                var e, t, n;
                for (this.computeFaceNormals(), e = 0, t = this.faces.length; e < t; e++) {
                    var r = (n = this.faces[e]).vertexNormals;
                    3 === r.length ? (r[0].copy(n.normal), r[1].copy(n.normal), r[2].copy(n.normal)) : (r[0] = n.normal.clone(), r[1] = n.normal.clone(), r[2] = n.normal.clone())
                }
                this.faces.length > 0 && (this.normalsNeedUpdate = !0)
            }, computeMorphNormals: function () {
                var e, t, n, r, i;
                for (n = 0, r = this.faces.length; n < r; n++) for ((i = this.faces[n]).__originalFaceNormal ? i.__originalFaceNormal.copy(i.normal) : i.__originalFaceNormal = i.normal.clone(), i.__originalVertexNormals || (i.__originalVertexNormals = []), e = 0, t = i.vertexNormals.length; e < t; e++) i.__originalVertexNormals[e] ? i.__originalVertexNormals[e].copy(i.vertexNormals[e]) : i.__originalVertexNormals[e] = i.vertexNormals[e].clone();
                var a = new sn;
                for (a.faces = this.faces, e = 0, t = this.morphTargets.length; e < t; e++) {
                    if (!this.morphNormals[e]) {
                        this.morphNormals[e] = {}, this.morphNormals[e].faceNormals = [], this.morphNormals[e].vertexNormals = [];
                        var o = this.morphNormals[e].faceNormals, s = this.morphNormals[e].vertexNormals;
                        for (n = 0, r = this.faces.length; n < r; n++) c = new V, l = {
                            a: new V,
                            b: new V,
                            c: new V
                        }, o.push(c), s.push(l)
                    }
                    var c, l, u = this.morphNormals[e];
                    for (a.vertices = this.morphTargets[e].vertices, a.computeFaceNormals(), a.computeVertexNormals(), n = 0, r = this.faces.length; n < r; n++) i = this.faces[n], c = u.faceNormals[n], l = u.vertexNormals[n], c.copy(i.normal), l.a.copy(i.vertexNormals[0]), l.b.copy(i.vertexNormals[1]), l.c.copy(i.vertexNormals[2])
                }
                for (n = 0, r = this.faces.length; n < r; n++) (i = this.faces[n]).normal = i.__originalFaceNormal, i.vertexNormals = i.__originalVertexNormals
            }, computeBoundingBox: function () {
                null === this.boundingBox && (this.boundingBox = new Ce), this.boundingBox.setFromPoints(this.vertices)
            }, computeBoundingSphere: function () {
                null === this.boundingSphere && (this.boundingSphere = new Ne), this.boundingSphere.setFromPoints(this.vertices)
            }, merge: function (e, t, n) {
                if (e && e.isGeometry) {
                    var r, i = this.vertices.length, a = this.vertices, o = e.vertices, s = this.faces, c = e.faces,
                        l = this.colors, u = e.colors;
                    void 0 === n && (n = 0), void 0 !== t && (r = (new N).getNormalMatrix(t));
                    for (var h = 0, p = o.length; h < p; h++) {
                        var d = o[h].clone();
                        void 0 !== t && d.applyMatrix4(t), a.push(d)
                    }
                    for (h = 0, p = u.length; h < p; h++) l.push(u[h].clone());
                    for (h = 0, p = c.length; h < p; h++) {
                        var f, m, v, g = c[h], y = g.vertexNormals, x = g.vertexColors;
                        (f = new ht(g.a + i, g.b + i, g.c + i)).normal.copy(g.normal), void 0 !== r && f.normal.applyMatrix3(r).normalize();
                        for (var b = 0, _ = y.length; b < _; b++) m = y[b].clone(), void 0 !== r && m.applyMatrix3(r).normalize(), f.vertexNormals.push(m);
                        f.color.copy(g.color);
                        for (b = 0, _ = x.length; b < _; b++) v = x[b], f.vertexColors.push(v.clone());
                        f.materialIndex = g.materialIndex + n, s.push(f)
                    }
                    for (h = 0, p = e.faceVertexUvs.length; h < p; h++) {
                        var w = e.faceVertexUvs[h];
                        void 0 === this.faceVertexUvs[h] && (this.faceVertexUvs[h] = []);
                        for (b = 0, _ = w.length; b < _; b++) {
                            for (var M = w[b], S = [], T = 0, E = M.length; T < E; T++) S.push(M[T].clone());
                            this.faceVertexUvs[h].push(S)
                        }
                    }
                } else console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.", e)
            }, mergeMesh: function (e) {
                e && e.isMesh ? (e.matrixAutoUpdate && e.updateMatrix(), this.merge(e.geometry, e.matrix)) : console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.", e)
            }, mergeVertices: function () {
                var e, t, n, r, i, a, o, s, c = {}, l = [], u = [], h = Math.pow(10, 4);
                for (n = 0, r = this.vertices.length; n < r; n++) e = this.vertices[n], void 0 === c[t = Math.round(e.x * h) + "_" + Math.round(e.y * h) + "_" + Math.round(e.z * h)] ? (c[t] = n, l.push(this.vertices[n]), u[n] = l.length - 1) : u[n] = u[c[t]];
                var p = [];
                for (n = 0, r = this.faces.length; n < r; n++) {
                    (i = this.faces[n]).a = u[i.a], i.b = u[i.b], i.c = u[i.c], a = [i.a, i.b, i.c];
                    for (var d = 0; d < 3; d++) if (a[d] === a[(d + 1) % 3]) {
                        p.push(n);
                        break
                    }
                }
                for (n = p.length - 1; n >= 0; n--) {
                    var f = p[n];
                    for (this.faces.splice(f, 1), o = 0, s = this.faceVertexUvs.length; o < s; o++) this.faceVertexUvs[o].splice(f, 1)
                }
                var m = this.vertices.length - l.length;
                return this.vertices = l, m
            }, setFromPoints: function (e) {
                this.vertices = [];
                for (var t = 0, n = e.length; t < n; t++) {
                    var r = e[t];
                    this.vertices.push(new V(r.x, r.y, r.z || 0))
                }
                return this
            }, sortFacesByMaterialIndex: function () {
                for (var e = this.faces, t = e.length, n = 0; n < t; n++) e[n]._id = n;
                e.sort((function (e, t) {
                    return e.materialIndex - t.materialIndex
                }));
                var r, i, a = this.faceVertexUvs[0], o = this.faceVertexUvs[1];
                a && a.length === t && (r = []), o && o.length === t && (i = []);
                for (n = 0; n < t; n++) {
                    var s = e[n]._id;
                    r && r.push(a[s]), i && i.push(o[s])
                }
                r && (this.faceVertexUvs[0] = r), i && (this.faceVertexUvs[1] = i)
            }, toJSON: function () {
                var e = {metadata: {version: 4.5, type: "Geometry", generator: "Geometry.toJSON"}};
                if (e.uuid = this.uuid, e.type = this.type, "" !== this.name && (e.name = this.name), void 0 !== this.parameters) {
                    var t = this.parameters;
                    for (var n in t) void 0 !== t[n] && (e[n] = t[n]);
                    return e
                }
                for (var r = [], i = 0; i < this.vertices.length; i++) {
                    var a = this.vertices[i];
                    r.push(a.x, a.y, a.z)
                }
                var o = [], s = [], c = {}, l = [], u = {}, h = [], p = {};
                for (i = 0; i < this.faces.length; i++) {
                    var d = this.faces[i], f = void 0 !== this.faceVertexUvs[0][i], m = d.normal.length() > 0,
                        v = d.vertexNormals.length > 0, g = 1 !== d.color.r || 1 !== d.color.g || 1 !== d.color.b,
                        y = d.vertexColors.length > 0, x = 0;
                    if (x = M(x, 0, 0), x = M(x, 1, !0), x = M(x, 2, !1), x = M(x, 3, f), x = M(x, 4, m), x = M(x, 5, v), x = M(x, 6, g), x = M(x, 7, y), o.push(x), o.push(d.a, d.b, d.c), o.push(d.materialIndex), f) {
                        var b = this.faceVertexUvs[0][i];
                        o.push(E(b[0]), E(b[1]), E(b[2]))
                    }
                    if (m && o.push(S(d.normal)), v) {
                        var _ = d.vertexNormals;
                        o.push(S(_[0]), S(_[1]), S(_[2]))
                    }
                    if (g && o.push(T(d.color)), y) {
                        var w = d.vertexColors;
                        o.push(T(w[0]), T(w[1]), T(w[2]))
                    }
                }

                function M(e, t, n) {
                    return n ? e | 1 << t : e & ~(1 << t)
                }

                function S(e) {
                    var t = e.x.toString() + e.y.toString() + e.z.toString();
                    return void 0 !== c[t] || (c[t] = s.length / 3, s.push(e.x, e.y, e.z)), c[t]
                }

                function T(e) {
                    var t = e.r.toString() + e.g.toString() + e.b.toString();
                    return void 0 !== u[t] || (u[t] = l.length, l.push(e.getHex())), u[t]
                }

                function E(e) {
                    var t = e.x.toString() + e.y.toString();
                    return void 0 !== p[t] || (p[t] = h.length / 2, h.push(e.x, e.y)), p[t]
                }

                return e.data = {}, e.data.vertices = r, e.data.normals = s, l.length > 0 && (e.data.colors = l), h.length > 0 && (e.data.uvs = [h]), e.data.faces = o, e
            }, clone: function () {
                return (new sn).copy(this)
            }, copy: function (e) {
                var t, n, r, i, a, o;
                this.vertices = [], this.colors = [], this.faces = [], this.faceVertexUvs = [[]], this.morphTargets = [], this.morphNormals = [], this.skinWeights = [], this.skinIndices = [], this.lineDistances = [], this.boundingBox = null, this.boundingSphere = null, this.name = e.name;
                var s = e.vertices;
                for (t = 0, n = s.length; t < n; t++) this.vertices.push(s[t].clone());
                var c = e.colors;
                for (t = 0, n = c.length; t < n; t++) this.colors.push(c[t].clone());
                var l = e.faces;
                for (t = 0, n = l.length; t < n; t++) this.faces.push(l[t].clone());
                for (t = 0, n = e.faceVertexUvs.length; t < n; t++) {
                    var u = e.faceVertexUvs[t];
                    for (void 0 === this.faceVertexUvs[t] && (this.faceVertexUvs[t] = []), r = 0, i = u.length; r < i; r++) {
                        var h = u[r], p = [];
                        for (a = 0, o = h.length; a < o; a++) {
                            var d = h[a];
                            p.push(d.clone())
                        }
                        this.faceVertexUvs[t].push(p)
                    }
                }
                var f = e.morphTargets;
                for (t = 0, n = f.length; t < n; t++) {
                    var m = {};
                    if (m.name = f[t].name, void 0 !== f[t].vertices) for (m.vertices = [], r = 0, i = f[t].vertices.length; r < i; r++) m.vertices.push(f[t].vertices[r].clone());
                    if (void 0 !== f[t].normals) for (m.normals = [], r = 0, i = f[t].normals.length; r < i; r++) m.normals.push(f[t].normals[r].clone());
                    this.morphTargets.push(m)
                }
                var v = e.morphNormals;
                for (t = 0, n = v.length; t < n; t++) {
                    var g = {};
                    if (void 0 !== v[t].vertexNormals) for (g.vertexNormals = [], r = 0, i = v[t].vertexNormals.length; r < i; r++) {
                        var y = v[t].vertexNormals[r], x = {};
                        x.a = y.a.clone(), x.b = y.b.clone(), x.c = y.c.clone(), g.vertexNormals.push(x)
                    }
                    if (void 0 !== v[t].faceNormals) for (g.faceNormals = [], r = 0, i = v[t].faceNormals.length; r < i; r++) g.faceNormals.push(v[t].faceNormals[r].clone());
                    this.morphNormals.push(g)
                }
                var b = e.skinWeights;
                for (t = 0, n = b.length; t < n; t++) this.skinWeights.push(b[t].clone());
                var _ = e.skinIndices;
                for (t = 0, n = _.length; t < n; t++) this.skinIndices.push(_[t].clone());
                var w = e.lineDistances;
                for (t = 0, n = w.length; t < n; t++) this.lineDistances.push(w[t]);
                var M = e.boundingBox;
                null !== M && (this.boundingBox = M.clone());
                var S = e.boundingSphere;
                return null !== S && (this.boundingSphere = S.clone()), this.elementsNeedUpdate = e.elementsNeedUpdate, this.verticesNeedUpdate = e.verticesNeedUpdate, this.uvsNeedUpdate = e.uvsNeedUpdate, this.normalsNeedUpdate = e.normalsNeedUpdate, this.colorsNeedUpdate = e.colorsNeedUpdate, this.lineDistancesNeedUpdate = e.lineDistancesNeedUpdate, this.groupsNeedUpdate = e.groupsNeedUpdate, this
            }, dispose: function () {
                this.dispatchEvent({type: "dispose"})
            }
        });

        class cn extends Dt {
            constructor(e, t, n, r, i, a) {
                super(), this.type = "BoxBufferGeometry", this.parameters = {
                    width: e,
                    height: t,
                    depth: n,
                    widthSegments: r,
                    heightSegments: i,
                    depthSegments: a
                };
                const o = this;
                e = e || 1, t = t || 1, n = n || 1, r = Math.floor(r) || 1, i = Math.floor(i) || 1, a = Math.floor(a) || 1;
                const s = [], c = [], l = [], u = [];
                let h = 0, p = 0;

                function d(e, t, n, r, i, a, d, f, m, v, g) {
                    const y = a / m, x = d / v, b = a / 2, _ = d / 2, w = f / 2, M = m + 1, S = v + 1;
                    let T = 0, E = 0;
                    const A = new V;
                    for (let a = 0; a < S; a++) {
                        const o = a * x - _;
                        for (let s = 0; s < M; s++) {
                            const h = s * y - b;
                            A[e] = h * r, A[t] = o * i, A[n] = w, c.push(A.x, A.y, A.z), A[e] = 0, A[t] = 0, A[n] = f > 0 ? 1 : -1, l.push(A.x, A.y, A.z), u.push(s / m), u.push(1 - a / v), T += 1
                        }
                    }
                    for (let e = 0; e < v; e++) for (let t = 0; t < m; t++) {
                        const n = h + t + M * e, r = h + t + M * (e + 1), i = h + (t + 1) + M * (e + 1),
                            a = h + (t + 1) + M * e;
                        s.push(n, r, a), s.push(r, i, a), E += 6
                    }
                    o.addGroup(p, E, g), p += E, h += T
                }

                d("z", "y", "x", -1, -1, n, t, e, a, i, 0), d("z", "y", "x", 1, -1, n, t, -e, a, i, 1), d("x", "z", "y", 1, 1, e, n, t, r, a, 2), d("x", "z", "y", 1, -1, e, n, -t, r, a, 3), d("x", "y", "z", 1, -1, e, t, n, r, i, 4), d("x", "y", "z", -1, -1, e, t, -n, r, i, 5), this.setIndex(s), this.setAttribute("position", new St(c, 3)), this.setAttribute("normal", new St(l, 3)), this.setAttribute("uv", new St(u, 2))
            }
        }

        function ln(e) {
            var t = {};
            for (var n in e) for (var r in t[n] = {}, e[n]) {
                var i = e[n][r];
                i && (i.isColor || i.isMatrix3 || i.isMatrix4 || i.isVector2 || i.isVector3 || i.isVector4 || i.isTexture) ? t[n][r] = i.clone() : Array.isArray(i) ? t[n][r] = i.slice() : t[n][r] = i
            }
            return t
        }

        function un(e) {
            for (var t = {}, n = 0; n < e.length; n++) {
                var r = ln(e[n]);
                for (var i in r) t[i] = r[i]
            }
            return t
        }

        var hn = {clone: ln, merge: un};

        function pn(e) {
            dt.call(this), this.type = "ShaderMaterial", this.defines = {}, this.uniforms = {}, this.vertexShader = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", this.fragmentShader = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}", this.linewidth = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.fog = !1, this.lights = !1, this.clipping = !1, this.skinning = !1, this.morphTargets = !1, this.morphNormals = !1, this.extensions = {
                derivatives: !1,
                fragDepth: !1,
                drawBuffers: !1,
                shaderTextureLOD: !1
            }, this.defaultAttributeValues = {
                color: [1, 1, 1],
                uv: [0, 0],
                uv2: [0, 0]
            }, this.index0AttributeName = void 0, this.uniformsNeedUpdate = !1, void 0 !== e && (void 0 !== e.attributes && console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."), this.setValues(e))
        }

        function dn() {
            ve.call(this), this.type = "Camera", this.matrixWorldInverse = new Q, this.projectionMatrix = new Q, this.projectionMatrixInverse = new Q
        }

        function fn(e, t, n, r) {
            dn.call(this), this.type = "PerspectiveCamera", this.fov = void 0 !== e ? e : 50, this.zoom = 1, this.near = void 0 !== n ? n : .1, this.far = void 0 !== r ? r : 2e3, this.focus = 10, this.aspect = void 0 !== t ? t : 1, this.view = null, this.filmGauge = 35, this.filmOffset = 0, this.updateProjectionMatrix()
        }

        pn.prototype = Object.create(dt.prototype), pn.prototype.constructor = pn, pn.prototype.isShaderMaterial = !0, pn.prototype.copy = function (e) {
            return dt.prototype.copy.call(this, e), this.fragmentShader = e.fragmentShader, this.vertexShader = e.vertexShader, this.uniforms = ln(e.uniforms), this.defines = Object.assign({}, e.defines), this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.lights = e.lights, this.clipping = e.clipping, this.skinning = e.skinning, this.morphTargets = e.morphTargets, this.morphNormals = e.morphNormals, this.extensions = Object.assign({}, e.extensions), this
        }, pn.prototype.toJSON = function (e) {
            var t = dt.prototype.toJSON.call(this, e);
            for (var n in t.uniforms = {}, this.uniforms) {
                var r = this.uniforms[n].value;
                r && r.isTexture ? t.uniforms[n] = {
                    type: "t",
                    value: r.toJSON(e).uuid
                } : r && r.isColor ? t.uniforms[n] = {
                    type: "c",
                    value: r.getHex()
                } : r && r.isVector2 ? t.uniforms[n] = {
                    type: "v2",
                    value: r.toArray()
                } : r && r.isVector3 ? t.uniforms[n] = {
                    type: "v3",
                    value: r.toArray()
                } : r && r.isVector4 ? t.uniforms[n] = {
                    type: "v4",
                    value: r.toArray()
                } : r && r.isMatrix3 ? t.uniforms[n] = {
                    type: "m3",
                    value: r.toArray()
                } : r && r.isMatrix4 ? t.uniforms[n] = {type: "m4", value: r.toArray()} : t.uniforms[n] = {value: r}
            }
            Object.keys(this.defines).length > 0 && (t.defines = this.defines), t.vertexShader = this.vertexShader, t.fragmentShader = this.fragmentShader;
            var i = {};
            for (var a in this.extensions) !0 === this.extensions[a] && (i[a] = !0);
            return Object.keys(i).length > 0 && (t.extensions = i), t
        }, dn.prototype = Object.assign(Object.create(ve.prototype), {
            constructor: dn,
            isCamera: !0,
            copy: function (e, t) {
                return ve.prototype.copy.call(this, e, t), this.matrixWorldInverse.copy(e.matrixWorldInverse), this.projectionMatrix.copy(e.projectionMatrix), this.projectionMatrixInverse.copy(e.projectionMatrixInverse), this
            },
            getWorldDirection: function (e) {
                void 0 === e && (console.warn("THREE.Camera: .getWorldDirection() target is now required"), e = new V), this.updateMatrixWorld(!0);
                var t = this.matrixWorld.elements;
                return e.set(-t[8], -t[9], -t[10]).normalize()
            },
            updateMatrixWorld: function (e) {
                ve.prototype.updateMatrixWorld.call(this, e), this.matrixWorldInverse.getInverse(this.matrixWorld)
            },
            updateWorldMatrix: function (e, t) {
                ve.prototype.updateWorldMatrix.call(this, e, t), this.matrixWorldInverse.getInverse(this.matrixWorld)
            },
            clone: function () {
                return (new this.constructor).copy(this)
            }
        }), fn.prototype = Object.assign(Object.create(dn.prototype), {
            constructor: fn, isPerspectiveCamera: !0, copy: function (e, t) {
                return dn.prototype.copy.call(this, e, t), this.fov = e.fov, this.zoom = e.zoom, this.near = e.near, this.far = e.far, this.focus = e.focus, this.aspect = e.aspect, this.view = null === e.view ? null : Object.assign({}, e.view), this.filmGauge = e.filmGauge, this.filmOffset = e.filmOffset, this
            }, setFocalLength: function (e) {
                var t = .5 * this.getFilmHeight() / e;
                this.fov = 2 * O.RAD2DEG * Math.atan(t), this.updateProjectionMatrix()
            }, getFocalLength: function () {
                var e = Math.tan(.5 * O.DEG2RAD * this.fov);
                return .5 * this.getFilmHeight() / e
            }, getEffectiveFOV: function () {
                return 2 * O.RAD2DEG * Math.atan(Math.tan(.5 * O.DEG2RAD * this.fov) / this.zoom)
            }, getFilmWidth: function () {
                return this.filmGauge * Math.min(this.aspect, 1)
            }, getFilmHeight: function () {
                return this.filmGauge / Math.max(this.aspect, 1)
            }, setViewOffset: function (e, t, n, r, i, a) {
                this.aspect = e / t, null === this.view && (this.view = {
                    enabled: !0,
                    fullWidth: 1,
                    fullHeight: 1,
                    offsetX: 0,
                    offsetY: 0,
                    width: 1,
                    height: 1
                }), this.view.enabled = !0, this.view.fullWidth = e, this.view.fullHeight = t, this.view.offsetX = n, this.view.offsetY = r, this.view.width = i, this.view.height = a, this.updateProjectionMatrix()
            }, clearViewOffset: function () {
                null !== this.view && (this.view.enabled = !1), this.updateProjectionMatrix()
            }, updateProjectionMatrix: function () {
                var e = this.near, t = e * Math.tan(.5 * O.DEG2RAD * this.fov) / this.zoom, n = 2 * t,
                    r = this.aspect * n, i = -.5 * r, a = this.view;
                if (null !== this.view && this.view.enabled) {
                    var o = a.fullWidth, s = a.fullHeight;
                    i += a.offsetX * r / o, t -= a.offsetY * n / s, r *= a.width / o, n *= a.height / s
                }
                var c = this.filmOffset;
                0 !== c && (i += e * c / this.getFilmWidth()), this.projectionMatrix.makePerspective(i, i + r, t, t - n, e, this.far), this.projectionMatrixInverse.getInverse(this.projectionMatrix)
            }, toJSON: function (e) {
                var t = ve.prototype.toJSON.call(this, e);
                return t.object.fov = this.fov, t.object.zoom = this.zoom, t.object.near = this.near, t.object.far = this.far, t.object.focus = this.focus, t.object.aspect = this.aspect, null !== this.view && (t.object.view = Object.assign({}, this.view)), t.object.filmGauge = this.filmGauge, t.object.filmOffset = this.filmOffset, t
            }
        });

        function mn(e, t, n) {
            if (ve.call(this), this.type = "CubeCamera", !0 === n.isWebGLCubeRenderTarget) {
                this.renderTarget = n;
                var r = new fn(90, 1, e, t);
                r.layers = this.layers, r.up.set(0, -1, 0), r.lookAt(new V(1, 0, 0)), this.add(r);
                var i = new fn(90, 1, e, t);
                i.layers = this.layers, i.up.set(0, -1, 0), i.lookAt(new V(-1, 0, 0)), this.add(i);
                var a = new fn(90, 1, e, t);
                a.layers = this.layers, a.up.set(0, 0, 1), a.lookAt(new V(0, 1, 0)), this.add(a);
                var o = new fn(90, 1, e, t);
                o.layers = this.layers, o.up.set(0, 0, -1), o.lookAt(new V(0, -1, 0)), this.add(o);
                var s = new fn(90, 1, e, t);
                s.layers = this.layers, s.up.set(0, -1, 0), s.lookAt(new V(0, 0, 1)), this.add(s);
                var c = new fn(90, 1, e, t);
                c.layers = this.layers, c.up.set(0, -1, 0), c.lookAt(new V(0, 0, -1)), this.add(c), this.update = function (e, t) {
                    null === this.parent && this.updateMatrixWorld();
                    var l = e.xr.enabled, u = e.getRenderTarget();
                    e.xr.enabled = !1;
                    var h = n.texture.generateMipmaps;
                    n.texture.generateMipmaps = !1, e.setRenderTarget(n, 0), e.render(t, r), e.setRenderTarget(n, 1), e.render(t, i), e.setRenderTarget(n, 2), e.render(t, a), e.setRenderTarget(n, 3), e.render(t, o), e.setRenderTarget(n, 4), e.render(t, s), n.texture.generateMipmaps = h, e.setRenderTarget(n, 5), e.render(t, c), e.setRenderTarget(u), e.xr.enabled = l
                }, this.clear = function (e, t, r, i) {
                    for (var a = e.getRenderTarget(), o = 0; o < 6; o++) e.setRenderTarget(n, o), e.clear(t, r, i);
                    e.setRenderTarget(a)
                }
            } else console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.")
        }

        function vn(e, t, n) {
            Number.isInteger(t) && (console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )"), t = n), B.call(this, e, e, t)
        }

        function gn(e, t, n, r, i, a, o, s, c, l, u, p) {
            z.call(this, null, a, o, s, c, l, r, i, u, p), this.image = {
                data: e || null,
                width: t || 1,
                height: n || 1
            }, this.magFilter = void 0 !== c ? c : h, this.minFilter = void 0 !== l ? l : h, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1, this.needsUpdate = !0
        }

        mn.prototype = Object.create(ve.prototype), mn.prototype.constructor = mn, vn.prototype = Object.create(B.prototype), vn.prototype.constructor = vn, vn.prototype.isWebGLCubeRenderTarget = !0, vn.prototype.fromEquirectangularTexture = function (e, t) {
            this.texture.type = t.type, this.texture.format = t.format, this.texture.encoding = t.encoding;
            var n = new ge, r = {
                uniforms: {tEquirect: {value: null}},
                vertexShader: ["varying vec3 vWorldDirection;", "vec3 transformDirection( in vec3 dir, in mat4 matrix ) {", "\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );", "}", "void main() {", "\tvWorldDirection = transformDirection( position, modelMatrix );", "\t#include <begin_vertex>", "\t#include <project_vertex>", "}"].join("\n"),
                fragmentShader: ["uniform sampler2D tEquirect;", "varying vec3 vWorldDirection;", "#include <common>", "void main() {", "\tvec3 direction = normalize( vWorldDirection );", "\tvec2 sampleUV = equirectUv( direction );", "\tgl_FragColor = texture2D( tEquirect, sampleUV );", "}"].join("\n")
            }, i = new pn({
                type: "CubemapFromEquirect",
                uniforms: ln(r.uniforms),
                vertexShader: r.vertexShader,
                fragmentShader: r.fragmentShader,
                side: 1,
                blending: 0
            });
            i.uniforms.tEquirect.value = t;
            var a = new $t(new cn(5, 5, 5), i);
            return n.add(a), new mn(1, 10, this).update(e, n), a.geometry.dispose(), a.material.dispose(), this
        }, gn.prototype = Object.create(z.prototype), gn.prototype.constructor = gn, gn.prototype.isDataTexture = !0;
        var yn = new Ne, xn = new V;

        function bn(e, t, n, r, i, a) {
            this.planes = [void 0 !== e ? e : new qe, void 0 !== t ? t : new qe, void 0 !== n ? n : new qe, void 0 !== r ? r : new qe, void 0 !== i ? i : new qe, void 0 !== a ? a : new qe]
        }

        Object.assign(bn.prototype, {
            set: function (e, t, n, r, i, a) {
                var o = this.planes;
                return o[0].copy(e), o[1].copy(t), o[2].copy(n), o[3].copy(r), o[4].copy(i), o[5].copy(a), this
            }, clone: function () {
                return (new this.constructor).copy(this)
            }, copy: function (e) {
                for (var t = this.planes, n = 0; n < 6; n++) t[n].copy(e.planes[n]);
                return this
            }, setFromProjectionMatrix: function (e) {
                var t = this.planes, n = e.elements, r = n[0], i = n[1], a = n[2], o = n[3], s = n[4], c = n[5],
                    l = n[6], u = n[7], h = n[8], p = n[9], d = n[10], f = n[11], m = n[12], v = n[13], g = n[14],
                    y = n[15];
                return t[0].setComponents(o - r, u - s, f - h, y - m).normalize(), t[1].setComponents(o + r, u + s, f + h, y + m).normalize(), t[2].setComponents(o + i, u + c, f + p, y + v).normalize(), t[3].setComponents(o - i, u - c, f - p, y - v).normalize(), t[4].setComponents(o - a, u - l, f - d, y - g).normalize(), t[5].setComponents(o + a, u + l, f + d, y + g).normalize(), this
            }, intersectsObject: function (e) {
                var t = e.geometry;
                return null === t.boundingSphere && t.computeBoundingSphere(), yn.copy(t.boundingSphere).applyMatrix4(e.matrixWorld), this.intersectsSphere(yn)
            }, intersectsSprite: function (e) {
                return yn.center.set(0, 0, 0), yn.radius = .7071067811865476, yn.applyMatrix4(e.matrixWorld), this.intersectsSphere(yn)
            }, intersectsSphere: function (e) {
                for (var t = this.planes, n = e.center, r = -e.radius, i = 0; i < 6; i++) {
                    if (t[i].distanceToPoint(n) < r) return !1
                }
                return !0
            }, intersectsBox: function (e) {
                for (var t = this.planes, n = 0; n < 6; n++) {
                    var r = t[n];
                    if (xn.x = r.normal.x > 0 ? e.max.x : e.min.x, xn.y = r.normal.y > 0 ? e.max.y : e.min.y, xn.z = r.normal.z > 0 ? e.max.z : e.min.z, r.distanceToPoint(xn) < 0) return !1
                }
                return !0
            }, containsPoint: function (e) {
                for (var t = this.planes, n = 0; n < 6; n++) if (t[n].distanceToPoint(e) < 0) return !1;
                return !0
            }
        });
        var _n = {
            common: {
                diffuse: {value: new st(15658734)},
                opacity: {value: 1},
                map: {value: null},
                uvTransform: {value: new N},
                uv2Transform: {value: new N},
                alphaMap: {value: null}
            },
            specularmap: {specularMap: {value: null}},
            envmap: {
                envMap: {value: null},
                flipEnvMap: {value: -1},
                reflectivity: {value: 1},
                refractionRatio: {value: .98},
                maxMipLevel: {value: 0}
            },
            aomap: {aoMap: {value: null}, aoMapIntensity: {value: 1}},
            lightmap: {lightMap: {value: null}, lightMapIntensity: {value: 1}},
            emissivemap: {emissiveMap: {value: null}},
            bumpmap: {bumpMap: {value: null}, bumpScale: {value: 1}},
            normalmap: {normalMap: {value: null}, normalScale: {value: new I(1, 1)}},
            displacementmap: {
                displacementMap: {value: null},
                displacementScale: {value: 1},
                displacementBias: {value: 0}
            },
            roughnessmap: {roughnessMap: {value: null}},
            metalnessmap: {metalnessMap: {value: null}},
            gradientmap: {gradientMap: {value: null}},
            fog: {
                fogDensity: {value: 25e-5},
                fogNear: {value: 1},
                fogFar: {value: 2e3},
                fogColor: {value: new st(16777215)}
            },
            lights: {
                ambientLightColor: {value: []},
                lightProbe: {value: []},
                directionalLights: {value: [], properties: {direction: {}, color: {}}},
                directionalLightShadows: {value: [], properties: {shadowBias: {}, shadowRadius: {}, shadowMapSize: {}}},
                directionalShadowMap: {value: []},
                directionalShadowMatrix: {value: []},
                spotLights: {
                    value: [],
                    properties: {
                        color: {},
                        position: {},
                        direction: {},
                        distance: {},
                        coneCos: {},
                        penumbraCos: {},
                        decay: {}
                    }
                },
                spotLightShadows: {value: [], properties: {shadowBias: {}, shadowRadius: {}, shadowMapSize: {}}},
                spotShadowMap: {value: []},
                spotShadowMatrix: {value: []},
                pointLights: {value: [], properties: {color: {}, position: {}, decay: {}, distance: {}}},
                pointLightShadows: {
                    value: [],
                    properties: {
                        shadowBias: {},
                        shadowRadius: {},
                        shadowMapSize: {},
                        shadowCameraNear: {},
                        shadowCameraFar: {}
                    }
                },
                pointShadowMap: {value: []},
                pointShadowMatrix: {value: []},
                hemisphereLights: {value: [], properties: {direction: {}, skyColor: {}, groundColor: {}}},
                rectAreaLights: {value: [], properties: {color: {}, position: {}, width: {}, height: {}}}
            },
            points: {
                diffuse: {value: new st(15658734)},
                opacity: {value: 1},
                size: {value: 1},
                scale: {value: 1},
                map: {value: null},
                alphaMap: {value: null},
                uvTransform: {value: new N}
            },
            sprite: {
                diffuse: {value: new st(15658734)},
                opacity: {value: 1},
                center: {value: new I(.5, .5)},
                rotation: {value: 0},
                map: {value: null},
                alphaMap: {value: null},
                uvTransform: {value: new N}
            }
        };

        function wn() {
            var e = null, t = !1, n = null;

            function r(i, a) {
                !1 !== t && (n(i, a), e.requestAnimationFrame(r))
            }

            return {
                start: function () {
                    !0 !== t && null !== n && (e.requestAnimationFrame(r), t = !0)
                }, stop: function () {
                    t = !1
                }, setAnimationLoop: function (e) {
                    n = e
                }, setContext: function (t) {
                    e = t
                }
            }
        }

        function Mn(e, t) {
            var n = t.isWebGL2, r = new WeakMap;
            return {
                get: function (e) {
                    return e.isInterleavedBufferAttribute && (e = e.data), r.get(e)
                }, remove: function (t) {
                    t.isInterleavedBufferAttribute && (t = t.data);
                    var n = r.get(t);
                    n && (e.deleteBuffer(n.buffer), r.delete(t))
                }, update: function (t, i) {
                    t.isInterleavedBufferAttribute && (t = t.data);
                    var a = r.get(t);
                    void 0 === a ? r.set(t, function (t, n) {
                        var r = t.array, i = t.usage, a = e.createBuffer();
                        e.bindBuffer(n, a), e.bufferData(n, r, i), t.onUploadCallback();
                        var o = 5126;
                        return r instanceof Float32Array ? o = 5126 : r instanceof Float64Array ? console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.") : r instanceof Uint16Array ? o = 5123 : r instanceof Int16Array ? o = 5122 : r instanceof Uint32Array ? o = 5125 : r instanceof Int32Array ? o = 5124 : r instanceof Int8Array ? o = 5120 : r instanceof Uint8Array && (o = 5121), {
                            buffer: a,
                            type: o,
                            bytesPerElement: r.BYTES_PER_ELEMENT,
                            version: t.version
                        }
                    }(t, i)) : a.version < t.version && (!function (t, r, i) {
                        var a = r.array, o = r.updateRange;
                        e.bindBuffer(i, t), -1 === o.count ? e.bufferSubData(i, 0, a) : (n ? e.bufferSubData(i, o.offset * a.BYTES_PER_ELEMENT, a, o.offset, o.count) : e.bufferSubData(i, o.offset * a.BYTES_PER_ELEMENT, a.subarray(o.offset, o.offset + o.count)), o.count = -1)
                    }(a.buffer, t, i), a.version = t.version)
                }
            }
        }

        function Sn(e, t, n, r) {
            sn.call(this), this.type = "PlaneGeometry", this.parameters = {
                width: e,
                height: t,
                widthSegments: n,
                heightSegments: r
            }, this.fromBufferGeometry(new Tn(e, t, n, r)), this.mergeVertices()
        }

        function Tn(e, t, n, r) {
            Dt.call(this), this.type = "PlaneBufferGeometry", this.parameters = {
                width: e,
                height: t,
                widthSegments: n,
                heightSegments: r
            };
            var i, a, o = (e = e || 1) / 2, s = (t = t || 1) / 2, c = Math.floor(n) || 1, l = Math.floor(r) || 1,
                u = c + 1, h = l + 1, p = e / c, d = t / l, f = [], m = [], v = [], g = [];
            for (a = 0; a < h; a++) {
                var y = a * d - s;
                for (i = 0; i < u; i++) {
                    var x = i * p - o;
                    m.push(x, -y, 0), v.push(0, 0, 1), g.push(i / c), g.push(1 - a / l)
                }
            }
            for (a = 0; a < l; a++) for (i = 0; i < c; i++) {
                var b = i + u * a, _ = i + u * (a + 1), w = i + 1 + u * (a + 1), M = i + 1 + u * a;
                f.push(b, _, M), f.push(_, w, M)
            }
            this.setIndex(f), this.setAttribute("position", new St(m, 3)), this.setAttribute("normal", new St(v, 3)), this.setAttribute("uv", new St(g, 2))
        }

        Sn.prototype = Object.create(sn.prototype), Sn.prototype.constructor = Sn, Tn.prototype = Object.create(Dt.prototype), Tn.prototype.constructor = Tn;
        var En = {
            alphamap_fragment: "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",
            alphamap_pars_fragment: "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",
            alphatest_fragment: "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif",
            aomap_fragment: "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif",
            aomap_pars_fragment: "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",
            begin_vertex: "vec3 transformed = vec3( position );",
            beginnormal_vertex: "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",
            bsdfs: "vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\treturn Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\n\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n\tfloat invAlpha  = 1.0 / roughness;\n\tfloat cos2h = NoH * NoH;\n\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 H = normalize( V + L );\n\tfloat dotNH = saturate( dot( N, H ) );\n\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif",
            bumpmap_pars_fragment: "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",
            clipping_planes_fragment: "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",
            clipping_planes_pars_fragment: "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",
            clipping_planes_pars_vertex: "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",
            clipping_planes_vertex: "#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",
            color_fragment: "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif",
            color_pars_fragment: "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",
            color_pars_vertex: "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",
            color_vertex: "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif",
            common: "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n  return m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}",
            cube_uv_reflection_fragment: "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_maxMipLevel 8.0\n#define cubeUV_minMipLevel 4.0\n#define cubeUV_maxTileSize 256.0\n#define cubeUV_minTileSize 16.0\nfloat getFace(vec3 direction) {\n    vec3 absDirection = abs(direction);\n    float face = -1.0;\n    if (absDirection.x > absDirection.z) {\n      if (absDirection.x > absDirection.y)\n        face = direction.x > 0.0 ? 0.0 : 3.0;\n      else\n        face = direction.y > 0.0 ? 1.0 : 4.0;\n    } else {\n      if (absDirection.z > absDirection.y)\n        face = direction.z > 0.0 ? 2.0 : 5.0;\n      else\n        face = direction.y > 0.0 ? 1.0 : 4.0;\n    }\n    return face;\n}\nvec2 getUV(vec3 direction, float face) {\n    vec2 uv;\n    if (face == 0.0) {\n      uv = vec2(direction.z, direction.y) / abs(direction.x);    } else if (face == 1.0) {\n      uv = vec2(-direction.x, -direction.z) / abs(direction.y);    } else if (face == 2.0) {\n      uv = vec2(-direction.x, direction.y) / abs(direction.z);    } else if (face == 3.0) {\n      uv = vec2(-direction.z, direction.y) / abs(direction.x);    } else if (face == 4.0) {\n      uv = vec2(-direction.x, direction.z) / abs(direction.y);    } else {\n      uv = vec2(direction.x, direction.y) / abs(direction.z);    }\n    return 0.5 * (uv + 1.0);\n}\nvec3 bilinearCubeUV(sampler2D envMap, vec3 direction, float mipInt) {\n  float face = getFace(direction);\n  float filterInt = max(cubeUV_minMipLevel - mipInt, 0.0);\n  mipInt = max(mipInt, cubeUV_minMipLevel);\n  float faceSize = exp2(mipInt);\n  float texelSize = 1.0 / (3.0 * cubeUV_maxTileSize);\n  vec2 uv = getUV(direction, face) * (faceSize - 1.0);\n  vec2 f = fract(uv);\n  uv += 0.5 - f;\n  if (face > 2.0) {\n    uv.y += faceSize;\n    face -= 3.0;\n  }\n  uv.x += face * faceSize;\n  if(mipInt < cubeUV_maxMipLevel){\n    uv.y += 2.0 * cubeUV_maxTileSize;\n  }\n  uv.y += filterInt * 2.0 * cubeUV_minTileSize;\n  uv.x += 3.0 * max(0.0, cubeUV_maxTileSize - 2.0 * faceSize);\n  uv *= texelSize;\n  vec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  uv.x += texelSize;\n  vec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  uv.y += texelSize;\n  vec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  uv.x -= texelSize;\n  vec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  vec3 tm = mix(tl, tr, f.x);\n  vec3 bm = mix(bl, br, f.x);\n  return mix(tm, bm, f.y);\n}\n#define r0 1.0\n#define v0 0.339\n#define m0 -2.0\n#define r1 0.8\n#define v1 0.276\n#define m1 -1.0\n#define r4 0.4\n#define v4 0.046\n#define m4 2.0\n#define r5 0.305\n#define v5 0.016\n#define m5 3.0\n#define r6 0.21\n#define v6 0.0038\n#define m6 4.0\nfloat roughnessToMip(float roughness) {\n  float mip = 0.0;\n  if (roughness >= r1) {\n    mip = (r0 - roughness) * (m1 - m0) / (r0 - r1) + m0;\n  } else if (roughness >= r4) {\n    mip = (r1 - roughness) * (m4 - m1) / (r1 - r4) + m1;\n  } else if (roughness >= r5) {\n    mip = (r4 - roughness) * (m5 - m4) / (r4 - r5) + m4;\n  } else if (roughness >= r6) {\n    mip = (r5 - roughness) * (m6 - m5) / (r5 - r6) + m5;\n  } else {\n    mip = -2.0 * log2(1.16 * roughness);  }\n  return mip;\n}\nvec4 textureCubeUV(sampler2D envMap, vec3 sampleDir, float roughness) {\n  float mip = clamp(roughnessToMip(roughness), m0, cubeUV_maxMipLevel);\n  float mipF = fract(mip);\n  float mipInt = floor(mip);\n  vec3 color0 = bilinearCubeUV(envMap, sampleDir, mipInt);\n  if (mipF == 0.0) {\n    return vec4(color0, 1.0);\n  } else {\n    vec3 color1 = bilinearCubeUV(envMap, sampleDir, mipInt + 1.0);\n    return vec4(mix(color0, color1, mipF), 1.0);\n  }\n}\n#endif",
            defaultnormal_vertex: "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",
            displacementmap_pars_vertex: "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",
            displacementmap_vertex: "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif",
            emissivemap_fragment: "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",
            emissivemap_pars_fragment: "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",
            encodings_fragment: "gl_FragColor = linearToOutputTexel( gl_FragColor );",
            encodings_pars_fragment: "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}",
            envmap_fragment: "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\t\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t}  else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec2 sampleUV = equirectUv( reflectVec );\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\t\tenvColor = envMapTexelToLinear( envColor );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",
            envmap_common_pars_fragment: "#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",
            envmap_pars_fragment: "#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",
            envmap_pars_vertex: "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",
            envmap_physical_pars_fragment: "#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t  vec3 reflectVec = reflect( -viewDir, normal );\n\t\t  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t#else\n\t\t  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV = equirectUv( reflectVec );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif",
            envmap_vertex: "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) { \n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",
            fog_vertex: "#ifdef USE_FOG\n\tfogDepth = -mvPosition.z;\n#endif",
            fog_pars_vertex: "#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif",
            fog_fragment: "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",
            fog_pars_fragment: "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",
            gradientmap_pars_fragment: "#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn texture2D( gradientMap, coord ).rgb;\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}",
            lightmap_fragment: "#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n#endif",
            lightmap_pars_fragment: "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",
            lights_lambert_vertex: "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif",
            lights_pars_begin: "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif",
            lights_toon_fragment: "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",
            lights_toon_pars_fragment: "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct ToonMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)",
            lights_phong_fragment: "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",
            lights_phong_pars_fragment: "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",
            lights_physical_fragment: "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\n#ifdef REFLECTIVITY\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheen;\n#endif",
            lights_physical_pars_fragment: "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n#ifdef CLEARCOAT\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tvec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = ccDotNL * directLight.color;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tccIrradiance *= PI;\n\t\t#endif\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n\t\t\tmaterial.specularRoughness,\n\t\t\tdirectLight.direction,\n\t\t\tgeometry,\n\t\t\tmaterial.sheenColor\n\t\t);\n\t#else\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n\t#endif\n\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t\tfloat ccDotNL = ccDotNV;\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\tfloat clearcoatInv = 1.0 - clearcoatDHR;\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",
            lights_fragment_begin: "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",
            lights_fragment_maps: "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n\t#ifdef CLEARCOAT\n\t\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n\t#endif\n#endif",
            lights_fragment_end: "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif",
            logdepthbuf_fragment: "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",
            logdepthbuf_pars_fragment: "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",
            logdepthbuf_pars_vertex: "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",
            logdepthbuf_vertex: "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",
            map_fragment: "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif",
            map_pars_fragment: "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",
            map_particle_fragment: "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",
            map_particle_pars_fragment: "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",
            metalnessmap_fragment: "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",
            metalnessmap_pars_fragment: "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",
            morphnormal_vertex: "#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n#endif",
            morphtarget_pars_vertex: "#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",
            morphtarget_vertex: "#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t#endif\n#endif",
            normal_fragment_begin: "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;",
            normal_fragment_maps: "#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif",
            normalmap_pars_fragment: "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\tvec3 N = normalize( surf_norm );\n\t\tmat3 tsn = mat3( S, T, N );\n\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif",
            clearcoat_normal_fragment_begin: "#ifdef CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif",
            clearcoat_normal_fragment_maps: "#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\n\t#endif\n#endif",
            clearcoat_pars_fragment: "#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif",
            packing: "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",
            premultiplied_alpha_fragment: "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",
            project_vertex: "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",
            dithering_fragment: "#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",
            dithering_pars_fragment: "#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",
            roughnessmap_fragment: "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",
            roughnessmap_pars_fragment: "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",
            shadowmap_pars_fragment: "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",
            shadowmap_pars_vertex: "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",
            shadowmap_vertex: "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif",
            shadowmask_pars_fragment: "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",
            skinbase_vertex: "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",
            skinning_pars_vertex: "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif",
            skinning_vertex: "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",
            skinnormal_vertex: "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",
            specularmap_fragment: "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",
            specularmap_pars_fragment: "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",
            tonemapping_fragment: "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",
            tonemapping_pars_fragment: "#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\n}",
            uv_pars_fragment: "#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif",
            uv_pars_vertex: "#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif",
            uv_vertex: "#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",
            uv2_pars_fragment: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",
            uv2_pars_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif",
            uv2_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif",
            worldpos_vertex: "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",
            background_frag: "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",
            background_vert: "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",
            cube_frag: "#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",
            cube_vert: "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",
            depth_frag: "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",
            depth_vert: "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",
            distanceRGBA_frag: "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",
            distanceRGBA_vert: "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",
            equirect_frag: "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",
            equirect_vert: "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",
            linedashed_frag: "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",
            linedashed_vert: "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",
            meshbasic_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
            meshbasic_vert: "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",
            meshlambert_frag: "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
            meshlambert_vert: "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
            meshmatcap_frag: "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
            meshmatcap_vert: "#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",
            meshtoon_frag: "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
            meshtoon_vert: "#define TOON\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
            meshphong_frag: "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
            meshphong_vert: "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
            meshphysical_frag: "#define STANDARD\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n\t#define TRANSPARENCY\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef TRANSPARENCY\n\tuniform float transparency;\n#endif\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#ifdef TRANSPARENCY\n\t\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\n\t#endif\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
            meshphysical_vert: "#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
            normal_frag: "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}",
            normal_vert: "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",
            points_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",
            points_vert: "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",
            shadow_frag: "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",
            shadow_vert: "#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
            sprite_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",
            sprite_vert: "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}"
        }, An = {
            basic: {
                uniforms: un([_n.common, _n.specularmap, _n.envmap, _n.aomap, _n.lightmap, _n.fog]),
                vertexShader: En.meshbasic_vert,
                fragmentShader: En.meshbasic_frag
            },
            lambert: {
                uniforms: un([_n.common, _n.specularmap, _n.envmap, _n.aomap, _n.lightmap, _n.emissivemap, _n.fog, _n.lights, {emissive: {value: new st(0)}}]),
                vertexShader: En.meshlambert_vert,
                fragmentShader: En.meshlambert_frag
            },
            phong: {
                uniforms: un([_n.common, _n.specularmap, _n.envmap, _n.aomap, _n.lightmap, _n.emissivemap, _n.bumpmap, _n.normalmap, _n.displacementmap, _n.fog, _n.lights, {
                    emissive: {value: new st(0)},
                    specular: {value: new st(1118481)},
                    shininess: {value: 30}
                }]), vertexShader: En.meshphong_vert, fragmentShader: En.meshphong_frag
            },
            standard: {
                uniforms: un([_n.common, _n.envmap, _n.aomap, _n.lightmap, _n.emissivemap, _n.bumpmap, _n.normalmap, _n.displacementmap, _n.roughnessmap, _n.metalnessmap, _n.fog, _n.lights, {
                    emissive: {value: new st(0)},
                    roughness: {value: 1},
                    metalness: {value: 0},
                    envMapIntensity: {value: 1}
                }]), vertexShader: En.meshphysical_vert, fragmentShader: En.meshphysical_frag
            },
            toon: {
                uniforms: un([_n.common, _n.specularmap, _n.aomap, _n.lightmap, _n.emissivemap, _n.bumpmap, _n.normalmap, _n.displacementmap, _n.gradientmap, _n.fog, _n.lights, {
                    emissive: {value: new st(0)},
                    specular: {value: new st(1118481)},
                    shininess: {value: 30}
                }]), vertexShader: En.meshtoon_vert, fragmentShader: En.meshtoon_frag
            },
            matcap: {
                uniforms: un([_n.common, _n.bumpmap, _n.normalmap, _n.displacementmap, _n.fog, {matcap: {value: null}}]),
                vertexShader: En.meshmatcap_vert,
                fragmentShader: En.meshmatcap_frag
            },
            points: {uniforms: un([_n.points, _n.fog]), vertexShader: En.points_vert, fragmentShader: En.points_frag},
            dashed: {
                uniforms: un([_n.common, _n.fog, {
                    scale: {value: 1},
                    dashSize: {value: 1},
                    totalSize: {value: 2}
                }]), vertexShader: En.linedashed_vert, fragmentShader: En.linedashed_frag
            },
            depth: {
                uniforms: un([_n.common, _n.displacementmap]),
                vertexShader: En.depth_vert,
                fragmentShader: En.depth_frag
            },
            normal: {
                uniforms: un([_n.common, _n.bumpmap, _n.normalmap, _n.displacementmap, {opacity: {value: 1}}]),
                vertexShader: En.normal_vert,
                fragmentShader: En.normal_frag
            },
            sprite: {uniforms: un([_n.sprite, _n.fog]), vertexShader: En.sprite_vert, fragmentShader: En.sprite_frag},
            background: {
                uniforms: {uvTransform: {value: new N}, t2D: {value: null}},
                vertexShader: En.background_vert,
                fragmentShader: En.background_frag
            },
            cube: {
                uniforms: un([_n.envmap, {opacity: {value: 1}}]),
                vertexShader: En.cube_vert,
                fragmentShader: En.cube_frag
            },
            equirect: {
                uniforms: {tEquirect: {value: null}},
                vertexShader: En.equirect_vert,
                fragmentShader: En.equirect_frag
            },
            distanceRGBA: {
                uniforms: un([_n.common, _n.displacementmap, {
                    referencePosition: {value: new V},
                    nearDistance: {value: 1},
                    farDistance: {value: 1e3}
                }]), vertexShader: En.distanceRGBA_vert, fragmentShader: En.distanceRGBA_frag
            },
            shadow: {
                uniforms: un([_n.lights, _n.fog, {color: {value: new st(0)}, opacity: {value: 1}}]),
                vertexShader: En.shadow_vert,
                fragmentShader: En.shadow_frag
            }
        };

        function Ln(e, t, n, r) {
            var i, o, s = new st(0), c = 0, l = null, u = 0, h = null;

            function p(e, n) {
                t.buffers.color.setClear(e.r, e.g, e.b, n, r)
            }

            return {
                getClearColor: function () {
                    return s
                }, setClearColor: function (e, t) {
                    s.set(e), p(s, c = void 0 !== t ? t : 1)
                }, getClearAlpha: function () {
                    return c
                }, setClearAlpha: function (e) {
                    p(s, c = e)
                }, render: function (t, r, d, f) {
                    var m = r.background, v = e.xr, g = v.getSession && v.getSession();
                    if (g && "additive" === g.environmentBlendMode && (m = null), null === m ? p(s, c) : m && m.isColor && (p(m, 1), f = !0), (e.autoClear || f) && e.clear(e.autoClearColor, e.autoClearDepth, e.autoClearStencil), m && (m.isCubeTexture || m.isWebGLCubeRenderTarget || 306 === m.mapping)) {
                        void 0 === o && ((o = new $t(new cn(1, 1, 1), new pn({
                            type: "BackgroundCubeMaterial",
                            uniforms: ln(An.cube.uniforms),
                            vertexShader: An.cube.vertexShader,
                            fragmentShader: An.cube.fragmentShader,
                            side: 1,
                            depthTest: !1,
                            depthWrite: !1,
                            fog: !1
                        }))).geometry.deleteAttribute("normal"), o.geometry.deleteAttribute("uv"), o.onBeforeRender = function (e, t, n) {
                            this.matrixWorld.copyPosition(n.matrixWorld)
                        }, Object.defineProperty(o.material, "envMap", {
                            get: function () {
                                return this.uniforms.envMap.value
                            }
                        }), n.update(o));
                        var y = m.isWebGLCubeRenderTarget ? m.texture : m;
                        o.material.uniforms.envMap.value = y, o.material.uniforms.flipEnvMap.value = y.isCubeTexture ? -1 : 1, l === m && u === y.version && h === e.toneMapping || (o.material.needsUpdate = !0, l = m, u = y.version, h = e.toneMapping), t.unshift(o, o.geometry, o.material, 0, 0, null)
                    } else m && m.isTexture && (void 0 === i && ((i = new $t(new Tn(2, 2), new pn({
                        type: "BackgroundMaterial",
                        uniforms: ln(An.background.uniforms),
                        vertexShader: An.background.vertexShader,
                        fragmentShader: An.background.fragmentShader,
                        side: a,
                        depthTest: !1,
                        depthWrite: !1,
                        fog: !1
                    }))).geometry.deleteAttribute("normal"), Object.defineProperty(i.material, "map", {
                        get: function () {
                            return this.uniforms.t2D.value
                        }
                    }), n.update(i)), i.material.uniforms.t2D.value = m, !0 === m.matrixAutoUpdate && m.updateMatrix(), i.material.uniforms.uvTransform.value.copy(m.matrix), l === m && u === m.version && h === e.toneMapping || (i.material.needsUpdate = !0, l = m, u = m.version, h = e.toneMapping), t.unshift(i, i.geometry, i.material, 0, 0, null))
                }
            }
        }

        function Rn(e, t, n, r) {
            var i, a = r.isWebGL2;
            this.setMode = function (e) {
                i = e
            }, this.render = function (t, r) {
                e.drawArrays(i, t, r), n.update(r, i)
            }, this.renderInstances = function (r, o, s, c) {
                if (0 !== c) {
                    var l, u;
                    if (a) l = e, u = "drawArraysInstanced"; else if (u = "drawArraysInstancedANGLE", null === (l = t.get("ANGLE_instanced_arrays"))) return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
                    l[u](i, o, s, c), n.update(s, i, c)
                }
            }
        }

        function Pn(e, t, n) {
            var r;

            function i(t) {
                if ("highp" === t) {
                    if (e.getShaderPrecisionFormat(35633, 36338).precision > 0 && e.getShaderPrecisionFormat(35632, 36338).precision > 0) return "highp";
                    t = "mediump"
                }
                return "mediump" === t && e.getShaderPrecisionFormat(35633, 36337).precision > 0 && e.getShaderPrecisionFormat(35632, 36337).precision > 0 ? "mediump" : "lowp"
            }

            var a = "undefined" != typeof WebGL2RenderingContext && e instanceof WebGL2RenderingContext || "undefined" != typeof WebGL2ComputeRenderingContext && e instanceof WebGL2ComputeRenderingContext,
                o = void 0 !== n.precision ? n.precision : "highp", s = i(o);
            s !== o && (console.warn("THREE.WebGLRenderer:", o, "not supported, using", s, "instead."), o = s);
            var c = !0 === n.logarithmicDepthBuffer, l = e.getParameter(34930), u = e.getParameter(35660),
                h = e.getParameter(3379), p = e.getParameter(34076), d = e.getParameter(34921),
                f = e.getParameter(36347), m = e.getParameter(36348), v = e.getParameter(36349), g = u > 0,
                y = a || !!t.get("OES_texture_float");
            return {
                isWebGL2: a,
                getMaxAnisotropy: function () {
                    if (void 0 !== r) return r;
                    var n = t.get("EXT_texture_filter_anisotropic");
                    return r = null !== n ? e.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0
                },
                getMaxPrecision: i,
                precision: o,
                logarithmicDepthBuffer: c,
                maxTextures: l,
                maxVertexTextures: u,
                maxTextureSize: h,
                maxCubemapSize: p,
                maxAttributes: d,
                maxVertexUniforms: f,
                maxVaryings: m,
                maxFragmentUniforms: v,
                vertexTextures: g,
                floatFragmentTextures: y,
                floatVertexTextures: g && y,
                maxSamples: a ? e.getParameter(36183) : 0
            }
        }

        function Cn() {
            var e = this, t = null, n = 0, r = !1, i = !1, a = new qe, o = new N, s = {value: null, needsUpdate: !1};

            function c() {
                s.value !== t && (s.value = t, s.needsUpdate = n > 0), e.numPlanes = n, e.numIntersection = 0
            }

            function l(t, n, r, i) {
                var c = null !== t ? t.length : 0, l = null;
                if (0 !== c) {
                    if (l = s.value, !0 !== i || null === l) {
                        var u = r + 4 * c, h = n.matrixWorldInverse;
                        o.getNormalMatrix(h), (null === l || l.length < u) && (l = new Float32Array(u));
                        for (var p = 0, d = r; p !== c; ++p, d += 4) a.copy(t[p]).applyMatrix4(h, o), a.normal.toArray(l, d), l[d + 3] = a.constant
                    }
                    s.value = l, s.needsUpdate = !0
                }
                return e.numPlanes = c, e.numIntersection = 0, l
            }

            this.uniform = s, this.numPlanes = 0, this.numIntersection = 0, this.init = function (e, i, a) {
                var o = 0 !== e.length || i || 0 !== n || r;
                return r = i, t = l(e, a, 0), n = e.length, o
            }, this.beginShadows = function () {
                i = !0, l(null)
            }, this.endShadows = function () {
                i = !1, c()
            }, this.setState = function (e, a, o, u, h, p) {
                if (!r || null === e || 0 === e.length || i && !o) i ? l(null) : c(); else {
                    var d = i ? 0 : n, f = 4 * d, m = h.clippingState || null;
                    s.value = m, m = l(e, u, f, p);
                    for (var v = 0; v !== f; ++v) m[v] = t[v];
                    h.clippingState = m, this.numIntersection = a ? this.numPlanes : 0, this.numPlanes += d
                }
            }
        }

        function On(e) {
            var t = {};
            return {
                get: function (n) {
                    if (void 0 !== t[n]) return t[n];
                    var r;
                    switch (n) {
                        case"WEBGL_depth_texture":
                            r = e.getExtension("WEBGL_depth_texture") || e.getExtension("MOZ_WEBGL_depth_texture") || e.getExtension("WEBKIT_WEBGL_depth_texture");
                            break;
                        case"EXT_texture_filter_anisotropic":
                            r = e.getExtension("EXT_texture_filter_anisotropic") || e.getExtension("MOZ_EXT_texture_filter_anisotropic") || e.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
                            break;
                        case"WEBGL_compressed_texture_s3tc":
                            r = e.getExtension("WEBGL_compressed_texture_s3tc") || e.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || e.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
                            break;
                        case"WEBGL_compressed_texture_pvrtc":
                            r = e.getExtension("WEBGL_compressed_texture_pvrtc") || e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
                            break;
                        default:
                            r = e.getExtension(n)
                    }
                    return null === r && console.warn("THREE.WebGLRenderer: " + n + " extension not supported."), t[n] = r, r
                }
            }
        }

        function In(e, t, n) {
            var r = new WeakMap, i = new WeakMap;

            function a(e) {
                var o = e.target, s = r.get(o);
                for (var c in null !== s.index && t.remove(s.index), s.attributes) t.remove(s.attributes[c]);
                o.removeEventListener("dispose", a), r.delete(o);
                var l = i.get(s);
                l && (t.remove(l), i.delete(s)), n.memory.geometries--
            }

            function o(e) {
                var n = [], r = e.index, a = e.attributes.position, o = 0;
                if (null !== r) {
                    var s = r.array;
                    o = r.version;
                    for (var c = 0, l = s.length; c < l; c += 3) {
                        var u = s[c + 0], h = s[c + 1], p = s[c + 2];
                        n.push(u, h, h, p, p, u)
                    }
                } else {
                    s = a.array;
                    o = a.version;
                    for (c = 0, l = s.length / 3 - 1; c < l; c += 3) {
                        u = c + 0, h = c + 1, p = c + 2;
                        n.push(u, h, h, p, p, u)
                    }
                }
                var d = new (At(n) > 65535 ? Mt : _t)(n, 1);
                d.version = o, t.update(d, 34963);
                var f = i.get(e);
                f && t.remove(f), i.set(e, d)
            }

            return {
                get: function (e, t) {
                    var i = r.get(t);
                    return i || (t.addEventListener("dispose", a), t.isBufferGeometry ? i = t : t.isGeometry && (void 0 === t._bufferGeometry && (t._bufferGeometry = (new Dt).setFromObject(e)), i = t._bufferGeometry), r.set(t, i), n.memory.geometries++, i)
                }, update: function (e) {
                    var n = e.index, r = e.attributes;
                    for (var i in null !== n && t.update(n, 34963), r) t.update(r[i], 34962);
                    var a = e.morphAttributes;
                    for (var i in a) for (var o = a[i], s = 0, c = o.length; s < c; s++) t.update(o[s], 34962)
                }, getWireframeAttribute: function (e) {
                    var t = i.get(e);
                    if (t) {
                        var n = e.index;
                        null !== n && t.version < n.version && o(e)
                    } else o(e);
                    return i.get(e)
                }
            }
        }

        function Nn(e, t, n, r) {
            var i, a, o, s = r.isWebGL2;
            this.setMode = function (e) {
                i = e
            }, this.setIndex = function (e) {
                a = e.type, o = e.bytesPerElement
            }, this.render = function (t, r) {
                e.drawElements(i, r, a, t * o), n.update(r, i)
            }, this.renderInstances = function (r, c, l, u) {
                if (0 !== u) {
                    var h, p;
                    if (s) h = e, p = "drawElementsInstanced"; else if (p = "drawElementsInstancedANGLE", null === (h = t.get("ANGLE_instanced_arrays"))) return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
                    h[p](i, l, a, c * o, u), n.update(l, i, u)
                }
            }
        }

        function Dn(e) {
            var t = {frame: 0, calls: 0, triangles: 0, points: 0, lines: 0};
            return {
                memory: {geometries: 0, textures: 0}, render: t, programs: null, autoReset: !0, reset: function () {
                    t.frame++, t.calls = 0, t.triangles = 0, t.points = 0, t.lines = 0
                }, update: function (e, n, r) {
                    switch (r = r || 1, t.calls++, n) {
                        case 4:
                            t.triangles += r * (e / 3);
                            break;
                        case 1:
                            t.lines += r * (e / 2);
                            break;
                        case 3:
                            t.lines += r * (e - 1);
                            break;
                        case 2:
                            t.lines += r * e;
                            break;
                        case 0:
                            t.points += r * e;
                            break;
                        default:
                            console.error("THREE.WebGLInfo: Unknown draw mode:", n)
                    }
                }
            }
        }

        function Un(e, t) {
            return Math.abs(t[1]) - Math.abs(e[1])
        }

        function zn(e) {
            var t = {}, n = new Float32Array(8);
            return {
                update: function (r, i, a, o) {
                    var s = r.morphTargetInfluences, c = void 0 === s ? 0 : s.length, l = t[i.id];
                    if (void 0 === l) {
                        l = [];
                        for (var u = 0; u < c; u++) l[u] = [u, 0];
                        t[i.id] = l
                    }
                    var h = a.morphTargets && i.morphAttributes.position,
                        p = a.morphNormals && i.morphAttributes.normal;
                    for (u = 0; u < c; u++) {
                        0 !== (f = l[u])[1] && (h && i.deleteAttribute("morphTarget" + u), p && i.deleteAttribute("morphNormal" + u))
                    }
                    for (u = 0; u < c; u++) {
                        (f = l[u])[0] = u, f[1] = s[u]
                    }
                    l.sort(Un);
                    var d = 0;
                    for (u = 0; u < 8; u++) {
                        var f;
                        if (f = l[u]) {
                            var m = f[0], v = f[1];
                            if (v) {
                                h && i.setAttribute("morphTarget" + u, h[m]), p && i.setAttribute("morphNormal" + u, p[m]), n[u] = v, d += v;
                                continue
                            }
                        }
                        n[u] = 0
                    }
                    var g = i.morphTargetsRelative ? 1 : 1 - d;
                    o.getUniforms().setValue(e, "morphTargetBaseInfluence", g), o.getUniforms().setValue(e, "morphTargetInfluences", n)
                }
            }
        }

        function Fn(e, t, n, r) {
            var i = new WeakMap;
            return {
                update: function (e) {
                    var a = r.render.frame, o = e.geometry, s = t.get(e, o);
                    return i.get(s) !== a && (o.isGeometry && s.updateFromObject(e), t.update(s), i.set(s, a)), e.isInstancedMesh && n.update(e.instanceMatrix, 34962), s
                }, dispose: function () {
                    i = new WeakMap
                }
            }
        }

        function Bn(e, t, n, r, i, a, o, s, c, l) {
            e = void 0 !== e ? e : [], t = void 0 !== t ? t : 301, o = void 0 !== o ? o : g, z.call(this, e, t, n, r, i, a, o, s, c, l), this.flipY = !1
        }

        function Hn(e, t, n, r) {
            z.call(this, null), this.image = {
                data: e || null,
                width: t || 1,
                height: n || 1,
                depth: r || 1
            }, this.magFilter = h, this.minFilter = h, this.wrapR = l, this.generateMipmaps = !1, this.flipY = !1, this.needsUpdate = !0
        }

        function Gn(e, t, n, r) {
            z.call(this, null), this.image = {
                data: e || null,
                width: t || 1,
                height: n || 1,
                depth: r || 1
            }, this.magFilter = h, this.minFilter = h, this.wrapR = l, this.generateMipmaps = !1, this.flipY = !1, this.needsUpdate = !0
        }

        An.physical = {
            uniforms: un([An.standard.uniforms, {
                clearcoat: {value: 0},
                clearcoatMap: {value: null},
                clearcoatRoughness: {value: 0},
                clearcoatRoughnessMap: {value: null},
                clearcoatNormalScale: {value: new I(1, 1)},
                clearcoatNormalMap: {value: null},
                sheen: {value: new st(0)},
                transparency: {value: 0}
            }]), vertexShader: En.meshphysical_vert, fragmentShader: En.meshphysical_frag
        }, Bn.prototype = Object.create(z.prototype), Bn.prototype.constructor = Bn, Bn.prototype.isCubeTexture = !0, Object.defineProperty(Bn.prototype, "images", {
            get: function () {
                return this.image
            }, set: function (e) {
                this.image = e
            }
        }), Hn.prototype = Object.create(z.prototype), Hn.prototype.constructor = Hn, Hn.prototype.isDataTexture2DArray = !0, Gn.prototype = Object.create(z.prototype), Gn.prototype.constructor = Gn, Gn.prototype.isDataTexture3D = !0;
        var kn = new z, jn = new Hn, Vn = new Gn, Wn = new Bn, qn = [], Xn = [], Yn = new Float32Array(16),
            Jn = new Float32Array(9), Zn = new Float32Array(4);

        function Kn(e, t, n) {
            var r = e[0];
            if (r <= 0 || r > 0) return e;
            var i = t * n, a = qn[i];
            if (void 0 === a && (a = new Float32Array(i), qn[i] = a), 0 !== t) {
                r.toArray(a, 0);
                for (var o = 1, s = 0; o !== t; ++o) s += n, e[o].toArray(a, s)
            }
            return a
        }

        function Qn(e, t) {
            if (e.length !== t.length) return !1;
            for (var n = 0, r = e.length; n < r; n++) if (e[n] !== t[n]) return !1;
            return !0
        }

        function $n(e, t) {
            for (var n = 0, r = t.length; n < r; n++) e[n] = t[n]
        }

        function er(e, t) {
            var n = Xn[t];
            void 0 === n && (n = new Int32Array(t), Xn[t] = n);
            for (var r = 0; r !== t; ++r) n[r] = e.allocateTextureUnit();
            return n
        }

        function tr(e, t) {
            var n = this.cache;
            n[0] !== t && (e.uniform1f(this.addr, t), n[0] = t)
        }

        function nr(e, t) {
            var n = this.cache;
            if (void 0 !== t.x) n[0] === t.x && n[1] === t.y || (e.uniform2f(this.addr, t.x, t.y), n[0] = t.x, n[1] = t.y); else {
                if (Qn(n, t)) return;
                e.uniform2fv(this.addr, t), $n(n, t)
            }
        }

        function rr(e, t) {
            var n = this.cache;
            if (void 0 !== t.x) n[0] === t.x && n[1] === t.y && n[2] === t.z || (e.uniform3f(this.addr, t.x, t.y, t.z), n[0] = t.x, n[1] = t.y, n[2] = t.z); else if (void 0 !== t.r) n[0] === t.r && n[1] === t.g && n[2] === t.b || (e.uniform3f(this.addr, t.r, t.g, t.b), n[0] = t.r, n[1] = t.g, n[2] = t.b); else {
                if (Qn(n, t)) return;
                e.uniform3fv(this.addr, t), $n(n, t)
            }
        }

        function ir(e, t) {
            var n = this.cache;
            if (void 0 !== t.x) n[0] === t.x && n[1] === t.y && n[2] === t.z && n[3] === t.w || (e.uniform4f(this.addr, t.x, t.y, t.z, t.w), n[0] = t.x, n[1] = t.y, n[2] = t.z, n[3] = t.w); else {
                if (Qn(n, t)) return;
                e.uniform4fv(this.addr, t), $n(n, t)
            }
        }

        function ar(e, t) {
            var n = this.cache, r = t.elements;
            if (void 0 === r) {
                if (Qn(n, t)) return;
                e.uniformMatrix2fv(this.addr, !1, t), $n(n, t)
            } else {
                if (Qn(n, r)) return;
                Zn.set(r), e.uniformMatrix2fv(this.addr, !1, Zn), $n(n, r)
            }
        }

        function or(e, t) {
            var n = this.cache, r = t.elements;
            if (void 0 === r) {
                if (Qn(n, t)) return;
                e.uniformMatrix3fv(this.addr, !1, t), $n(n, t)
            } else {
                if (Qn(n, r)) return;
                Jn.set(r), e.uniformMatrix3fv(this.addr, !1, Jn), $n(n, r)
            }
        }

        function sr(e, t) {
            var n = this.cache, r = t.elements;
            if (void 0 === r) {
                if (Qn(n, t)) return;
                e.uniformMatrix4fv(this.addr, !1, t), $n(n, t)
            } else {
                if (Qn(n, r)) return;
                Yn.set(r), e.uniformMatrix4fv(this.addr, !1, Yn), $n(n, r)
            }
        }

        function cr(e, t, n) {
            var r = this.cache, i = n.allocateTextureUnit();
            r[0] !== i && (e.uniform1i(this.addr, i), r[0] = i), n.safeSetTexture2D(t || kn, i)
        }

        function lr(e, t, n) {
            var r = this.cache, i = n.allocateTextureUnit();
            r[0] !== i && (e.uniform1i(this.addr, i), r[0] = i), n.setTexture2DArray(t || jn, i)
        }

        function ur(e, t, n) {
            var r = this.cache, i = n.allocateTextureUnit();
            r[0] !== i && (e.uniform1i(this.addr, i), r[0] = i), n.setTexture3D(t || Vn, i)
        }

        function hr(e, t, n) {
            var r = this.cache, i = n.allocateTextureUnit();
            r[0] !== i && (e.uniform1i(this.addr, i), r[0] = i), n.safeSetTextureCube(t || Wn, i)
        }

        function pr(e, t) {
            var n = this.cache;
            n[0] !== t && (e.uniform1i(this.addr, t), n[0] = t)
        }

        function dr(e, t) {
            var n = this.cache;
            Qn(n, t) || (e.uniform2iv(this.addr, t), $n(n, t))
        }

        function fr(e, t) {
            var n = this.cache;
            Qn(n, t) || (e.uniform3iv(this.addr, t), $n(n, t))
        }

        function mr(e, t) {
            var n = this.cache;
            Qn(n, t) || (e.uniform4iv(this.addr, t), $n(n, t))
        }

        function vr(e, t) {
            var n = this.cache;
            n[0] !== t && (e.uniform1ui(this.addr, t), n[0] = t)
        }

        function gr(e, t) {
            e.uniform1fv(this.addr, t)
        }

        function yr(e, t) {
            e.uniform1iv(this.addr, t)
        }

        function xr(e, t) {
            e.uniform2iv(this.addr, t)
        }

        function br(e, t) {
            e.uniform3iv(this.addr, t)
        }

        function _r(e, t) {
            e.uniform4iv(this.addr, t)
        }

        function wr(e, t) {
            var n = Kn(t, this.size, 2);
            e.uniform2fv(this.addr, n)
        }

        function Mr(e, t) {
            var n = Kn(t, this.size, 3);
            e.uniform3fv(this.addr, n)
        }

        function Sr(e, t) {
            var n = Kn(t, this.size, 4);
            e.uniform4fv(this.addr, n)
        }

        function Tr(e, t) {
            var n = Kn(t, this.size, 4);
            e.uniformMatrix2fv(this.addr, !1, n)
        }

        function Er(e, t) {
            var n = Kn(t, this.size, 9);
            e.uniformMatrix3fv(this.addr, !1, n)
        }

        function Ar(e, t) {
            var n = Kn(t, this.size, 16);
            e.uniformMatrix4fv(this.addr, !1, n)
        }

        function Lr(e, t, n) {
            var r = t.length, i = er(n, r);
            e.uniform1iv(this.addr, i);
            for (var a = 0; a !== r; ++a) n.safeSetTexture2D(t[a] || kn, i[a])
        }

        function Rr(e, t, n) {
            var r = t.length, i = er(n, r);
            e.uniform1iv(this.addr, i);
            for (var a = 0; a !== r; ++a) n.safeSetTextureCube(t[a] || Wn, i[a])
        }

        function Pr(e, t, n) {
            this.id = e, this.addr = n, this.cache = [], this.setValue = function (e) {
                switch (e) {
                    case 5126:
                        return tr;
                    case 35664:
                        return nr;
                    case 35665:
                        return rr;
                    case 35666:
                        return ir;
                    case 35674:
                        return ar;
                    case 35675:
                        return or;
                    case 35676:
                        return sr;
                    case 5124:
                    case 35670:
                        return pr;
                    case 35667:
                    case 35671:
                        return dr;
                    case 35668:
                    case 35672:
                        return fr;
                    case 35669:
                    case 35673:
                        return mr;
                    case 5125:
                        return vr;
                    case 35678:
                    case 36198:
                    case 36298:
                    case 36306:
                    case 35682:
                        return cr;
                    case 35679:
                    case 36299:
                    case 36307:
                        return ur;
                    case 35680:
                    case 36300:
                    case 36308:
                    case 36293:
                        return hr;
                    case 36289:
                    case 36303:
                    case 36311:
                    case 36292:
                        return lr
                }
            }(t.type)
        }

        function Cr(e, t, n) {
            this.id = e, this.addr = n, this.cache = [], this.size = t.size, this.setValue = function (e) {
                switch (e) {
                    case 5126:
                        return gr;
                    case 35664:
                        return wr;
                    case 35665:
                        return Mr;
                    case 35666:
                        return Sr;
                    case 35674:
                        return Tr;
                    case 35675:
                        return Er;
                    case 35676:
                        return Ar;
                    case 5124:
                    case 35670:
                        return yr;
                    case 35667:
                    case 35671:
                        return xr;
                    case 35668:
                    case 35672:
                        return br;
                    case 35669:
                    case 35673:
                        return _r;
                    case 35678:
                    case 36198:
                    case 36298:
                    case 36306:
                    case 35682:
                        return Lr;
                    case 35680:
                    case 36300:
                    case 36308:
                    case 36293:
                        return Rr
                }
            }(t.type)
        }

        function Or(e) {
            this.id = e, this.seq = [], this.map = {}
        }

        Cr.prototype.updateCache = function (e) {
            var t = this.cache;
            e instanceof Float32Array && t.length !== e.length && (this.cache = new Float32Array(e.length)), $n(t, e)
        }, Or.prototype.setValue = function (e, t, n) {
            for (var r = this.seq, i = 0, a = r.length; i !== a; ++i) {
                var o = r[i];
                o.setValue(e, t[o.id], n)
            }
        };
        var Ir = /([\w\d_]+)(\])?(\[|\.)?/g;

        function Nr(e, t) {
            e.seq.push(t), e.map[t.id] = t
        }

        function Dr(e, t, n) {
            var r = e.name, i = r.length;
            for (Ir.lastIndex = 0; ;) {
                var a = Ir.exec(r), o = Ir.lastIndex, s = a[1], c = "]" === a[2], l = a[3];
                if (c && (s |= 0), void 0 === l || "[" === l && o + 2 === i) {
                    Nr(n, void 0 === l ? new Pr(s, e, t) : new Cr(s, e, t));
                    break
                }
                var u = n.map[s];
                void 0 === u && Nr(n, u = new Or(s)), n = u
            }
        }

        function Ur(e, t) {
            this.seq = [], this.map = {};
            for (var n = e.getProgramParameter(t, 35718), r = 0; r < n; ++r) {
                var i = e.getActiveUniform(t, r);
                Dr(i, e.getUniformLocation(t, i.name), this)
            }
        }

        function zr(e, t, n) {
            var r = e.createShader(t);
            return e.shaderSource(r, n), e.compileShader(r), r
        }

        Ur.prototype.setValue = function (e, t, n, r) {
            var i = this.map[t];
            void 0 !== i && i.setValue(e, n, r)
        }, Ur.prototype.setOptional = function (e, t, n) {
            var r = t[n];
            void 0 !== r && this.setValue(e, n, r)
        }, Ur.upload = function (e, t, n, r) {
            for (var i = 0, a = t.length; i !== a; ++i) {
                var o = t[i], s = n[o.id];
                !1 !== s.needsUpdate && o.setValue(e, s.value, r)
            }
        }, Ur.seqWithValue = function (e, t) {
            for (var n = [], r = 0, i = e.length; r !== i; ++r) {
                var a = e[r];
                a.id in t && n.push(a)
            }
            return n
        };
        var Fr = 0;

        function Br(e) {
            switch (e) {
                case 3e3:
                    return ["Linear", "( value )"];
                case E:
                    return ["sRGB", "( value )"];
                case 3002:
                    return ["RGBE", "( value )"];
                case 3004:
                    return ["RGBM", "( value, 7.0 )"];
                case 3005:
                    return ["RGBM", "( value, 16.0 )"];
                case 3006:
                    return ["RGBD", "( value, 256.0 )"];
                case 3007:
                    return ["Gamma", "( value, float( GAMMA_FACTOR ) )"];
                case 3003:
                    return ["LogLuv", "( value )"];
                default:
                    throw new Error("unsupported encoding: " + e)
            }
        }

        function Hr(e, t, n) {
            var r = e.getShaderParameter(t, 35713), i = e.getShaderInfoLog(t).trim();
            return r && "" === i ? "" : "THREE.WebGLShader: gl.getShaderInfoLog() " + n + "\n" + i + function (e) {
                for (var t = e.split("\n"), n = 0; n < t.length; n++) t[n] = n + 1 + ": " + t[n];
                return t.join("\n")
            }(e.getShaderSource(t))
        }

        function Gr(e, t) {
            var n = Br(t);
            return "vec4 " + e + "( vec4 value ) { return " + n[0] + "ToLinear" + n[1] + "; }"
        }

        function kr(e, t) {
            var n;
            switch (t) {
                case 1:
                    n = "Linear";
                    break;
                case 2:
                    n = "Reinhard";
                    break;
                case 3:
                    n = "Uncharted2";
                    break;
                case 4:
                    n = "OptimizedCineon";
                    break;
                case 5:
                    n = "ACESFilmic";
                    break;
                default:
                    throw new Error("unsupported toneMapping: " + t)
            }
            return "vec3 " + e + "( vec3 color ) { return " + n + "ToneMapping( color ); }"
        }

        function jr(e) {
            return "" !== e
        }

        function Vr(e, t) {
            return e.replace(/NUM_DIR_LIGHTS/g, t.numDirLights).replace(/NUM_SPOT_LIGHTS/g, t.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, t.numPointLights).replace(/NUM_HEMI_LIGHTS/g, t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, t.numPointLightShadows)
        }

        function Wr(e, t) {
            return e.replace(/NUM_CLIPPING_PLANES/g, t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, t.numClippingPlanes - t.numClipIntersection)
        }

        var qr = /^[ \t]*#include +<([\w\d./]+)>/gm;

        function Xr(e) {
            return e.replace(qr, Yr)
        }

        function Yr(e, t) {
            var n = En[t];
            if (void 0 === n) throw new Error("Can not resolve #include <" + t + ">");
            return Xr(n)
        }

        var Jr = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,
            Zr = /#pragma unroll_loop_start[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}[\s]+?#pragma unroll_loop_end/g;

        function Kr(e) {
            return e.replace(Zr, $r).replace(Jr, Qr)
        }

        function Qr(e, t, n, r) {
            return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."), $r(e, t, n, r)
        }

        function $r(e, t, n, r) {
            for (var i = "", a = parseInt(t); a < parseInt(n); a++) i += r.replace(/\[ i \]/g, "[ " + a + " ]").replace(/UNROLLED_LOOP_INDEX/g, a);
            return i
        }

        function ei(e) {
            var t = "precision " + e.precision + " float;\nprecision " + e.precision + " int;";
            return "highp" === e.precision ? t += "\n#define HIGH_PRECISION" : "mediump" === e.precision ? t += "\n#define MEDIUM_PRECISION" : "lowp" === e.precision && (t += "\n#define LOW_PRECISION"), t
        }

        function ti(e, t, n) {
            var r, i, a, o, s, c = e.getContext(), l = n.defines, u = n.vertexShader, h = n.fragmentShader,
                p = function (e) {
                    var t = "SHADOWMAP_TYPE_BASIC";
                    return 1 === e.shadowMapType ? t = "SHADOWMAP_TYPE_PCF" : 2 === e.shadowMapType ? t = "SHADOWMAP_TYPE_PCF_SOFT" : 3 === e.shadowMapType && (t = "SHADOWMAP_TYPE_VSM"), t
                }(n), d = function (e) {
                    var t = "ENVMAP_TYPE_CUBE";
                    if (e.envMap) switch (e.envMapMode) {
                        case 301:
                        case 302:
                            t = "ENVMAP_TYPE_CUBE";
                            break;
                        case 306:
                        case 307:
                            t = "ENVMAP_TYPE_CUBE_UV";
                            break;
                        case 303:
                        case 304:
                            t = "ENVMAP_TYPE_EQUIREC";
                            break;
                        case 305:
                            t = "ENVMAP_TYPE_SPHERE"
                    }
                    return t
                }(n), f = function (e) {
                    var t = "ENVMAP_MODE_REFLECTION";
                    if (e.envMap) switch (e.envMapMode) {
                        case 302:
                        case 304:
                            t = "ENVMAP_MODE_REFRACTION"
                    }
                    return t
                }(n), m = function (e) {
                    var t = "ENVMAP_BLENDING_NONE";
                    if (e.envMap) switch (e.combine) {
                        case 0:
                            t = "ENVMAP_BLENDING_MULTIPLY";
                            break;
                        case 1:
                            t = "ENVMAP_BLENDING_MIX";
                            break;
                        case 2:
                            t = "ENVMAP_BLENDING_ADD"
                    }
                    return t
                }(n), v = e.gammaFactor > 0 ? e.gammaFactor : 1, g = n.isWebGL2 ? "" : function (e) {
                    return [e.extensionDerivatives || e.envMapCubeUV || e.bumpMap || e.tangentSpaceNormalMap || e.clearcoatNormalMap || e.flatShading || "physical" === e.shaderID ? "#extension GL_OES_standard_derivatives : enable" : "", (e.extensionFragDepth || e.logarithmicDepthBuffer) && e.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "", e.extensionDrawBuffers && e.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "", (e.extensionShaderTextureLOD || e.envMap) && e.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : ""].filter(jr).join("\n")
                }(n), y = function (e) {
                    var t = [];
                    for (var n in e) {
                        var r = e[n];
                        !1 !== r && t.push("#define " + n + " " + r)
                    }
                    return t.join("\n")
                }(l), x = c.createProgram();
            if (n.isRawShaderMaterial ? ((r = [y].filter(jr).join("\n")).length > 0 && (r += "\n"), (i = [g, y].filter(jr).join("\n")).length > 0 && (i += "\n")) : (r = [ei(n), "#define SHADER_NAME " + n.shaderName, y, n.instancing ? "#define USE_INSTANCING" : "", n.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "", "#define GAMMA_FACTOR " + v, "#define MAX_BONES " + n.maxBones, n.useFog && n.fog ? "#define USE_FOG" : "", n.useFog && n.fogExp2 ? "#define FOG_EXP2" : "", n.map ? "#define USE_MAP" : "", n.envMap ? "#define USE_ENVMAP" : "", n.envMap ? "#define " + f : "", n.lightMap ? "#define USE_LIGHTMAP" : "", n.aoMap ? "#define USE_AOMAP" : "", n.emissiveMap ? "#define USE_EMISSIVEMAP" : "", n.bumpMap ? "#define USE_BUMPMAP" : "", n.normalMap ? "#define USE_NORMALMAP" : "", n.normalMap && n.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", n.normalMap && n.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "", n.clearcoatMap ? "#define USE_CLEARCOATMAP" : "", n.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "", n.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "", n.displacementMap && n.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "", n.specularMap ? "#define USE_SPECULARMAP" : "", n.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", n.metalnessMap ? "#define USE_METALNESSMAP" : "", n.alphaMap ? "#define USE_ALPHAMAP" : "", n.vertexTangents ? "#define USE_TANGENT" : "", n.vertexColors ? "#define USE_COLOR" : "", n.vertexUvs ? "#define USE_UV" : "", n.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "", n.flatShading ? "#define FLAT_SHADED" : "", n.skinning ? "#define USE_SKINNING" : "", n.useVertexTexture ? "#define BONE_TEXTURE" : "", n.morphTargets ? "#define USE_MORPHTARGETS" : "", n.morphNormals && !1 === n.flatShading ? "#define USE_MORPHNORMALS" : "", n.doubleSided ? "#define DOUBLE_SIDED" : "", n.flipSided ? "#define FLIP_SIDED" : "", n.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", n.shadowMapEnabled ? "#define " + p : "", n.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "", n.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", n.logarithmicDepthBuffer && n.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "", "uniform mat4 modelMatrix;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;", "uniform vec3 cameraPosition;", "uniform bool isOrthographic;", "#ifdef USE_INSTANCING", " attribute mat4 instanceMatrix;", "#endif", "attribute vec3 position;", "attribute vec3 normal;", "attribute vec2 uv;", "#ifdef USE_TANGENT", "\tattribute vec4 tangent;", "#endif", "#ifdef USE_COLOR", "\tattribute vec3 color;", "#endif", "#ifdef USE_MORPHTARGETS", "\tattribute vec3 morphTarget0;", "\tattribute vec3 morphTarget1;", "\tattribute vec3 morphTarget2;", "\tattribute vec3 morphTarget3;", "\t#ifdef USE_MORPHNORMALS", "\t\tattribute vec3 morphNormal0;", "\t\tattribute vec3 morphNormal1;", "\t\tattribute vec3 morphNormal2;", "\t\tattribute vec3 morphNormal3;", "\t#else", "\t\tattribute vec3 morphTarget4;", "\t\tattribute vec3 morphTarget5;", "\t\tattribute vec3 morphTarget6;", "\t\tattribute vec3 morphTarget7;", "\t#endif", "#endif", "#ifdef USE_SKINNING", "\tattribute vec4 skinIndex;", "\tattribute vec4 skinWeight;", "#endif", "\n"].filter(jr).join("\n"), i = [g, ei(n), "#define SHADER_NAME " + n.shaderName, y, n.alphaTest ? "#define ALPHATEST " + n.alphaTest + (n.alphaTest % 1 ? "" : ".0") : "", "#define GAMMA_FACTOR " + v, n.useFog && n.fog ? "#define USE_FOG" : "", n.useFog && n.fogExp2 ? "#define FOG_EXP2" : "", n.map ? "#define USE_MAP" : "", n.matcap ? "#define USE_MATCAP" : "", n.envMap ? "#define USE_ENVMAP" : "", n.envMap ? "#define " + d : "", n.envMap ? "#define " + f : "", n.envMap ? "#define " + m : "", n.lightMap ? "#define USE_LIGHTMAP" : "", n.aoMap ? "#define USE_AOMAP" : "", n.emissiveMap ? "#define USE_EMISSIVEMAP" : "", n.bumpMap ? "#define USE_BUMPMAP" : "", n.normalMap ? "#define USE_NORMALMAP" : "", n.normalMap && n.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", n.normalMap && n.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "", n.clearcoatMap ? "#define USE_CLEARCOATMAP" : "", n.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "", n.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "", n.specularMap ? "#define USE_SPECULARMAP" : "", n.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", n.metalnessMap ? "#define USE_METALNESSMAP" : "", n.alphaMap ? "#define USE_ALPHAMAP" : "", n.sheen ? "#define USE_SHEEN" : "", n.vertexTangents ? "#define USE_TANGENT" : "", n.vertexColors ? "#define USE_COLOR" : "", n.vertexUvs ? "#define USE_UV" : "", n.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "", n.gradientMap ? "#define USE_GRADIENTMAP" : "", n.flatShading ? "#define FLAT_SHADED" : "", n.doubleSided ? "#define DOUBLE_SIDED" : "", n.flipSided ? "#define FLIP_SIDED" : "", n.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", n.shadowMapEnabled ? "#define " + p : "", n.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "", n.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : "", n.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", n.logarithmicDepthBuffer && n.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "", (n.extensionShaderTextureLOD || n.envMap) && n.rendererExtensionShaderTextureLod ? "#define TEXTURE_LOD_EXT" : "", "uniform mat4 viewMatrix;", "uniform vec3 cameraPosition;", "uniform bool isOrthographic;", 0 !== n.toneMapping ? "#define TONE_MAPPING" : "", 0 !== n.toneMapping ? En.tonemapping_pars_fragment : "", 0 !== n.toneMapping ? kr("toneMapping", n.toneMapping) : "", n.dithering ? "#define DITHERING" : "", n.outputEncoding || n.mapEncoding || n.matcapEncoding || n.envMapEncoding || n.emissiveMapEncoding || n.lightMapEncoding ? En.encodings_pars_fragment : "", n.mapEncoding ? Gr("mapTexelToLinear", n.mapEncoding) : "", n.matcapEncoding ? Gr("matcapTexelToLinear", n.matcapEncoding) : "", n.envMapEncoding ? Gr("envMapTexelToLinear", n.envMapEncoding) : "", n.emissiveMapEncoding ? Gr("emissiveMapTexelToLinear", n.emissiveMapEncoding) : "", n.lightMapEncoding ? Gr("lightMapTexelToLinear", n.lightMapEncoding) : "", n.outputEncoding ? (a = "linearToOutputTexel", o = n.outputEncoding, s = Br(o), "vec4 " + a + "( vec4 value ) { return LinearTo" + s[0] + s[1] + "; }") : "", n.depthPacking ? "#define DEPTH_PACKING " + n.depthPacking : "", "\n"].filter(jr).join("\n")), u = Wr(u = Vr(u = Xr(u), n), n), h = Wr(h = Vr(h = Xr(h), n), n), u = Kr(u), h = Kr(h), n.isWebGL2 && !n.isRawShaderMaterial) {
                var b = !1, _ = /^\s*#version\s+300\s+es\s*\n/;
                n.isShaderMaterial && null !== u.match(_) && null !== h.match(_) && (b = !0, u = u.replace(_, ""), h = h.replace(_, "")), r = ["#version 300 es\n", "#define attribute in", "#define varying out", "#define texture2D texture"].join("\n") + "\n" + r, i = ["#version 300 es\n", "#define varying in", b ? "" : "out highp vec4 pc_fragColor;", b ? "" : "#define gl_FragColor pc_fragColor", "#define gl_FragDepthEXT gl_FragDepth", "#define texture2D texture", "#define textureCube texture", "#define texture2DProj textureProj", "#define texture2DLodEXT textureLod", "#define texture2DProjLodEXT textureProjLod", "#define textureCubeLodEXT textureLod", "#define texture2DGradEXT textureGrad", "#define texture2DProjGradEXT textureProjGrad", "#define textureCubeGradEXT textureGrad"].join("\n") + "\n" + i
            }
            var w, M, S = i + h, T = zr(c, 35633, r + u), E = zr(c, 35632, S);
            if (c.attachShader(x, T), c.attachShader(x, E), void 0 !== n.index0AttributeName ? c.bindAttribLocation(x, 0, n.index0AttributeName) : !0 === n.morphTargets && c.bindAttribLocation(x, 0, "position"), c.linkProgram(x), e.debug.checkShaderErrors) {
                var A = c.getProgramInfoLog(x).trim(), L = c.getShaderInfoLog(T).trim(),
                    R = c.getShaderInfoLog(E).trim(), P = !0, C = !0;
                if (!1 === c.getProgramParameter(x, 35714)) {
                    P = !1;
                    var O = Hr(c, T, "vertex"), I = Hr(c, E, "fragment");
                    console.error("THREE.WebGLProgram: shader error: ", c.getError(), "35715", c.getProgramParameter(x, 35715), "gl.getProgramInfoLog", A, O, I)
                } else "" !== A ? console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()", A) : "" !== L && "" !== R || (C = !1);
                C && (this.diagnostics = {
                    runnable: P,
                    programLog: A,
                    vertexShader: {log: L, prefix: r},
                    fragmentShader: {log: R, prefix: i}
                })
            }
            return c.deleteShader(T), c.deleteShader(E), this.getUniforms = function () {
                return void 0 === w && (w = new Ur(c, x)), w
            }, this.getAttributes = function () {
                return void 0 === M && (M = function (e, t) {
                    for (var n = {}, r = e.getProgramParameter(t, 35721), i = 0; i < r; i++) {
                        var a = e.getActiveAttrib(t, i).name;
                        n[a] = e.getAttribLocation(t, a)
                    }
                    return n
                }(c, x)), M
            }, this.destroy = function () {
                c.deleteProgram(x), this.program = void 0
            }, this.name = n.shaderName, this.id = Fr++, this.cacheKey = t, this.usedTimes = 1, this.program = x, this.vertexShader = T, this.fragmentShader = E, this
        }

        function ni(e, t, n) {
            var r = [], i = n.isWebGL2, a = n.logarithmicDepthBuffer, s = n.floatVertexTextures, c = n.precision,
                l = n.maxVertexUniforms, u = n.vertexTextures, h = {
                    MeshDepthMaterial: "depth",
                    MeshDistanceMaterial: "distanceRGBA",
                    MeshNormalMaterial: "normal",
                    MeshBasicMaterial: "basic",
                    MeshLambertMaterial: "lambert",
                    MeshPhongMaterial: "phong",
                    MeshToonMaterial: "toon",
                    MeshStandardMaterial: "physical",
                    MeshPhysicalMaterial: "physical",
                    MeshMatcapMaterial: "matcap",
                    LineBasicMaterial: "basic",
                    LineDashedMaterial: "dashed",
                    PointsMaterial: "points",
                    ShadowMaterial: "shadow",
                    SpriteMaterial: "sprite"
                },
                p = ["precision", "isWebGL2", "supportsVertexTextures", "outputEncoding", "instancing", "map", "mapEncoding", "matcap", "matcapEncoding", "envMap", "envMapMode", "envMapEncoding", "envMapCubeUV", "lightMap", "lightMapEncoding", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "objectSpaceNormalMap", "tangentSpaceNormalMap", "clearcoatMap", "clearcoatRoughnessMap", "clearcoatNormalMap", "displacementMap", "specularMap", "roughnessMap", "metalnessMap", "gradientMap", "alphaMap", "combine", "vertexColors", "vertexTangents", "vertexUvs", "uvsVertexOnly", "fog", "useFog", "fogExp2", "flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning", "maxBones", "useVertexTexture", "morphTargets", "morphNormals", "maxMorphTargets", "maxMorphNormals", "premultipliedAlpha", "numDirLights", "numPointLights", "numSpotLights", "numHemiLights", "numRectAreaLights", "numDirLightShadows", "numPointLightShadows", "numSpotLightShadows", "shadowMapEnabled", "shadowMapType", "toneMapping", "physicallyCorrectLights", "alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking", "dithering", "sheen"];

            function d(e) {
                var t;
                return e ? e.isTexture ? t = e.encoding : e.isWebGLRenderTarget && (console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."), t = e.texture.encoding) : t = 3e3, t
            }

            this.getParameters = function (r, p, f, m, v, g, y) {
                var x = m.fog, b = r.isMeshStandardMaterial ? m.environment : null, _ = r.envMap || b, w = h[r.type],
                    M = y.isSkinnedMesh ? function (e) {
                        var t = e.skeleton.bones;
                        if (s) return 1024;
                        var n = l, r = Math.floor((n - 20) / 4), i = Math.min(r, t.length);
                        return i < t.length ? (console.warn("THREE.WebGLRenderer: Skeleton has " + t.length + " bones. This GPU supports " + i + "."), 0) : i
                    }(y) : 0;
                null !== r.precision && (c = n.getMaxPrecision(r.precision)) !== r.precision && console.warn("THREE.WebGLProgram.getParameters:", r.precision, "not supported, using", c, "instead.");
                var S = function (e, t) {
                    var n;
                    if (t) {
                        var r = An[t];
                        n = {
                            name: e.type,
                            uniforms: hn.clone(r.uniforms),
                            vertexShader: r.vertexShader,
                            fragmentShader: r.fragmentShader
                        }
                    } else n = {
                        name: e.type,
                        uniforms: e.uniforms,
                        vertexShader: e.vertexShader,
                        fragmentShader: e.fragmentShader
                    };
                    return n
                }(r, w);
                r.onBeforeCompile(S, e);
                var T = e.getRenderTarget();
                return {
                    isWebGL2: i,
                    shaderID: w,
                    shaderName: S.name,
                    uniforms: S.uniforms,
                    vertexShader: S.vertexShader,
                    fragmentShader: S.fragmentShader,
                    defines: r.defines,
                    isRawShaderMaterial: r.isRawShaderMaterial,
                    isShaderMaterial: r.isShaderMaterial,
                    precision: c,
                    instancing: !0 === y.isInstancedMesh,
                    supportsVertexTextures: u,
                    outputEncoding: null !== T ? d(T.texture) : e.outputEncoding,
                    map: !!r.map,
                    mapEncoding: d(r.map),
                    matcap: !!r.matcap,
                    matcapEncoding: d(r.matcap),
                    envMap: !!_,
                    envMapMode: _ && _.mapping,
                    envMapEncoding: d(_),
                    envMapCubeUV: !!_ && (306 === _.mapping || 307 === _.mapping),
                    lightMap: !!r.lightMap,
                    lightMapEncoding: d(r.lightMap),
                    aoMap: !!r.aoMap,
                    emissiveMap: !!r.emissiveMap,
                    emissiveMapEncoding: d(r.emissiveMap),
                    bumpMap: !!r.bumpMap,
                    normalMap: !!r.normalMap,
                    objectSpaceNormalMap: 1 === r.normalMapType,
                    tangentSpaceNormalMap: r.normalMapType === A,
                    clearcoatMap: !!r.clearcoatMap,
                    clearcoatRoughnessMap: !!r.clearcoatRoughnessMap,
                    clearcoatNormalMap: !!r.clearcoatNormalMap,
                    displacementMap: !!r.displacementMap,
                    roughnessMap: !!r.roughnessMap,
                    metalnessMap: !!r.metalnessMap,
                    specularMap: !!r.specularMap,
                    alphaMap: !!r.alphaMap,
                    gradientMap: !!r.gradientMap,
                    sheen: !!r.sheen,
                    combine: r.combine,
                    vertexTangents: r.normalMap && r.vertexTangents,
                    vertexColors: r.vertexColors,
                    vertexUvs: !!(r.map || r.bumpMap || r.normalMap || r.specularMap || r.alphaMap || r.emissiveMap || r.roughnessMap || r.metalnessMap || r.clearcoatMap || r.clearcoatRoughnessMap || r.clearcoatNormalMap || r.displacementMap),
                    uvsVertexOnly: !(r.map || r.bumpMap || r.normalMap || r.specularMap || r.alphaMap || r.emissiveMap || r.roughnessMap || r.metalnessMap || r.clearcoatNormalMap || !r.displacementMap),
                    fog: !!x,
                    useFog: r.fog,
                    fogExp2: x && x.isFogExp2,
                    flatShading: r.flatShading,
                    sizeAttenuation: r.sizeAttenuation,
                    logarithmicDepthBuffer: a,
                    skinning: r.skinning && M > 0,
                    maxBones: M,
                    useVertexTexture: s,
                    morphTargets: r.morphTargets,
                    morphNormals: r.morphNormals,
                    maxMorphTargets: e.maxMorphTargets,
                    maxMorphNormals: e.maxMorphNormals,
                    numDirLights: p.directional.length,
                    numPointLights: p.point.length,
                    numSpotLights: p.spot.length,
                    numRectAreaLights: p.rectArea.length,
                    numHemiLights: p.hemi.length,
                    numDirLightShadows: p.directionalShadowMap.length,
                    numPointLightShadows: p.pointShadowMap.length,
                    numSpotLightShadows: p.spotShadowMap.length,
                    numClippingPlanes: v,
                    numClipIntersection: g,
                    dithering: r.dithering,
                    shadowMapEnabled: e.shadowMap.enabled && f.length > 0,
                    shadowMapType: e.shadowMap.type,
                    toneMapping: r.toneMapped ? e.toneMapping : 0,
                    physicallyCorrectLights: e.physicallyCorrectLights,
                    premultipliedAlpha: r.premultipliedAlpha,
                    alphaTest: r.alphaTest,
                    doubleSided: r.side === o,
                    flipSided: 1 === r.side,
                    depthPacking: void 0 !== r.depthPacking && r.depthPacking,
                    index0AttributeName: r.index0AttributeName,
                    extensionDerivatives: r.extensions && r.extensions.derivatives,
                    extensionFragDepth: r.extensions && r.extensions.fragDepth,
                    extensionDrawBuffers: r.extensions && r.extensions.drawBuffers,
                    extensionShaderTextureLOD: r.extensions && r.extensions.shaderTextureLOD,
                    rendererExtensionFragDepth: i || null !== t.get("EXT_frag_depth"),
                    rendererExtensionDrawBuffers: i || null !== t.get("WEBGL_draw_buffers"),
                    rendererExtensionShaderTextureLod: i || null !== t.get("EXT_shader_texture_lod"),
                    onBeforeCompile: r.onBeforeCompile
                }
            }, this.getProgramCacheKey = function (t) {
                var n = [];
                if (t.shaderID ? n.push(t.shaderID) : (n.push(t.fragmentShader), n.push(t.vertexShader)), void 0 !== t.defines) for (var r in t.defines) n.push(r), n.push(t.defines[r]);
                if (void 0 === t.isRawShaderMaterial) {
                    for (var i = 0; i < p.length; i++) n.push(t[p[i]]);
                    n.push(e.outputEncoding), n.push(e.gammaFactor)
                }
                return n.push(t.onBeforeCompile.toString()), n.join()
            }, this.acquireProgram = function (t, n) {
                for (var i, a = 0, o = r.length; a < o; a++) {
                    var s = r[a];
                    if (s.cacheKey === n) {
                        ++(i = s).usedTimes;
                        break
                    }
                }
                return void 0 === i && (i = new ti(e, n, t), r.push(i)), i
            }, this.releaseProgram = function (e) {
                if (0 == --e.usedTimes) {
                    var t = r.indexOf(e);
                    r[t] = r[r.length - 1], r.pop(), e.destroy()
                }
            }, this.programs = r
        }

        function ri() {
            var e = new WeakMap;
            return {
                get: function (t) {
                    var n = e.get(t);
                    return void 0 === n && (n = {}, e.set(t, n)), n
                }, remove: function (t) {
                    e.delete(t)
                }, update: function (t, n, r) {
                    e.get(t)[n] = r
                }, dispose: function () {
                    e = new WeakMap
                }
            }
        }

        function ii(e, t) {
            return e.groupOrder !== t.groupOrder ? e.groupOrder - t.groupOrder : e.renderOrder !== t.renderOrder ? e.renderOrder - t.renderOrder : e.program !== t.program ? e.program.id - t.program.id : e.material.id !== t.material.id ? e.material.id - t.material.id : e.z !== t.z ? e.z - t.z : e.id - t.id
        }

        function ai(e, t) {
            return e.groupOrder !== t.groupOrder ? e.groupOrder - t.groupOrder : e.renderOrder !== t.renderOrder ? e.renderOrder - t.renderOrder : e.z !== t.z ? t.z - e.z : e.id - t.id
        }

        function oi() {
            var e = [], t = 0, n = [], r = [], i = {id: -1};

            function a(n, r, a, o, s, c) {
                var l = e[t];
                return void 0 === l ? (l = {
                    id: n.id,
                    object: n,
                    geometry: r,
                    material: a,
                    program: a.program || i,
                    groupOrder: o,
                    renderOrder: n.renderOrder,
                    z: s,
                    group: c
                }, e[t] = l) : (l.id = n.id, l.object = n, l.geometry = r, l.material = a, l.program = a.program || i, l.groupOrder = o, l.renderOrder = n.renderOrder, l.z = s, l.group = c), t++, l
            }

            return {
                opaque: n, transparent: r, init: function () {
                    t = 0, n.length = 0, r.length = 0
                }, push: function (e, t, i, o, s, c) {
                    var l = a(e, t, i, o, s, c);
                    (!0 === i.transparent ? r : n).push(l)
                }, unshift: function (e, t, i, o, s, c) {
                    var l = a(e, t, i, o, s, c);
                    (!0 === i.transparent ? r : n).unshift(l)
                }, finish: function () {
                    for (var n = t, r = e.length; n < r; n++) {
                        var i = e[n];
                        if (null === i.id) break;
                        i.id = null, i.object = null, i.geometry = null, i.material = null, i.program = null, i.group = null
                    }
                }, sort: function (e, t) {
                    n.length > 1 && n.sort(e || ii), r.length > 1 && r.sort(t || ai)
                }
            }
        }

        function si() {
            var e = new WeakMap;

            function t(n) {
                var r = n.target;
                r.removeEventListener("dispose", t), e.delete(r)
            }

            return {
                get: function (n, r) {
                    var i, a = e.get(n);
                    return void 0 === a ? (i = new oi, e.set(n, new WeakMap), e.get(n).set(r, i), n.addEventListener("dispose", t)) : void 0 === (i = a.get(r)) && (i = new oi, a.set(r, i)), i
                }, dispose: function () {
                    e = new WeakMap
                }
            }
        }

        function ci() {
            var e = {};
            return {
                get: function (t) {
                    if (void 0 !== e[t.id]) return e[t.id];
                    var n;
                    switch (t.type) {
                        case"DirectionalLight":
                            n = {direction: new V, color: new st};
                            break;
                        case"SpotLight":
                            n = {
                                position: new V,
                                direction: new V,
                                color: new st,
                                distance: 0,
                                coneCos: 0,
                                penumbraCos: 0,
                                decay: 0
                            };
                            break;
                        case"PointLight":
                            n = {position: new V, color: new st, distance: 0, decay: 0};
                            break;
                        case"HemisphereLight":
                            n = {direction: new V, skyColor: new st, groundColor: new st};
                            break;
                        case"RectAreaLight":
                            n = {color: new st, position: new V, halfWidth: new V, halfHeight: new V}
                    }
                    return e[t.id] = n, n
                }
            }
        }

        var li = 0;

        function ui(e, t) {
            return (t.castShadow ? 1 : 0) - (e.castShadow ? 1 : 0)
        }

        function hi() {
            for (var e, t = new ci, n = (e = {}, {
                get: function (t) {
                    if (void 0 !== e[t.id]) return e[t.id];
                    var n;
                    switch (t.type) {
                        case"DirectionalLight":
                        case"SpotLight":
                            n = {shadowBias: 0, shadowRadius: 1, shadowMapSize: new I};
                            break;
                        case"PointLight":
                            n = {
                                shadowBias: 0,
                                shadowRadius: 1,
                                shadowMapSize: new I,
                                shadowCameraNear: 1,
                                shadowCameraFar: 1e3
                            }
                    }
                    return e[t.id] = n, n
                }
            }), r = {
                version: 0,
                hash: {
                    directionalLength: -1,
                    pointLength: -1,
                    spotLength: -1,
                    rectAreaLength: -1,
                    hemiLength: -1,
                    numDirectionalShadows: -1,
                    numPointShadows: -1,
                    numSpotShadows: -1
                },
                ambient: [0, 0, 0],
                probe: [],
                directional: [],
                directionalShadow: [],
                directionalShadowMap: [],
                directionalShadowMatrix: [],
                spot: [],
                spotShadow: [],
                spotShadowMap: [],
                spotShadowMatrix: [],
                rectArea: [],
                point: [],
                pointShadow: [],
                pointShadowMap: [],
                pointShadowMatrix: [],
                hemi: []
            }, i = 0; i < 9; i++) r.probe.push(new V);
            var a = new V, o = new Q, s = new Q;
            return {
                setup: function (e, i, c) {
                    for (var l = 0, u = 0, h = 0, p = 0; p < 9; p++) r.probe[p].set(0, 0, 0);
                    var d = 0, f = 0, m = 0, v = 0, g = 0, y = 0, x = 0, b = 0, _ = c.matrixWorldInverse;
                    e.sort(ui), p = 0;
                    for (var w = e.length; p < w; p++) {
                        var M = e[p], S = M.color, T = M.intensity, E = M.distance,
                            A = M.shadow && M.shadow.map ? M.shadow.map.texture : null;
                        if (M.isAmbientLight) l += S.r * T, u += S.g * T, h += S.b * T; else if (M.isLightProbe) for (var L = 0; L < 9; L++) r.probe[L].addScaledVector(M.sh.coefficients[L], T); else if (M.isDirectionalLight) {
                            if ((C = t.get(M)).color.copy(M.color).multiplyScalar(M.intensity), C.direction.setFromMatrixPosition(M.matrixWorld), a.setFromMatrixPosition(M.target.matrixWorld), C.direction.sub(a), C.direction.transformDirection(_), M.castShadow) {
                                var R = M.shadow;
                                (P = n.get(M)).shadowBias = R.bias, P.shadowRadius = R.radius, P.shadowMapSize = R.mapSize, r.directionalShadow[d] = P, r.directionalShadowMap[d] = A, r.directionalShadowMatrix[d] = M.shadow.matrix, y++
                            }
                            r.directional[d] = C, d++
                        } else if (M.isSpotLight) {
                            if ((C = t.get(M)).position.setFromMatrixPosition(M.matrixWorld), C.position.applyMatrix4(_), C.color.copy(S).multiplyScalar(T), C.distance = E, C.direction.setFromMatrixPosition(M.matrixWorld), a.setFromMatrixPosition(M.target.matrixWorld), C.direction.sub(a), C.direction.transformDirection(_), C.coneCos = Math.cos(M.angle), C.penumbraCos = Math.cos(M.angle * (1 - M.penumbra)), C.decay = M.decay, M.castShadow) {
                                R = M.shadow;
                                (P = n.get(M)).shadowBias = R.bias, P.shadowRadius = R.radius, P.shadowMapSize = R.mapSize, r.spotShadow[m] = P, r.spotShadowMap[m] = A, r.spotShadowMatrix[m] = M.shadow.matrix, b++
                            }
                            r.spot[m] = C, m++
                        } else if (M.isRectAreaLight) {
                            (C = t.get(M)).color.copy(S).multiplyScalar(T), C.position.setFromMatrixPosition(M.matrixWorld), C.position.applyMatrix4(_), s.identity(), o.copy(M.matrixWorld), o.premultiply(_), s.extractRotation(o), C.halfWidth.set(.5 * M.width, 0, 0), C.halfHeight.set(0, .5 * M.height, 0), C.halfWidth.applyMatrix4(s), C.halfHeight.applyMatrix4(s), r.rectArea[v] = C, v++
                        } else if (M.isPointLight) {
                            if ((C = t.get(M)).position.setFromMatrixPosition(M.matrixWorld), C.position.applyMatrix4(_), C.color.copy(M.color).multiplyScalar(M.intensity), C.distance = M.distance, C.decay = M.decay, M.castShadow) {
                                var P;
                                R = M.shadow;
                                (P = n.get(M)).shadowBias = R.bias, P.shadowRadius = R.radius, P.shadowMapSize = R.mapSize, P.shadowCameraNear = R.camera.near, P.shadowCameraFar = R.camera.far, r.pointShadow[f] = P, r.pointShadowMap[f] = A, r.pointShadowMatrix[f] = M.shadow.matrix, x++
                            }
                            r.point[f] = C, f++
                        } else if (M.isHemisphereLight) {
                            var C;
                            (C = t.get(M)).direction.setFromMatrixPosition(M.matrixWorld), C.direction.transformDirection(_), C.direction.normalize(), C.skyColor.copy(M.color).multiplyScalar(T), C.groundColor.copy(M.groundColor).multiplyScalar(T), r.hemi[g] = C, g++
                        }
                    }
                    r.ambient[0] = l, r.ambient[1] = u, r.ambient[2] = h;
                    var O = r.hash;
                    O.directionalLength === d && O.pointLength === f && O.spotLength === m && O.rectAreaLength === v && O.hemiLength === g && O.numDirectionalShadows === y && O.numPointShadows === x && O.numSpotShadows === b || (r.directional.length = d, r.spot.length = m, r.rectArea.length = v, r.point.length = f, r.hemi.length = g, r.directionalShadow.length = y, r.directionalShadowMap.length = y, r.pointShadow.length = x, r.pointShadowMap.length = x, r.spotShadow.length = b, r.spotShadowMap.length = b, r.directionalShadowMatrix.length = y, r.pointShadowMatrix.length = x, r.spotShadowMatrix.length = b, O.directionalLength = d, O.pointLength = f, O.spotLength = m, O.rectAreaLength = v, O.hemiLength = g, O.numDirectionalShadows = y, O.numPointShadows = x, O.numSpotShadows = b, r.version = li++)
                }, state: r
            }
        }

        function pi() {
            var e = new hi, t = [], n = [];
            return {
                init: function () {
                    t.length = 0, n.length = 0
                }, state: {lightsArray: t, shadowsArray: n, lights: e}, setupLights: function (r) {
                    e.setup(t, n, r)
                }, pushLight: function (e) {
                    t.push(e)
                }, pushShadow: function (e) {
                    n.push(e)
                }
            }
        }

        function di() {
            var e = new WeakMap;

            function t(n) {
                var r = n.target;
                r.removeEventListener("dispose", t), e.delete(r)
            }

            return {
                get: function (n, r) {
                    var i;
                    return !1 === e.has(n) ? (i = new pi, e.set(n, new WeakMap), e.get(n).set(r, i), n.addEventListener("dispose", t)) : !1 === e.get(n).has(r) ? (i = new pi, e.get(n).set(r, i)) : i = e.get(n).get(r), i
                }, dispose: function () {
                    e = new WeakMap
                }
            }
        }

        function fi(e) {
            dt.call(this), this.type = "MeshDepthMaterial", this.depthPacking = 3200, this.skinning = !1, this.morphTargets = !1, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.fog = !1, this.setValues(e)
        }

        function mi(e) {
            dt.call(this), this.type = "MeshDistanceMaterial", this.referencePosition = new V, this.nearDistance = 1, this.farDistance = 1e3, this.skinning = !1, this.morphTargets = !1, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.fog = !1, this.setValues(e)
        }

        fi.prototype = Object.create(dt.prototype), fi.prototype.constructor = fi, fi.prototype.isMeshDepthMaterial = !0, fi.prototype.copy = function (e) {
            return dt.prototype.copy.call(this, e), this.depthPacking = e.depthPacking, this.skinning = e.skinning, this.morphTargets = e.morphTargets, this.map = e.map, this.alphaMap = e.alphaMap, this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this
        }, mi.prototype = Object.create(dt.prototype), mi.prototype.constructor = mi, mi.prototype.isMeshDistanceMaterial = !0, mi.prototype.copy = function (e) {
            return dt.prototype.copy.call(this, e), this.referencePosition.copy(e.referencePosition), this.nearDistance = e.nearDistance, this.farDistance = e.farDistance, this.skinning = e.skinning, this.morphTargets = e.morphTargets, this.map = e.map, this.alphaMap = e.alphaMap, this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this
        };

        function vi(e, t, n) {
            var r = new bn, i = new I, s = new I, c = new F, l = [], u = [], p = {}, d = {0: 1, 1: a, 2: o},
                m = new pn({
                    defines: {SAMPLE_RATE: 2 / 8, HALF_SAMPLE_RATE: 1 / 8},
                    uniforms: {shadow_pass: {value: null}, resolution: {value: new I}, radius: {value: 4}},
                    vertexShader: "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",
                    fragmentShader: "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n  float mean = 0.0;\n  float squared_mean = 0.0;\n\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );\n  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n    #ifdef HORIZONAL_PASS\n      vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n      mean += distribution.x;\n      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n    #else\n      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );\n      mean += depth;\n      squared_mean += depth * depth;\n    #endif\n  }\n  mean = mean * HALF_SAMPLE_RATE;\n  squared_mean = squared_mean * HALF_SAMPLE_RATE;\n  float std_dev = sqrt( squared_mean - mean * mean );\n  gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"
                }), v = m.clone();
            v.defines.HORIZONAL_PASS = 1;
            var g = new Dt;
            g.setAttribute("position", new vt(new Float32Array([-1, -1, .5, 3, -1, .5, -1, 3, .5]), 3));
            var x = new $t(g, m), b = this;

            function _(n, r) {
                var i = t.update(x);
                m.uniforms.shadow_pass.value = n.map.texture, m.uniforms.resolution.value = n.mapSize, m.uniforms.radius.value = n.radius, e.setRenderTarget(n.mapPass), e.clear(), e.renderBufferDirect(r, null, i, m, x, null), v.uniforms.shadow_pass.value = n.mapPass.texture, v.uniforms.resolution.value = n.mapSize, v.uniforms.radius.value = n.radius, e.setRenderTarget(n.map), e.clear(), e.renderBufferDirect(r, null, i, v, x, null)
            }

            function w(e, t, n) {
                var r = e << 0 | t << 1 | n << 2, i = l[r];
                return void 0 === i && (i = new fi({depthPacking: 3201, morphTargets: e, skinning: t}), l[r] = i), i
            }

            function M(e, t, n) {
                var r = e << 0 | t << 1 | n << 2, i = u[r];
                return void 0 === i && (i = new mi({morphTargets: e, skinning: t}), u[r] = i), i
            }

            function S(t, n, r, i, a, o, s) {
                var c = null, l = w, u = t.customDepthMaterial;
                if (!0 === i.isPointLight && (l = M, u = t.customDistanceMaterial), void 0 === u) {
                    var h = !1;
                    !0 === r.morphTargets && (h = n.morphAttributes && n.morphAttributes.position && n.morphAttributes.position.length > 0);
                    var f = !1;
                    !0 === t.isSkinnedMesh && (!0 === r.skinning ? f = !0 : console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:", t)), c = l(h, f, !0 === t.isInstancedMesh)
                } else c = u;
                if (e.localClippingEnabled && !0 === r.clipShadows && 0 !== r.clippingPlanes.length) {
                    var m = c.uuid, v = r.uuid, g = p[m];
                    void 0 === g && (g = {}, p[m] = g);
                    var y = g[v];
                    void 0 === y && (y = c.clone(), g[v] = y), c = y
                }
                return c.visible = r.visible, c.wireframe = r.wireframe, c.side = 3 === s ? null !== r.shadowSide ? r.shadowSide : r.side : null !== r.shadowSide ? r.shadowSide : d[r.side], c.clipShadows = r.clipShadows, c.clippingPlanes = r.clippingPlanes, c.clipIntersection = r.clipIntersection, c.wireframeLinewidth = r.wireframeLinewidth, c.linewidth = r.linewidth, !0 === i.isPointLight && !0 === c.isMeshDistanceMaterial && (c.referencePosition.setFromMatrixPosition(i.matrixWorld), c.nearDistance = a, c.farDistance = o), c
            }

            function T(n, i, a, o, s) {
                if (!1 !== n.visible) {
                    if (n.layers.test(i.layers) && (n.isMesh || n.isLine || n.isPoints) && (n.castShadow || n.receiveShadow && 3 === s) && (!n.frustumCulled || r.intersectsObject(n))) {
                        n.modelViewMatrix.multiplyMatrices(a.matrixWorldInverse, n.matrixWorld);
                        var c = t.update(n), l = n.material;
                        if (Array.isArray(l)) for (var u = c.groups, h = 0, p = u.length; h < p; h++) {
                            var d = u[h], f = l[d.materialIndex];
                            if (f && f.visible) {
                                var m = S(n, c, f, o, a.near, a.far, s);
                                e.renderBufferDirect(a, null, c, m, n, d)
                            }
                        } else if (l.visible) {
                            m = S(n, c, l, o, a.near, a.far, s);
                            e.renderBufferDirect(a, null, c, m, n, null)
                        }
                    }
                    for (var v = n.children, g = 0, y = v.length; g < y; g++) T(v[g], i, a, o, s)
                }
            }

            this.enabled = !1, this.autoUpdate = !0, this.needsUpdate = !1, this.type = 1, this.render = function (t, a, o) {
                if (!1 !== b.enabled && (!1 !== b.autoUpdate || !1 !== b.needsUpdate) && 0 !== t.length) {
                    var l = e.getRenderTarget(), u = e.getActiveCubeFace(), p = e.getActiveMipmapLevel(), d = e.state;
                    d.setBlending(0), d.buffers.color.setClear(1, 1, 1, 1), d.buffers.depth.setTest(!0), d.setScissorTest(!1);
                    for (var m = 0, v = t.length; m < v; m++) {
                        var g = t[m], x = g.shadow;
                        if (void 0 !== x) {
                            i.copy(x.mapSize);
                            var w = x.getFrameExtents();
                            if (i.multiply(w), s.copy(x.mapSize), (i.x > n || i.y > n) && (i.x > n && (s.x = Math.floor(n / w.x), i.x = s.x * w.x, x.mapSize.x = s.x), i.y > n && (s.y = Math.floor(n / w.y), i.y = s.y * w.y, x.mapSize.y = s.y)), null === x.map && !x.isPointLightShadow && 3 === this.type) {
                                var M = {minFilter: f, magFilter: f, format: y};
                                x.map = new B(i.x, i.y, M), x.map.texture.name = g.name + ".shadowMap", x.mapPass = new B(i.x, i.y, M), x.camera.updateProjectionMatrix()
                            }
                            if (null === x.map) {
                                M = {minFilter: h, magFilter: h, format: y};
                                x.map = new B(i.x, i.y, M), x.map.texture.name = g.name + ".shadowMap", x.camera.updateProjectionMatrix()
                            }
                            e.setRenderTarget(x.map), e.clear();
                            for (var S = x.getViewportCount(), E = 0; E < S; E++) {
                                var A = x.getViewport(E);
                                c.set(s.x * A.x, s.y * A.y, s.x * A.z, s.y * A.w), d.viewport(c), x.updateMatrices(g, E), r = x.getFrustum(), T(a, o, x.camera, g, this.type)
                            }
                            x.isPointLightShadow || 3 !== this.type || _(x, o)
                        } else console.warn("THREE.WebGLShadowMap:", g, "has no shadow.")
                    }
                    b.needsUpdate = !1, e.setRenderTarget(l, u, p)
                }
            }
        }

        function gi(e, t, n) {
            var r = n.isWebGL2;
            var i = new function () {
                    var t = !1, n = new F, r = null, i = new F(0, 0, 0, 0);
                    return {
                        setMask: function (n) {
                            r === n || t || (e.colorMask(n, n, n, n), r = n)
                        }, setLocked: function (e) {
                            t = e
                        }, setClear: function (t, r, a, o, s) {
                            !0 === s && (t *= o, r *= o, a *= o), n.set(t, r, a, o), !1 === i.equals(n) && (e.clearColor(t, r, a, o), i.copy(n))
                        }, reset: function () {
                            t = !1, r = null, i.set(-1, 0, 0, 0)
                        }
                    }
                }, a = new function () {
                    var t = !1, n = null, r = null, i = null;
                    return {
                        setTest: function (e) {
                            e ? G(2929) : k(2929)
                        }, setMask: function (r) {
                            n === r || t || (e.depthMask(r), n = r)
                        }, setFunc: function (t) {
                            if (r !== t) {
                                if (t) switch (t) {
                                    case 0:
                                        e.depthFunc(512);
                                        break;
                                    case 1:
                                        e.depthFunc(519);
                                        break;
                                    case 2:
                                        e.depthFunc(513);
                                        break;
                                    case 3:
                                        e.depthFunc(515);
                                        break;
                                    case 4:
                                        e.depthFunc(514);
                                        break;
                                    case 5:
                                        e.depthFunc(518);
                                        break;
                                    case 6:
                                        e.depthFunc(516);
                                        break;
                                    case 7:
                                        e.depthFunc(517);
                                        break;
                                    default:
                                        e.depthFunc(515)
                                } else e.depthFunc(515);
                                r = t
                            }
                        }, setLocked: function (e) {
                            t = e
                        }, setClear: function (t) {
                            i !== t && (e.clearDepth(t), i = t)
                        }, reset: function () {
                            t = !1, n = null, r = null, i = null
                        }
                    }
                }, c = new function () {
                    var t = !1, n = null, r = null, i = null, a = null, o = null, s = null, c = null, l = null;
                    return {
                        setTest: function (e) {
                            t || (e ? G(2960) : k(2960))
                        }, setMask: function (r) {
                            n === r || t || (e.stencilMask(r), n = r)
                        }, setFunc: function (t, n, o) {
                            r === t && i === n && a === o || (e.stencilFunc(t, n, o), r = t, i = n, a = o)
                        }, setOp: function (t, n, r) {
                            o === t && s === n && c === r || (e.stencilOp(t, n, r), o = t, s = n, c = r)
                        }, setLocked: function (e) {
                            t = e
                        }, setClear: function (t) {
                            l !== t && (e.clearStencil(t), l = t)
                        }, reset: function () {
                            t = !1, n = null, r = null, i = null, a = null, o = null, s = null, c = null, l = null
                        }
                    }
                }, l = e.getParameter(34921), u = new Uint8Array(l), h = new Uint8Array(l), p = new Uint8Array(l), d = {},
                f = null, m = null, v = null, g = null, y = null, x = null, b = null, _ = null, w = null, M = !1,
                S = null, T = null, E = null, A = null, L = null, R = e.getParameter(35661), P = !1, C = 0,
                O = e.getParameter(7938);
            -1 !== O.indexOf("WebGL") ? (C = parseFloat(/^WebGL\ ([0-9])/.exec(O)[1]), P = C >= 1) : -1 !== O.indexOf("OpenGL ES") && (C = parseFloat(/^OpenGL\ ES\ ([0-9])/.exec(O)[1]), P = C >= 2);
            var I = null, N = {}, D = new F, U = new F;

            function z(t, n, r) {
                var i = new Uint8Array(4), a = e.createTexture();
                e.bindTexture(t, a), e.texParameteri(t, 10241, 9728), e.texParameteri(t, 10240, 9728);
                for (var o = 0; o < r; o++) e.texImage2D(n + o, 0, 6408, 1, 1, 0, 6408, 5121, i);
                return a
            }

            var B = {};

            function H(n, i) {
                (u[n] = 1, 0 === h[n] && (e.enableVertexAttribArray(n), h[n] = 1), p[n] !== i) && ((r ? e : t.get("ANGLE_instanced_arrays"))[r ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](n, i), p[n] = i)
            }

            function G(t) {
                !0 !== d[t] && (e.enable(t), d[t] = !0)
            }

            function k(t) {
                !1 !== d[t] && (e.disable(t), d[t] = !1)
            }

            B[3553] = z(3553, 3553, 1), B[34067] = z(34067, 34069, 6), i.setClear(0, 0, 0, 1), a.setClear(1), c.setClear(0), G(2929), a.setFunc(3), X(!1), Y(1), G(2884), q(0);
            var j = {100: 32774, 101: 32778, 102: 32779};
            if (r) j[103] = 32775, j[104] = 32776; else {
                var V = t.get("EXT_blend_minmax");
                null !== V && (j[103] = V.MIN_EXT, j[104] = V.MAX_EXT)
            }
            var W = {
                200: 0,
                201: 1,
                202: 768,
                204: 770,
                210: 776,
                208: 774,
                206: 772,
                203: 769,
                205: 771,
                209: 775,
                207: 773
            };

            function q(t, n, r, i, a, o, c, l) {
                if (0 !== t) {
                    if (m || (G(3042), m = !0), 5 === t) a = a || n, o = o || r, c = c || i, n === g && a === b || (e.blendEquationSeparate(j[n], j[a]), g = n, b = a), r === y && i === x && o === _ && c === w || (e.blendFuncSeparate(W[r], W[i], W[o], W[c]), y = r, x = i, _ = o, w = c), v = t, M = null; else if (t !== v || l !== M) {
                        if (100 === g && 100 === b || (e.blendEquation(32774), g = 100, b = 100), l) switch (t) {
                            case 1:
                                e.blendFuncSeparate(1, 771, 1, 771);
                                break;
                            case 2:
                                e.blendFunc(1, 1);
                                break;
                            case 3:
                                e.blendFuncSeparate(0, 0, 769, 771);
                                break;
                            case s:
                                e.blendFuncSeparate(0, 768, 0, 770);
                                break;
                            default:
                                console.error("THREE.WebGLState: Invalid blending: ", t)
                        } else switch (t) {
                            case 1:
                                e.blendFuncSeparate(770, 771, 1, 771);
                                break;
                            case 2:
                                e.blendFunc(770, 1);
                                break;
                            case 3:
                                e.blendFunc(0, 769);
                                break;
                            case s:
                                e.blendFunc(0, 768);
                                break;
                            default:
                                console.error("THREE.WebGLState: Invalid blending: ", t)
                        }
                        y = null, x = null, _ = null, w = null, v = t, M = l
                    }
                } else m && (k(3042), m = !1)
            }

            function X(t) {
                S !== t && (t ? e.frontFace(2304) : e.frontFace(2305), S = t)
            }

            function Y(t) {
                0 !== t ? (G(2884), t !== T && (1 === t ? e.cullFace(1029) : 2 === t ? e.cullFace(1028) : e.cullFace(1032))) : k(2884), T = t
            }

            function J(t, n, r) {
                t ? (G(32823), A === n && L === r || (e.polygonOffset(n, r), A = n, L = r)) : k(32823)
            }

            function Z(t) {
                void 0 === t && (t = 33984 + R - 1), I !== t && (e.activeTexture(t), I = t)
            }

            return {
                buffers: {color: i, depth: a, stencil: c}, initAttributes: function () {
                    for (var e = 0, t = u.length; e < t; e++) u[e] = 0
                }, enableAttribute: function (e) {
                    H(e, 0)
                }, enableAttributeAndDivisor: H, disableUnusedAttributes: function () {
                    for (var t = 0, n = h.length; t !== n; ++t) h[t] !== u[t] && (e.disableVertexAttribArray(t), h[t] = 0)
                }, vertexAttribPointer: function (t, n, i, a, o, s) {
                    !0 !== r || 5124 !== i && 5125 !== i ? e.vertexAttribPointer(t, n, i, a, o, s) : e.vertexAttribIPointer(t, n, i, a, o, s)
                }, enable: G, disable: k, useProgram: function (t) {
                    return f !== t && (e.useProgram(t), f = t, !0)
                }, setBlending: q, setMaterial: function (e, t) {
                    e.side === o ? k(2884) : G(2884);
                    var n = 1 === e.side;
                    t && (n = !n), X(n), 1 === e.blending && !1 === e.transparent ? q(0) : q(e.blending, e.blendEquation, e.blendSrc, e.blendDst, e.blendEquationAlpha, e.blendSrcAlpha, e.blendDstAlpha, e.premultipliedAlpha), a.setFunc(e.depthFunc), a.setTest(e.depthTest), a.setMask(e.depthWrite), i.setMask(e.colorWrite);
                    var r = e.stencilWrite;
                    c.setTest(r), r && (c.setMask(e.stencilWriteMask), c.setFunc(e.stencilFunc, e.stencilRef, e.stencilFuncMask), c.setOp(e.stencilFail, e.stencilZFail, e.stencilZPass)), J(e.polygonOffset, e.polygonOffsetFactor, e.polygonOffsetUnits)
                }, setFlipSided: X, setCullFace: Y, setLineWidth: function (t) {
                    t !== E && (P && e.lineWidth(t), E = t)
                }, setPolygonOffset: J, setScissorTest: function (e) {
                    e ? G(3089) : k(3089)
                }, activeTexture: Z, bindTexture: function (t, n) {
                    null === I && Z();
                    var r = N[I];
                    void 0 === r && (r = {
                        type: void 0,
                        texture: void 0
                    }, N[I] = r), r.type === t && r.texture === n || (e.bindTexture(t, n || B[t]), r.type = t, r.texture = n)
                }, unbindTexture: function () {
                    var t = N[I];
                    void 0 !== t && void 0 !== t.type && (e.bindTexture(t.type, null), t.type = void 0, t.texture = void 0)
                }, compressedTexImage2D: function () {
                    try {
                        e.compressedTexImage2D.apply(e, arguments)
                    } catch (e) {
                        console.error("THREE.WebGLState:", e)
                    }
                }, texImage2D: function () {
                    try {
                        e.texImage2D.apply(e, arguments)
                    } catch (e) {
                        console.error("THREE.WebGLState:", e)
                    }
                }, texImage3D: function () {
                    try {
                        e.texImage3D.apply(e, arguments)
                    } catch (e) {
                        console.error("THREE.WebGLState:", e)
                    }
                }, scissor: function (t) {
                    !1 === D.equals(t) && (e.scissor(t.x, t.y, t.z, t.w), D.copy(t))
                }, viewport: function (t) {
                    !1 === U.equals(t) && (e.viewport(t.x, t.y, t.z, t.w), U.copy(t))
                }, reset: function () {
                    for (var t = 0; t < h.length; t++) 1 === h[t] && (e.disableVertexAttribArray(t), h[t] = 0);
                    d = {}, I = null, N = {}, f = null, v = null, S = null, T = null, i.reset(), a.reset(), c.reset()
                }
            }
        }

        function yi(e, t, n, r, i, a, o) {
            var s, x = i.isWebGL2, b = i.maxTextures, _ = i.maxCubemapSize, w = i.maxTextureSize, M = i.maxSamples,
                S = new WeakMap, T = !1;
            try {
                T = "undefined" != typeof OffscreenCanvas && null !== new OffscreenCanvas(1, 1).getContext("2d")
            } catch (e) {
            }

            function E(e, t) {
                return T ? new OffscreenCanvas(e, t) : document.createElementNS("http://www.w3.org/1999/xhtml", "canvas")
            }

            function A(e, t, n, r) {
                var i = 1;
                if ((e.width > r || e.height > r) && (i = r / Math.max(e.width, e.height)), i < 1 || !0 === t) {
                    if ("undefined" != typeof HTMLImageElement && e instanceof HTMLImageElement || "undefined" != typeof HTMLCanvasElement && e instanceof HTMLCanvasElement || "undefined" != typeof ImageBitmap && e instanceof ImageBitmap) {
                        var a = t ? O.floorPowerOfTwo : Math.floor, o = a(i * e.width), c = a(i * e.height);
                        void 0 === s && (s = E(o, c));
                        var l = n ? E(o, c) : s;
                        return l.width = o, l.height = c, l.getContext("2d").drawImage(e, 0, 0, o, c), console.warn("THREE.WebGLRenderer: Texture has been resized from (" + e.width + "x" + e.height + ") to (" + o + "x" + c + ")."), l
                    }
                    return "data" in e && console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + e.width + "x" + e.height + ")."), e
                }
                return e
            }

            function L(e) {
                return O.isPowerOfTwo(e.width) && O.isPowerOfTwo(e.height)
            }

            function R(e, t) {
                return e.generateMipmaps && t && e.minFilter !== h && e.minFilter !== f
            }

            function P(t, n, i, a) {
                e.generateMipmap(t), r.get(n).__maxMipLevel = Math.log(Math.max(i, a)) * Math.LOG2E
            }

            function C(n, r, i) {
                if (!1 === x) return r;
                if (null !== n) {
                    if (void 0 !== e[n]) return e[n];
                    console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + n + "'")
                }
                var a = r;
                return 6403 === r && (5126 === i && (a = 33326), 5131 === i && (a = 33325), 5121 === i && (a = 33321)), 6407 === r && (5126 === i && (a = 34837), 5131 === i && (a = 34843), 5121 === i && (a = 32849)), 6408 === r && (5126 === i && (a = 34836), 5131 === i && (a = 34842), 5121 === i && (a = 32856)), 33325 !== a && 33326 !== a && 34842 !== a && 34836 !== a || t.get("EXT_color_buffer_float"), a
            }

            function I(e) {
                return e === h || e === p || e === d ? 9728 : 9729
            }

            function N(t) {
                var n = t.target;
                n.removeEventListener("dispose", N), function (t) {
                    var n = r.get(t);
                    if (void 0 === n.__webglInit) return;
                    e.deleteTexture(n.__webglTexture), r.remove(t)
                }(n), n.isVideoTexture && S.delete(n), o.memory.textures--
            }

            function D(t) {
                var n = t.target;
                n.removeEventListener("dispose", D), function (t) {
                    var n = r.get(t), i = r.get(t.texture);
                    if (!t) return;
                    void 0 !== i.__webglTexture && e.deleteTexture(i.__webglTexture);
                    t.depthTexture && t.depthTexture.dispose();
                    if (t.isWebGLCubeRenderTarget) for (var a = 0; a < 6; a++) e.deleteFramebuffer(n.__webglFramebuffer[a]), n.__webglDepthbuffer && e.deleteRenderbuffer(n.__webglDepthbuffer[a]); else e.deleteFramebuffer(n.__webglFramebuffer), n.__webglDepthbuffer && e.deleteRenderbuffer(n.__webglDepthbuffer), n.__webglMultisampledFramebuffer && e.deleteFramebuffer(n.__webglMultisampledFramebuffer), n.__webglColorRenderbuffer && e.deleteRenderbuffer(n.__webglColorRenderbuffer), n.__webglDepthRenderbuffer && e.deleteRenderbuffer(n.__webglDepthRenderbuffer);
                    r.remove(t.texture), r.remove(t)
                }(n), o.memory.textures--
            }

            var U = 0;

            function z(e, t) {
                var i = r.get(e);
                if (e.isVideoTexture && function (e) {
                    var t = o.render.frame;
                    S.get(e) !== t && (S.set(e, t), e.update())
                }(e), e.version > 0 && i.__version !== e.version) {
                    var a = e.image;
                    if (void 0 === a) console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined"); else {
                        if (!1 !== a.complete) return void V(i, e, t);
                        console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")
                    }
                }
                n.activeTexture(33984 + t), n.bindTexture(3553, i.__webglTexture)
            }

            function F(t, i) {
                if (6 === t.image.length) {
                    var o = r.get(t);
                    if (t.version > 0 && o.__version !== t.version) {
                        j(o, t), n.activeTexture(33984 + i), n.bindTexture(34067, o.__webglTexture), e.pixelStorei(37440, t.flipY);
                        for (var s = t && (t.isCompressedTexture || t.image[0].isCompressedTexture), c = t.image[0] && t.image[0].isDataTexture, l = [], u = 0; u < 6; u++) l[u] = s || c ? c ? t.image[u].image : t.image[u] : A(t.image[u], !1, !0, _);
                        var h, p = l[0], d = L(p) || x, f = a.convert(t.format), m = a.convert(t.type),
                            v = C(t.internalFormat, f, m);
                        if (k(34067, t, d), s) {
                            for (u = 0; u < 6; u++) {
                                h = l[u].mipmaps;
                                for (var b = 0; b < h.length; b++) {
                                    var w = h[b];
                                    t.format !== y && t.format !== g ? null !== f ? n.compressedTexImage2D(34069 + u, b, v, w.width, w.height, 0, w.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : n.texImage2D(34069 + u, b, v, w.width, w.height, 0, f, m, w.data)
                                }
                            }
                            o.__maxMipLevel = h.length - 1
                        } else {
                            h = t.mipmaps;
                            for (u = 0; u < 6; u++) if (c) {
                                n.texImage2D(34069 + u, 0, v, l[u].width, l[u].height, 0, f, m, l[u].data);
                                for (b = 0; b < h.length; b++) {
                                    var M = (w = h[b]).image[u].image;
                                    n.texImage2D(34069 + u, b + 1, v, M.width, M.height, 0, f, m, M.data)
                                }
                            } else {
                                n.texImage2D(34069 + u, 0, v, f, m, l[u]);
                                for (b = 0; b < h.length; b++) {
                                    w = h[b];
                                    n.texImage2D(34069 + u, b + 1, v, f, m, w.image[u])
                                }
                            }
                            o.__maxMipLevel = h.length
                        }
                        R(t, d) && P(34067, t, p.width, p.height), o.__version = t.version, t.onUpdate && t.onUpdate(t)
                    } else n.activeTexture(33984 + i), n.bindTexture(34067, o.__webglTexture)
                }
            }

            function B(e, t) {
                n.activeTexture(33984 + t), n.bindTexture(34067, r.get(e).__webglTexture)
            }

            var H = {[c]: 10497, [l]: 33071, [u]: 33648},
                G = {[h]: 9728, [p]: 9984, [d]: 9986, [f]: 9729, [m]: 9985, [v]: 9987};

            function k(n, a, o) {
                o ? (e.texParameteri(n, 10242, H[a.wrapS]), e.texParameteri(n, 10243, H[a.wrapT]), 32879 !== n && 35866 !== n || e.texParameteri(n, 32882, H[a.wrapR]), e.texParameteri(n, 10240, G[a.magFilter]), e.texParameteri(n, 10241, G[a.minFilter])) : (e.texParameteri(n, 10242, 33071), e.texParameteri(n, 10243, 33071), 32879 !== n && 35866 !== n || e.texParameteri(n, 32882, 33071), a.wrapS === l && a.wrapT === l || console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."), e.texParameteri(n, 10240, I(a.magFilter)), e.texParameteri(n, 10241, I(a.minFilter)), a.minFilter !== h && a.minFilter !== f && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter."));
                var s = t.get("EXT_texture_filter_anisotropic");
                if (s) {
                    if (1015 === a.type && null === t.get("OES_texture_float_linear")) return;
                    if (1016 === a.type && null === (x || t.get("OES_texture_half_float_linear"))) return;
                    (a.anisotropy > 1 || r.get(a).__currentAnisotropy) && (e.texParameterf(n, s.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(a.anisotropy, i.getMaxAnisotropy())), r.get(a).__currentAnisotropy = a.anisotropy)
                }
            }

            function j(t, n) {
                void 0 === t.__webglInit && (t.__webglInit = !0, n.addEventListener("dispose", N), t.__webglTexture = e.createTexture(), o.memory.textures++)
            }

            function V(t, r, i) {
                var o = 3553;
                r.isDataTexture2DArray && (o = 35866), r.isDataTexture3D && (o = 32879), j(t, r), n.activeTexture(33984 + i), n.bindTexture(o, t.__webglTexture), e.pixelStorei(37440, r.flipY), e.pixelStorei(37441, r.premultiplyAlpha), e.pixelStorei(3317, r.unpackAlignment);
                var s = function (e) {
                        return !x && (e.wrapS !== l || e.wrapT !== l || e.minFilter !== h && e.minFilter !== f)
                    }(r) && !1 === L(r.image), c = A(r.image, s, !1, w), u = L(c) || x, p = a.convert(r.format),
                    d = a.convert(r.type), m = C(r.internalFormat, p, d);
                k(o, r, u);
                var v, b = r.mipmaps;
                if (r.isDepthTexture) m = 6402, x ? m = 1015 === r.type ? 36012 : 1014 === r.type ? 33190 : 1020 === r.type ? 35056 : 33189 : 1015 === r.type && console.error("WebGLRenderer: Floating point depth texture requires WebGL2."), 1026 === r.format && 6402 === m && 1012 !== r.type && 1014 !== r.type && (console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."), r.type = 1012, d = a.convert(r.type)), 1027 === r.format && 6402 === m && (m = 34041, 1020 !== r.type && (console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."), r.type = 1020, d = a.convert(r.type))), n.texImage2D(3553, 0, m, c.width, c.height, 0, p, d, null); else if (r.isDataTexture) if (b.length > 0 && u) {
                    for (var _ = 0, M = b.length; _ < M; _++) v = b[_], n.texImage2D(3553, _, m, v.width, v.height, 0, p, d, v.data);
                    r.generateMipmaps = !1, t.__maxMipLevel = b.length - 1
                } else n.texImage2D(3553, 0, m, c.width, c.height, 0, p, d, c.data), t.__maxMipLevel = 0; else if (r.isCompressedTexture) {
                    for (_ = 0, M = b.length; _ < M; _++) v = b[_], r.format !== y && r.format !== g ? null !== p ? n.compressedTexImage2D(3553, _, m, v.width, v.height, 0, v.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : n.texImage2D(3553, _, m, v.width, v.height, 0, p, d, v.data);
                    t.__maxMipLevel = b.length - 1
                } else if (r.isDataTexture2DArray) n.texImage3D(35866, 0, m, c.width, c.height, c.depth, 0, p, d, c.data), t.__maxMipLevel = 0; else if (r.isDataTexture3D) n.texImage3D(32879, 0, m, c.width, c.height, c.depth, 0, p, d, c.data), t.__maxMipLevel = 0; else if (b.length > 0 && u) {
                    for (_ = 0, M = b.length; _ < M; _++) v = b[_], n.texImage2D(3553, _, m, p, d, v);
                    r.generateMipmaps = !1, t.__maxMipLevel = b.length - 1
                } else n.texImage2D(3553, 0, m, p, d, c), t.__maxMipLevel = 0;
                R(r, u) && P(o, r, c.width, c.height), t.__version = r.version, r.onUpdate && r.onUpdate(r)
            }

            function W(t, i, o, s) {
                var c = a.convert(i.texture.format), l = a.convert(i.texture.type),
                    u = C(i.texture.internalFormat, c, l);
                n.texImage2D(s, 0, u, i.width, i.height, 0, c, l, null), e.bindFramebuffer(36160, t), e.framebufferTexture2D(36160, o, s, r.get(i.texture).__webglTexture, 0), e.bindFramebuffer(36160, null)
            }

            function q(t, n, r) {
                if (e.bindRenderbuffer(36161, t), n.depthBuffer && !n.stencilBuffer) {
                    var i = 33189;
                    if (r) {
                        var o = n.depthTexture;
                        o && o.isDepthTexture && (1015 === o.type ? i = 36012 : 1014 === o.type && (i = 33190));
                        var s = Y(n);
                        e.renderbufferStorageMultisample(36161, s, i, n.width, n.height)
                    } else e.renderbufferStorage(36161, i, n.width, n.height);
                    e.framebufferRenderbuffer(36160, 36096, 36161, t)
                } else if (n.depthBuffer && n.stencilBuffer) {
                    if (r) {
                        s = Y(n);
                        e.renderbufferStorageMultisample(36161, s, 35056, n.width, n.height)
                    } else e.renderbufferStorage(36161, 34041, n.width, n.height);
                    e.framebufferRenderbuffer(36160, 33306, 36161, t)
                } else {
                    var c = a.convert(n.texture.format), l = a.convert(n.texture.type);
                    i = C(n.texture.internalFormat, c, l);
                    if (r) {
                        s = Y(n);
                        e.renderbufferStorageMultisample(36161, s, i, n.width, n.height)
                    } else e.renderbufferStorage(36161, i, n.width, n.height)
                }
                e.bindRenderbuffer(36161, null)
            }

            function X(t) {
                var n = r.get(t), i = !0 === t.isWebGLCubeRenderTarget;
                if (t.depthTexture) {
                    if (i) throw new Error("target.depthTexture not supported in Cube render targets");
                    !function (t, n) {
                        if (n && n.isWebGLCubeRenderTarget) throw new Error("Depth Texture with cube render targets is not supported");
                        if (e.bindFramebuffer(36160, t), !n.depthTexture || !n.depthTexture.isDepthTexture) throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
                        r.get(n.depthTexture).__webglTexture && n.depthTexture.image.width === n.width && n.depthTexture.image.height === n.height || (n.depthTexture.image.width = n.width, n.depthTexture.image.height = n.height, n.depthTexture.needsUpdate = !0), z(n.depthTexture, 0);
                        var i = r.get(n.depthTexture).__webglTexture;
                        if (1026 === n.depthTexture.format) e.framebufferTexture2D(36160, 36096, 3553, i, 0); else {
                            if (1027 !== n.depthTexture.format) throw new Error("Unknown depthTexture format");
                            e.framebufferTexture2D(36160, 33306, 3553, i, 0)
                        }
                    }(n.__webglFramebuffer, t)
                } else if (i) {
                    n.__webglDepthbuffer = [];
                    for (var a = 0; a < 6; a++) e.bindFramebuffer(36160, n.__webglFramebuffer[a]), n.__webglDepthbuffer[a] = e.createRenderbuffer(), q(n.__webglDepthbuffer[a], t, !1)
                } else e.bindFramebuffer(36160, n.__webglFramebuffer), n.__webglDepthbuffer = e.createRenderbuffer(), q(n.__webglDepthbuffer, t, !1);
                e.bindFramebuffer(36160, null)
            }

            function Y(e) {
                return x && e.isWebGLMultisampleRenderTarget ? Math.min(M, e.samples) : 0
            }

            var J = !1, Z = !1;
            this.allocateTextureUnit = function () {
                var e = U;
                return e >= b && console.warn("THREE.WebGLTextures: Trying to use " + e + " texture units while this GPU supports only " + b), U += 1, e
            }, this.resetTextureUnits = function () {
                U = 0
            }, this.setTexture2D = z, this.setTexture2DArray = function (e, t) {
                var i = r.get(e);
                e.version > 0 && i.__version !== e.version ? V(i, e, t) : (n.activeTexture(33984 + t), n.bindTexture(35866, i.__webglTexture))
            }, this.setTexture3D = function (e, t) {
                var i = r.get(e);
                e.version > 0 && i.__version !== e.version ? V(i, e, t) : (n.activeTexture(33984 + t), n.bindTexture(32879, i.__webglTexture))
            }, this.setTextureCube = F, this.setTextureCubeDynamic = B, this.setupRenderTarget = function (t) {
                var i = r.get(t), s = r.get(t.texture);
                t.addEventListener("dispose", D), s.__webglTexture = e.createTexture(), o.memory.textures++;
                var c = !0 === t.isWebGLCubeRenderTarget, l = !0 === t.isWebGLMultisampleRenderTarget, u = L(t) || x;
                if (!x || t.texture.format !== g || 1015 !== t.texture.type && 1016 !== t.texture.type || (t.texture.format = y, console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.")), c) {
                    i.__webglFramebuffer = [];
                    for (var h = 0; h < 6; h++) i.__webglFramebuffer[h] = e.createFramebuffer()
                } else if (i.__webglFramebuffer = e.createFramebuffer(), l) if (x) {
                    i.__webglMultisampledFramebuffer = e.createFramebuffer(), i.__webglColorRenderbuffer = e.createRenderbuffer(), e.bindRenderbuffer(36161, i.__webglColorRenderbuffer);
                    var p = a.convert(t.texture.format), d = a.convert(t.texture.type),
                        f = C(t.texture.internalFormat, p, d), m = Y(t);
                    e.renderbufferStorageMultisample(36161, m, f, t.width, t.height), e.bindFramebuffer(36160, i.__webglMultisampledFramebuffer), e.framebufferRenderbuffer(36160, 36064, 36161, i.__webglColorRenderbuffer), e.bindRenderbuffer(36161, null), t.depthBuffer && (i.__webglDepthRenderbuffer = e.createRenderbuffer(), q(i.__webglDepthRenderbuffer, t, !0)), e.bindFramebuffer(36160, null)
                } else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
                if (c) {
                    n.bindTexture(34067, s.__webglTexture), k(34067, t.texture, u);
                    for (h = 0; h < 6; h++) W(i.__webglFramebuffer[h], t, 36064, 34069 + h);
                    R(t.texture, u) && P(34067, t.texture, t.width, t.height), n.bindTexture(34067, null)
                } else n.bindTexture(3553, s.__webglTexture), k(3553, t.texture, u), W(i.__webglFramebuffer, t, 36064, 3553), R(t.texture, u) && P(3553, t.texture, t.width, t.height), n.bindTexture(3553, null);
                t.depthBuffer && X(t)
            }, this.updateRenderTargetMipmap = function (e) {
                var t = e.texture;
                if (R(t, L(e) || x)) {
                    var i = e.isWebGLCubeRenderTarget ? 34067 : 3553, a = r.get(t).__webglTexture;
                    n.bindTexture(i, a), P(i, t, e.width, e.height), n.bindTexture(i, null)
                }
            }, this.updateMultisampleRenderTarget = function (t) {
                if (t.isWebGLMultisampleRenderTarget) if (x) {
                    var n = r.get(t);
                    e.bindFramebuffer(36008, n.__webglMultisampledFramebuffer), e.bindFramebuffer(36009, n.__webglFramebuffer);
                    var i = t.width, a = t.height, o = 16384;
                    t.depthBuffer && (o |= 256), t.stencilBuffer && (o |= 1024), e.blitFramebuffer(0, 0, i, a, 0, 0, i, a, o, 9728), e.bindFramebuffer(36160, n.__webglMultisampledFramebuffer)
                } else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")
            }, this.safeSetTexture2D = function (e, t) {
                e && e.isWebGLRenderTarget && (!1 === J && (console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."), J = !0), e = e.texture), z(e, t)
            }, this.safeSetTextureCube = function (e, t) {
                e && e.isWebGLCubeRenderTarget && (!1 === Z && (console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."), Z = !0), e = e.texture), e && e.isCubeTexture || Array.isArray(e.image) && 6 === e.image.length ? F(e, t) : B(e, t)
            }
        }

        function xi(e, t, n) {
            var r = n.isWebGL2;
            return {
                convert: function (e) {
                    var n;
                    if (1009 === e) return 5121;
                    if (1017 === e) return 32819;
                    if (1018 === e) return 32820;
                    if (1019 === e) return 33635;
                    if (1010 === e) return 5120;
                    if (1011 === e) return 5122;
                    if (1012 === e) return 5123;
                    if (1013 === e) return 5124;
                    if (1014 === e) return 5125;
                    if (1015 === e) return 5126;
                    if (1016 === e) return r ? 5131 : null !== (n = t.get("OES_texture_half_float")) ? n.HALF_FLOAT_OES : null;
                    if (1021 === e) return 6406;
                    if (e === g) return 6407;
                    if (e === y) return 6408;
                    if (1024 === e) return 6409;
                    if (1025 === e) return 6410;
                    if (1026 === e) return 6402;
                    if (1027 === e) return 34041;
                    if (1028 === e) return 6403;
                    if (1029 === e) return 36244;
                    if (1030 === e) return 33319;
                    if (1031 === e) return 33320;
                    if (1032 === e) return 36248;
                    if (1033 === e) return 36249;
                    if (33776 === e || 33777 === e || 33778 === e || 33779 === e) {
                        if (null === (n = t.get("WEBGL_compressed_texture_s3tc"))) return null;
                        if (33776 === e) return n.COMPRESSED_RGB_S3TC_DXT1_EXT;
                        if (33777 === e) return n.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                        if (33778 === e) return n.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                        if (33779 === e) return n.COMPRESSED_RGBA_S3TC_DXT5_EXT
                    }
                    if (35840 === e || 35841 === e || 35842 === e || 35843 === e) {
                        if (null === (n = t.get("WEBGL_compressed_texture_pvrtc"))) return null;
                        if (35840 === e) return n.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
                        if (35841 === e) return n.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
                        if (35842 === e) return n.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
                        if (35843 === e) return n.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG
                    }
                    if (36196 === e) return null !== (n = t.get("WEBGL_compressed_texture_etc1")) ? n.COMPRESSED_RGB_ETC1_WEBGL : null;
                    if ((37492 === e || 37496 === e) && null !== (n = t.get("WEBGL_compressed_texture_etc"))) {
                        if (37492 === e) return n.COMPRESSED_RGB8_ETC2;
                        if (37496 === e) return n.COMPRESSED_RGBA8_ETC2_EAC
                    }
                    return 37808 === e || 37809 === e || 37810 === e || 37811 === e || 37812 === e || 37813 === e || 37814 === e || 37815 === e || 37816 === e || 37817 === e || 37818 === e || 37819 === e || 37820 === e || 37821 === e || 37840 === e || 37841 === e || 37842 === e || 37843 === e || 37844 === e || 37845 === e || 37846 === e || 37847 === e || 37848 === e || 37849 === e || 37850 === e || 37851 === e || 37852 === e || 37853 === e ? null !== (n = t.get("WEBGL_compressed_texture_astc")) ? e : null : 36492 === e ? null !== (n = t.get("EXT_texture_compression_bptc")) ? e : null : 1020 === e ? r ? 34042 : null !== (n = t.get("WEBGL_depth_texture")) ? n.UNSIGNED_INT_24_8_WEBGL : null : void 0
                }
            }
        }

        function bi(e) {
            fn.call(this), this.cameras = e || []
        }

        function _i() {
            ve.call(this), this.type = "Group"
        }

        function wi() {
            this._targetRay = null, this._grip = null
        }

        function Mi(e, t) {
            var n = this, r = null, i = 1, a = null, o = "local-floor", s = null, c = [], l = new Map, u = new fn;
            u.layers.enable(1), u.viewport = new F;
            var h = new fn;
            h.layers.enable(2), h.viewport = new F;
            var p = [u, h], d = new bi;
            d.layers.enable(1), d.layers.enable(2);
            var f = null, m = null;

            function v(e) {
                var t = l.get(e.inputSource);
                t && t.dispatchEvent({type: e.type})
            }

            function g() {
                l.forEach((function (e, t) {
                    e.disconnect(t)
                })), l.clear(), e.setFramebuffer(null), e.setRenderTarget(e.getRenderTarget()), S.stop(), n.isPresenting = !1, n.dispatchEvent({type: "sessionend"})
            }

            function y(e) {
                a = e, S.setContext(r), S.start(), n.isPresenting = !0, n.dispatchEvent({type: "sessionstart"})
            }

            function x(e) {
                for (var t = r.inputSources, n = 0; n < c.length; n++) l.set(t[n], c[n]);
                for (n = 0; n < e.removed.length; n++) {
                    var i = e.removed[n];
                    (a = l.get(i)) && (a.dispatchEvent({type: "disconnected", data: i}), l.delete(i))
                }
                for (n = 0; n < e.added.length; n++) {
                    var a;
                    i = e.added[n];
                    (a = l.get(i)) && a.dispatchEvent({type: "connected", data: i})
                }
            }

            this.enabled = !1, this.isPresenting = !1, this.getController = function (e) {
                var t = c[e];
                return void 0 === t && (t = new wi, c[e] = t), t.getTargetRaySpace()
            }, this.getControllerGrip = function (e) {
                var t = c[e];
                return void 0 === t && (t = new wi, c[e] = t), t.getGripSpace()
            }, this.setFramebufferScaleFactor = function (e) {
                i = e, !0 === n.isPresenting && console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")
            }, this.setReferenceSpaceType = function (e) {
                o = e, !0 === n.isPresenting && console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")
            }, this.getReferenceSpace = function () {
                return a
            }, this.getSession = function () {
                return r
            }, this.setSession = function (e) {
                if (null !== (r = e)) {
                    r.addEventListener("select", v), r.addEventListener("selectstart", v), r.addEventListener("selectend", v), r.addEventListener("squeeze", v), r.addEventListener("squeezestart", v), r.addEventListener("squeezeend", v), r.addEventListener("end", g);
                    var n = t.getContextAttributes();
                    !0 !== n.xrCompatible && t.makeXRCompatible();
                    var a = {
                        antialias: n.antialias,
                        alpha: n.alpha,
                        depth: n.depth,
                        stencil: n.stencil,
                        framebufferScaleFactor: i
                    }, s = new XRWebGLLayer(r, t, a);
                    r.updateRenderState({baseLayer: s}), r.requestReferenceSpace(o).then(y), r.addEventListener("inputsourceschange", x)
                }
            };
            var b = new V, _ = new V;

            function w(e, t) {
                null === t ? e.matrixWorld.copy(e.matrix) : e.matrixWorld.multiplyMatrices(t.matrixWorld, e.matrix), e.matrixWorldInverse.getInverse(e.matrixWorld)
            }

            this.getCamera = function (e) {
                d.near = h.near = u.near = e.near, d.far = h.far = u.far = e.far, f === d.near && m === d.far || (r.updateRenderState({
                    depthNear: d.near,
                    depthFar: d.far
                }), f = d.near, m = d.far);
                var t = e.parent, n = d.cameras;
                w(d, t);
                for (var i = 0; i < n.length; i++) w(n[i], t);
                e.matrixWorld.copy(d.matrixWorld);
                for (var a = e.children, o = (i = 0, a.length); i < o; i++) a[i].updateMatrixWorld(!0);
                return 2 === n.length ? function (e, t, n) {
                    b.setFromMatrixPosition(t.matrixWorld), _.setFromMatrixPosition(n.matrixWorld);
                    var r = b.distanceTo(_), i = t.projectionMatrix.elements, a = n.projectionMatrix.elements,
                        o = i[14] / (i[10] - 1), s = i[14] / (i[10] + 1), c = (i[9] + 1) / i[5], l = (i[9] - 1) / i[5],
                        u = (i[8] - 1) / i[0], h = (a[8] + 1) / a[0], p = o * u, d = o * h, f = r / (-u + h),
                        m = f * -u;
                    t.matrixWorld.decompose(e.position, e.quaternion, e.scale), e.translateX(m), e.translateZ(f), e.matrixWorld.compose(e.position, e.quaternion, e.scale), e.matrixWorldInverse.getInverse(e.matrixWorld);
                    var v = o + f, g = s + f, y = p - m, x = d + (r - m), w = c * s / g * v, M = l * s / g * v;
                    e.projectionMatrix.makePerspective(y, x, w, M, v, g)
                }(d, u, h) : d.projectionMatrix.copy(u.projectionMatrix), d
            };
            var M = null;
            var S = new wn;
            S.setAnimationLoop((function (t, n) {
                if (null !== (s = n.getViewerPose(a))) {
                    var i = s.views, o = r.renderState.baseLayer;
                    e.setFramebuffer(o.framebuffer);
                    var l = !1;
                    i.length !== d.cameras.length && (d.cameras.length = 0, l = !0);
                    for (var u = 0; u < i.length; u++) {
                        var h = i[u], f = o.getViewport(h), m = p[u];
                        m.matrix.fromArray(h.transform.matrix), m.projectionMatrix.fromArray(h.projectionMatrix), m.viewport.set(f.x, f.y, f.width, f.height), 0 === u && d.matrix.copy(m.matrix), !0 === l && d.cameras.push(m)
                    }
                }
                var v = r.inputSources;
                for (u = 0; u < c.length; u++) {
                    var g = c[u], y = v[u];
                    g.update(y, n, a)
                }
                M && M(t, n)
            })), this.setAnimationLoop = function (e) {
                M = e
            }, this.dispose = function () {
            }
        }

        function Si(e) {
            function t(t, n, r) {
                t.opacity.value = n.opacity, n.color && t.diffuse.value.copy(n.color), n.emissive && t.emissive.value.copy(n.emissive).multiplyScalar(n.emissiveIntensity), n.map && (t.map.value = n.map), n.alphaMap && (t.alphaMap.value = n.alphaMap), n.specularMap && (t.specularMap.value = n.specularMap);
                var i, a, o = n.envMap || r;
                o && (t.envMap.value = o, t.flipEnvMap.value = o.isCubeTexture ? -1 : 1, t.reflectivity.value = n.reflectivity, t.refractionRatio.value = n.refractionRatio, t.maxMipLevel.value = e.get(o).__maxMipLevel), n.lightMap && (t.lightMap.value = n.lightMap, t.lightMapIntensity.value = n.lightMapIntensity), n.aoMap && (t.aoMap.value = n.aoMap, t.aoMapIntensity.value = n.aoMapIntensity), n.map ? i = n.map : n.specularMap ? i = n.specularMap : n.displacementMap ? i = n.displacementMap : n.normalMap ? i = n.normalMap : n.bumpMap ? i = n.bumpMap : n.roughnessMap ? i = n.roughnessMap : n.metalnessMap ? i = n.metalnessMap : n.alphaMap ? i = n.alphaMap : n.emissiveMap && (i = n.emissiveMap), void 0 !== i && (i.isWebGLRenderTarget && (i = i.texture), !0 === i.matrixAutoUpdate && i.updateMatrix(), t.uvTransform.value.copy(i.matrix)), n.aoMap ? a = n.aoMap : n.lightMap && (a = n.lightMap), void 0 !== a && (a.isWebGLRenderTarget && (a = a.texture), !0 === a.matrixAutoUpdate && a.updateMatrix(), t.uv2Transform.value.copy(a.matrix))
            }

            function n(e, t, n) {
                e.roughness.value = t.roughness, e.metalness.value = t.metalness, t.roughnessMap && (e.roughnessMap.value = t.roughnessMap), t.metalnessMap && (e.metalnessMap.value = t.metalnessMap), t.emissiveMap && (e.emissiveMap.value = t.emissiveMap), t.bumpMap && (e.bumpMap.value = t.bumpMap, e.bumpScale.value = t.bumpScale, 1 === t.side && (e.bumpScale.value *= -1)), t.normalMap && (e.normalMap.value = t.normalMap, e.normalScale.value.copy(t.normalScale), 1 === t.side && e.normalScale.value.negate()), t.displacementMap && (e.displacementMap.value = t.displacementMap, e.displacementScale.value = t.displacementScale, e.displacementBias.value = t.displacementBias), (t.envMap || n) && (e.envMapIntensity.value = t.envMapIntensity)
            }

            return {
                refreshFogUniforms: function (e, t) {
                    e.fogColor.value.copy(t.color), t.isFog ? (e.fogNear.value = t.near, e.fogFar.value = t.far) : t.isFogExp2 && (e.fogDensity.value = t.density)
                }, refreshMaterialUniforms: function (e, r, i, a, o) {
                    r.isMeshBasicMaterial ? t(e, r) : r.isMeshLambertMaterial ? (t(e, r), function (e, t) {
                        t.emissiveMap && (e.emissiveMap.value = t.emissiveMap)
                    }(e, r)) : r.isMeshToonMaterial ? (t(e, r), function (e, t) {
                        e.specular.value.copy(t.specular), e.shininess.value = Math.max(t.shininess, 1e-4), t.gradientMap && (e.gradientMap.value = t.gradientMap);
                        t.emissiveMap && (e.emissiveMap.value = t.emissiveMap);
                        t.bumpMap && (e.bumpMap.value = t.bumpMap, e.bumpScale.value = t.bumpScale, 1 === t.side && (e.bumpScale.value *= -1));
                        t.normalMap && (e.normalMap.value = t.normalMap, e.normalScale.value.copy(t.normalScale), 1 === t.side && e.normalScale.value.negate());
                        t.displacementMap && (e.displacementMap.value = t.displacementMap, e.displacementScale.value = t.displacementScale, e.displacementBias.value = t.displacementBias)
                    }(e, r)) : r.isMeshPhongMaterial ? (t(e, r), function (e, t) {
                        e.specular.value.copy(t.specular), e.shininess.value = Math.max(t.shininess, 1e-4), t.emissiveMap && (e.emissiveMap.value = t.emissiveMap);
                        t.bumpMap && (e.bumpMap.value = t.bumpMap, e.bumpScale.value = t.bumpScale, 1 === t.side && (e.bumpScale.value *= -1));
                        t.normalMap && (e.normalMap.value = t.normalMap, e.normalScale.value.copy(t.normalScale), 1 === t.side && e.normalScale.value.negate());
                        t.displacementMap && (e.displacementMap.value = t.displacementMap, e.displacementScale.value = t.displacementScale, e.displacementBias.value = t.displacementBias)
                    }(e, r)) : r.isMeshStandardMaterial ? (t(e, r, i), r.isMeshPhysicalMaterial ? function (e, t, r) {
                        n(e, t, r), e.reflectivity.value = t.reflectivity, e.clearcoat.value = t.clearcoat, e.clearcoatRoughness.value = t.clearcoatRoughness, t.sheen && e.sheen.value.copy(t.sheen);
                        t.clearcoatMap && (e.clearcoatMap.value = t.clearcoatMap);
                        t.clearcoatRoughnessMap && (e.clearcoatRoughnessMap.value = t.clearcoatRoughnessMap);
                        t.clearcoatNormalMap && (e.clearcoatNormalScale.value.copy(t.clearcoatNormalScale), e.clearcoatNormalMap.value = t.clearcoatNormalMap, 1 === t.side && e.clearcoatNormalScale.value.negate());
                        e.transparency.value = t.transparency
                    }(e, r, i) : n(e, r, i)) : r.isMeshMatcapMaterial ? (t(e, r), function (e, t) {
                        t.matcap && (e.matcap.value = t.matcap);
                        t.bumpMap && (e.bumpMap.value = t.bumpMap, e.bumpScale.value = t.bumpScale, 1 === t.side && (e.bumpScale.value *= -1));
                        t.normalMap && (e.normalMap.value = t.normalMap, e.normalScale.value.copy(t.normalScale), 1 === t.side && e.normalScale.value.negate());
                        t.displacementMap && (e.displacementMap.value = t.displacementMap, e.displacementScale.value = t.displacementScale, e.displacementBias.value = t.displacementBias)
                    }(e, r)) : r.isMeshDepthMaterial ? (t(e, r), function (e, t) {
                        t.displacementMap && (e.displacementMap.value = t.displacementMap, e.displacementScale.value = t.displacementScale, e.displacementBias.value = t.displacementBias)
                    }(e, r)) : r.isMeshDistanceMaterial ? (t(e, r), function (e, t) {
                        t.displacementMap && (e.displacementMap.value = t.displacementMap, e.displacementScale.value = t.displacementScale, e.displacementBias.value = t.displacementBias);
                        e.referencePosition.value.copy(t.referencePosition), e.nearDistance.value = t.nearDistance, e.farDistance.value = t.farDistance
                    }(e, r)) : r.isMeshNormalMaterial ? (t(e, r), function (e, t) {
                        t.bumpMap && (e.bumpMap.value = t.bumpMap, e.bumpScale.value = t.bumpScale, 1 === t.side && (e.bumpScale.value *= -1));
                        t.normalMap && (e.normalMap.value = t.normalMap, e.normalScale.value.copy(t.normalScale), 1 === t.side && e.normalScale.value.negate());
                        t.displacementMap && (e.displacementMap.value = t.displacementMap, e.displacementScale.value = t.displacementScale, e.displacementBias.value = t.displacementBias)
                    }(e, r)) : r.isLineBasicMaterial ? (function (e, t) {
                        e.diffuse.value.copy(t.color), e.opacity.value = t.opacity
                    }(e, r), r.isLineDashedMaterial && function (e, t) {
                        e.dashSize.value = t.dashSize, e.totalSize.value = t.dashSize + t.gapSize, e.scale.value = t.scale
                    }(e, r)) : r.isPointsMaterial ? function (e, t, n, r) {
                        e.diffuse.value.copy(t.color), e.opacity.value = t.opacity, e.size.value = t.size * n, e.scale.value = .5 * r, t.map && (e.map.value = t.map);
                        t.alphaMap && (e.alphaMap.value = t.alphaMap);
                        var i;
                        t.map ? i = t.map : t.alphaMap && (i = t.alphaMap);
                        void 0 !== i && (!0 === i.matrixAutoUpdate && i.updateMatrix(), e.uvTransform.value.copy(i.matrix))
                    }(e, r, a, o) : r.isSpriteMaterial ? function (e, t) {
                        e.diffuse.value.copy(t.color), e.opacity.value = t.opacity, e.rotation.value = t.rotation, t.map && (e.map.value = t.map);
                        t.alphaMap && (e.alphaMap.value = t.alphaMap);
                        var n;
                        t.map ? n = t.map : t.alphaMap && (n = t.alphaMap);
                        void 0 !== n && (!0 === n.matrixAutoUpdate && n.updateMatrix(), e.uvTransform.value.copy(n.matrix))
                    }(e, r) : r.isShadowMaterial ? (e.color.value.copy(r.color), e.opacity.value = r.opacity) : r.isShaderMaterial && (r.uniformsNeedUpdate = !1)
                }
            }
        }

        function Ti(e) {
            var t = void 0 !== (e = e || {}).canvas ? e.canvas : document.createElementNS("http://www.w3.org/1999/xhtml", "canvas"),
                n = void 0 !== e.context ? e.context : null, r = void 0 !== e.alpha && e.alpha,
                i = void 0 === e.depth || e.depth, a = void 0 === e.stencil || e.stencil,
                o = void 0 !== e.antialias && e.antialias, s = void 0 === e.premultipliedAlpha || e.premultipliedAlpha,
                c = void 0 !== e.preserveDrawingBuffer && e.preserveDrawingBuffer,
                l = void 0 !== e.powerPreference ? e.powerPreference : "default",
                u = void 0 !== e.failIfMajorPerformanceCaveat && e.failIfMajorPerformanceCaveat, h = null, p = null;
            this.domElement = t, this.debug = {checkShaderErrors: !0}, this.autoClear = !0, this.autoClearColor = !0, this.autoClearDepth = !0, this.autoClearStencil = !0, this.sortObjects = !0, this.clippingPlanes = [], this.localClippingEnabled = !1, this.gammaFactor = 2, this.outputEncoding = 3e3, this.physicallyCorrectLights = !1, this.toneMapping = 0, this.toneMappingExposure = 1, this.toneMappingWhitePoint = 1, this.maxMorphTargets = 8, this.maxMorphNormals = 4;
            var d, f, m, v, g, x, b, _, w, M, S, T, E, A, L, R, P, C, N, D = this, U = !1, z = null, B = 0, H = 0,
                G = null, k = null, j = -1, W = {geometry: null, program: null, wireframe: !1}, q = null, X = null,
                Y = new F, J = new F, Z = null, K = t.width, $ = t.height, ee = 1, te = null, ne = null,
                re = new F(0, 0, K, $), ie = new F(0, 0, K, $), ae = !1, oe = new bn, se = new Cn, ce = !1, le = !1,
                ue = new Q, he = new V;

            function pe() {
                return null === G ? ee : 1
            }

            try {
                var de = {
                    alpha: r,
                    depth: i,
                    stencil: a,
                    antialias: o,
                    premultipliedAlpha: s,
                    preserveDrawingBuffer: c,
                    powerPreference: l,
                    failIfMajorPerformanceCaveat: u
                };
                if (t.addEventListener("webglcontextlost", ye, !1), t.addEventListener("webglcontextrestored", xe, !1), null === (d = n || t.getContext("webgl", de) || t.getContext("experimental-webgl", de))) throw null !== t.getContext("webgl") ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.");
                void 0 === d.getShaderPrecisionFormat && (d.getShaderPrecisionFormat = function () {
                    return {rangeMin: 1, rangeMax: 1, precision: 1}
                })
            } catch (e) {
                throw console.error("THREE.WebGLRenderer: " + e.message), e
            }

            function fe() {
                f = new On(d), !1 === (m = new Pn(d, f, e)).isWebGL2 && (f.get("WEBGL_depth_texture"), f.get("OES_texture_float"), f.get("OES_texture_half_float"), f.get("OES_texture_half_float_linear"), f.get("OES_standard_derivatives"), f.get("OES_element_index_uint"), f.get("ANGLE_instanced_arrays")), f.get("OES_texture_float_linear"), N = new xi(d, f, m), (v = new gi(d, f, m)).scissor(J.copy(ie).multiplyScalar(ee).floor()), v.viewport(Y.copy(re).multiplyScalar(ee).floor()), g = new Dn(d), x = new ri, b = new yi(d, f, v, x, m, N, g), _ = new Mn(d, m), w = new In(d, _, g), M = new Fn(d, w, _, g), R = new zn(d), S = new ni(D, f, m), T = new Si(x), E = new si, A = new di, L = new Ln(D, v, M, s), P = new Rn(d, f, g, m), C = new Nn(d, f, g, m), g.programs = S.programs, D.capabilities = m, D.extensions = f, D.properties = x, D.renderLists = E, D.state = v, D.info = g
            }

            fe();
            var me = new Mi(D, d);
            this.xr = me;
            var ve = new vi(D, M, m.maxTextureSize);

            function ye(e) {
                e.preventDefault(), console.log("THREE.WebGLRenderer: Context Lost."), U = !0
            }

            function xe() {
                console.log("THREE.WebGLRenderer: Context Restored."), U = !1, fe()
            }

            function be(e) {
                var t = e.target;
                t.removeEventListener("dispose", be), function (e) {
                    _e(e), x.remove(e)
                }(t)
            }

            function _e(e) {
                var t = x.get(e).program;
                e.program = void 0, void 0 !== t && S.releaseProgram(t)
            }

            this.shadowMap = ve, this.getContext = function () {
                return d
            }, this.getContextAttributes = function () {
                return d.getContextAttributes()
            }, this.forceContextLoss = function () {
                var e = f.get("WEBGL_lose_context");
                e && e.loseContext()
            }, this.forceContextRestore = function () {
                var e = f.get("WEBGL_lose_context");
                e && e.restoreContext()
            }, this.getPixelRatio = function () {
                return ee
            }, this.setPixelRatio = function (e) {
                void 0 !== e && (ee = e, this.setSize(K, $, !1))
            }, this.getSize = function (e) {
                return void 0 === e && (console.warn("WebGLRenderer: .getsize() now requires a Vector2 as an argument"), e = new I), e.set(K, $)
            }, this.setSize = function (e, n, r) {
                me.isPresenting ? console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.") : (K = e, $ = n, t.width = Math.floor(e * ee), t.height = Math.floor(n * ee), !1 !== r && (t.style.width = e + "px", t.style.height = n + "px"), this.setViewport(0, 0, e, n))
            }, this.getDrawingBufferSize = function (e) {
                return void 0 === e && (console.warn("WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument"), e = new I), e.set(K * ee, $ * ee).floor()
            }, this.setDrawingBufferSize = function (e, n, r) {
                K = e, $ = n, ee = r, t.width = Math.floor(e * r), t.height = Math.floor(n * r), this.setViewport(0, 0, e, n)
            }, this.getCurrentViewport = function (e) {
                return void 0 === e && (console.warn("WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument"), e = new F), e.copy(Y)
            }, this.getViewport = function (e) {
                return e.copy(re)
            }, this.setViewport = function (e, t, n, r) {
                e.isVector4 ? re.set(e.x, e.y, e.z, e.w) : re.set(e, t, n, r), v.viewport(Y.copy(re).multiplyScalar(ee).floor())
            }, this.getScissor = function (e) {
                return e.copy(ie)
            }, this.setScissor = function (e, t, n, r) {
                e.isVector4 ? ie.set(e.x, e.y, e.z, e.w) : ie.set(e, t, n, r), v.scissor(J.copy(ie).multiplyScalar(ee).floor())
            }, this.getScissorTest = function () {
                return ae
            }, this.setScissorTest = function (e) {
                v.setScissorTest(ae = e)
            }, this.setOpaqueSort = function (e) {
                te = e
            }, this.setTransparentSort = function (e) {
                ne = e
            }, this.getClearColor = function () {
                return L.getClearColor()
            }, this.setClearColor = function () {
                L.setClearColor.apply(L, arguments)
            }, this.getClearAlpha = function () {
                return L.getClearAlpha()
            }, this.setClearAlpha = function () {
                L.setClearAlpha.apply(L, arguments)
            }, this.clear = function (e, t, n) {
                var r = 0;
                (void 0 === e || e) && (r |= 16384), (void 0 === t || t) && (r |= 256), (void 0 === n || n) && (r |= 1024), d.clear(r)
            }, this.clearColor = function () {
                this.clear(!0, !1, !1)
            }, this.clearDepth = function () {
                this.clear(!1, !0, !1)
            }, this.clearStencil = function () {
                this.clear(!1, !1, !0)
            }, this.dispose = function () {
                t.removeEventListener("webglcontextlost", ye, !1), t.removeEventListener("webglcontextrestored", xe, !1), E.dispose(), A.dispose(), x.dispose(), M.dispose(), me.dispose(), Se.stop()
            }, this.renderBufferImmediate = function (e, t) {
                v.initAttributes();
                var n = x.get(e);
                e.hasPositions && !n.position && (n.position = d.createBuffer()), e.hasNormals && !n.normal && (n.normal = d.createBuffer()), e.hasUvs && !n.uv && (n.uv = d.createBuffer()), e.hasColors && !n.color && (n.color = d.createBuffer());
                var r = t.getAttributes();
                e.hasPositions && (d.bindBuffer(34962, n.position), d.bufferData(34962, e.positionArray, 35048), v.enableAttribute(r.position), d.vertexAttribPointer(r.position, 3, 5126, !1, 0, 0)), e.hasNormals && (d.bindBuffer(34962, n.normal), d.bufferData(34962, e.normalArray, 35048), v.enableAttribute(r.normal), d.vertexAttribPointer(r.normal, 3, 5126, !1, 0, 0)), e.hasUvs && (d.bindBuffer(34962, n.uv), d.bufferData(34962, e.uvArray, 35048), v.enableAttribute(r.uv), d.vertexAttribPointer(r.uv, 2, 5126, !1, 0, 0)), e.hasColors && (d.bindBuffer(34962, n.color), d.bufferData(34962, e.colorArray, 35048), v.enableAttribute(r.color), d.vertexAttribPointer(r.color, 3, 5126, !1, 0, 0)), v.disableUnusedAttributes(), d.drawArrays(4, 0, e.count), e.count = 0
            };
            var we = new ge;
            this.renderBufferDirect = function (e, t, n, r, i, a) {
                null === t && (t = we);
                var o = i.isMesh && i.matrixWorld.determinant() < 0, s = Re(e, t, r, i);
                v.setMaterial(r, o);
                var c = !1;
                W.geometry === n.id && W.program === s.id && W.wireframe === (!0 === r.wireframe) || (W.geometry = n.id, W.program = s.id, W.wireframe = !0 === r.wireframe, c = !0), (r.morphTargets || r.morphNormals) && (R.update(i, n, r, s), c = !0), !0 === i.isInstancedMesh && (c = !0);
                var l = n.index, u = n.attributes.position;
                if (null === l) {
                    if (void 0 === u || 0 === u.count) return
                } else if (0 === l.count) return;
                var h, p = 1;
                !0 === r.wireframe && (l = w.getWireframeAttribute(n), p = 2);
                var g = P;
                null !== l && (h = _.get(l), (g = C).setIndex(h)), c && (!function (e, t, n, r) {
                    if (!1 === m.isWebGL2 && (e.isInstancedMesh || t.isInstancedBufferGeometry) && null === f.get("ANGLE_instanced_arrays")) return;
                    v.initAttributes();
                    var i = t.attributes, a = r.getAttributes(), o = n.defaultAttributeValues;
                    for (var s in a) {
                        var c = a[s];
                        if (c >= 0) {
                            var l = i[s];
                            if (void 0 !== l) {
                                var u = l.normalized, h = l.itemSize;
                                if (void 0 === (M = _.get(l))) continue;
                                var p = M.buffer, g = M.type, y = M.bytesPerElement;
                                if (l.isInterleavedBufferAttribute) {
                                    var x = l.data, b = x.stride, w = l.offset;
                                    x && x.isInstancedInterleavedBuffer ? (v.enableAttributeAndDivisor(c, x.meshPerAttribute), void 0 === t._maxInstanceCount && (t._maxInstanceCount = x.meshPerAttribute * x.count)) : v.enableAttribute(c), d.bindBuffer(34962, p), v.vertexAttribPointer(c, h, g, u, b * y, w * y)
                                } else l.isInstancedBufferAttribute ? (v.enableAttributeAndDivisor(c, l.meshPerAttribute), void 0 === t._maxInstanceCount && (t._maxInstanceCount = l.meshPerAttribute * l.count)) : v.enableAttribute(c), d.bindBuffer(34962, p), v.vertexAttribPointer(c, h, g, u, 0, 0)
                            } else if ("instanceMatrix" === s) {
                                var M;
                                if (void 0 === (M = _.get(e.instanceMatrix))) continue;
                                p = M.buffer, g = M.type;
                                v.enableAttributeAndDivisor(c + 0, 1), v.enableAttributeAndDivisor(c + 1, 1), v.enableAttributeAndDivisor(c + 2, 1), v.enableAttributeAndDivisor(c + 3, 1), d.bindBuffer(34962, p), d.vertexAttribPointer(c + 0, 4, g, !1, 64, 0), d.vertexAttribPointer(c + 1, 4, g, !1, 64, 16), d.vertexAttribPointer(c + 2, 4, g, !1, 64, 32), d.vertexAttribPointer(c + 3, 4, g, !1, 64, 48)
                            } else if (void 0 !== o) {
                                var S = o[s];
                                if (void 0 !== S) switch (S.length) {
                                    case 2:
                                        d.vertexAttrib2fv(c, S);
                                        break;
                                    case 3:
                                        d.vertexAttrib3fv(c, S);
                                        break;
                                    case 4:
                                        d.vertexAttrib4fv(c, S);
                                        break;
                                    default:
                                        d.vertexAttrib1fv(c, S)
                                }
                            }
                        }
                    }
                    v.disableUnusedAttributes()
                }(i, n, r, s), null !== l && d.bindBuffer(34963, h.buffer));
                var y = null !== l ? l.count : u.count, x = n.drawRange.start * p, b = n.drawRange.count * p,
                    M = null !== a ? a.start * p : 0, S = null !== a ? a.count * p : 1 / 0, T = Math.max(x, M),
                    E = Math.min(y, x + b, M + S) - 1, A = Math.max(0, E - T + 1);
                if (0 !== A) {
                    if (i.isMesh) !0 === r.wireframe ? (v.setLineWidth(r.wireframeLinewidth * pe()), g.setMode(1)) : g.setMode(4); else if (i.isLine) {
                        var L = r.linewidth;
                        void 0 === L && (L = 1), v.setLineWidth(L * pe()), i.isLineSegments ? g.setMode(1) : i.isLineLoop ? g.setMode(2) : g.setMode(3)
                    } else i.isPoints ? g.setMode(0) : i.isSprite && g.setMode(4);
                    if (i.isInstancedMesh) g.renderInstances(n, T, A, i.count); else if (n.isInstancedBufferGeometry) {
                        var O = Math.min(n.instanceCount, n._maxInstanceCount);
                        g.renderInstances(n, T, A, O)
                    } else g.render(T, A)
                }
            }, this.compile = function (e, t) {
                (p = A.get(e, t)).init(), e.traverse((function (e) {
                    e.isLight && (p.pushLight(e), e.castShadow && p.pushShadow(e))
                })), p.setupLights(t);
                const n = {};
                e.traverse((function (t) {
                    let r = t.material;
                    if (r) if (Array.isArray(r)) for (let i = 0; i < r.length; i++) {
                        let a = r[i];
                        a.uuid in n == !1 && (Le(a, e, t), n[a.uuid] = !0)
                    } else r.uuid in n == !1 && (Le(r, e, t), n[r.uuid] = !0)
                }))
            };
            var Me = null;
            var Se = new wn;

            function Te(e, t, n, r) {
                if (!1 !== e.visible) {
                    if (e.layers.test(t.layers)) if (e.isGroup) n = e.renderOrder; else if (e.isLOD) !0 === e.autoUpdate && e.update(t); else if (e.isLight) p.pushLight(e), e.castShadow && p.pushShadow(e); else if (e.isSprite) {
                        if (!e.frustumCulled || oe.intersectsSprite(e)) {
                            r && he.setFromMatrixPosition(e.matrixWorld).applyMatrix4(ue);
                            var i = M.update(e);
                            (a = e.material).visible && h.push(e, i, a, n, he.z, null)
                        }
                    } else if (e.isImmediateRenderObject) r && he.setFromMatrixPosition(e.matrixWorld).applyMatrix4(ue), h.push(e, null, e.material, n, he.z, null); else if ((e.isMesh || e.isLine || e.isPoints) && (e.isSkinnedMesh && e.skeleton.frame !== g.render.frame && (e.skeleton.update(), e.skeleton.frame = g.render.frame), !e.frustumCulled || oe.intersectsObject(e))) {
                        r && he.setFromMatrixPosition(e.matrixWorld).applyMatrix4(ue);
                        i = M.update(e);
                        var a = e.material;
                        if (Array.isArray(a)) for (var o = i.groups, s = 0, c = o.length; s < c; s++) {
                            var l = o[s], u = a[l.materialIndex];
                            u && u.visible && h.push(e, i, u, n, he.z, l)
                        } else a.visible && h.push(e, i, a, n, he.z, null)
                    }
                    var d = e.children;
                    for (s = 0, c = d.length; s < c; s++) Te(d[s], t, n, r)
                }
            }

            function Ee(e, t, n, r) {
                for (var i = 0, a = e.length; i < a; i++) {
                    var o = e[i], s = o.object, c = o.geometry, l = void 0 === r ? o.material : r, u = o.group;
                    if (n.isArrayCamera) {
                        X = n;
                        for (var h = n.cameras, d = 0, f = h.length; d < f; d++) {
                            var m = h[d];
                            s.layers.test(m.layers) && (v.viewport(Y.copy(m.viewport)), p.setupLights(m), Ae(s, t, m, c, l, u))
                        }
                    } else X = null, Ae(s, t, n, c, l, u)
                }
            }

            function Ae(e, t, n, r, i, a) {
                if (e.onBeforeRender(D, t, n, r, i, a), p = A.get(t, X || n), e.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse, e.matrixWorld), e.normalMatrix.getNormalMatrix(e.modelViewMatrix), e.isImmediateRenderObject) {
                    var o = Re(n, t, i, e);
                    v.setMaterial(i), W.geometry = null, W.program = null, W.wireframe = !1, function (e, t) {
                        e.render((function (e) {
                            D.renderBufferImmediate(e, t)
                        }))
                    }(e, o)
                } else D.renderBufferDirect(n, t, r, i, e, a);
                e.onAfterRender(D, t, n, r, i, a), p = A.get(t, X || n)
            }

            function Le(e, t, n) {
                var r = x.get(e), i = p.state.lights, a = p.state.shadowsArray, o = i.state.version,
                    s = S.getParameters(e, i.state, a, t, se.numPlanes, se.numIntersection, n),
                    c = S.getProgramCacheKey(s), l = r.program, u = !0;
                if (void 0 === l) e.addEventListener("dispose", be); else if (l.cacheKey !== c) _e(e); else if (r.lightsStateVersion !== o) r.lightsStateVersion = o, u = !1; else {
                    if (void 0 !== s.shaderID) return;
                    u = !1
                }
                u && (l = S.acquireProgram(s, c), r.program = l, r.uniforms = s.uniforms, r.outputEncoding = s.outputEncoding, e.program = l);
                var h = l.getAttributes();
                if (e.morphTargets) {
                    e.numSupportedMorphTargets = 0;
                    for (var d = 0; d < D.maxMorphTargets; d++) h["morphTarget" + d] >= 0 && e.numSupportedMorphTargets++
                }
                if (e.morphNormals) {
                    e.numSupportedMorphNormals = 0;
                    for (d = 0; d < D.maxMorphNormals; d++) h["morphNormal" + d] >= 0 && e.numSupportedMorphNormals++
                }
                var f = r.uniforms;
                (e.isShaderMaterial || e.isRawShaderMaterial) && !0 !== e.clipping || (r.numClippingPlanes = se.numPlanes, r.numIntersection = se.numIntersection, f.clippingPlanes = se.uniform), r.environment = e.isMeshStandardMaterial ? t.environment : null, r.fog = t.fog, r.needsLights = function (e) {
                    return e.isMeshLambertMaterial || e.isMeshToonMaterial || e.isMeshPhongMaterial || e.isMeshStandardMaterial || e.isShadowMaterial || e.isShaderMaterial && !0 === e.lights
                }(e), r.lightsStateVersion = o, r.needsLights && (f.ambientLightColor.value = i.state.ambient, f.lightProbe.value = i.state.probe, f.directionalLights.value = i.state.directional, f.directionalLightShadows.value = i.state.directionalShadow, f.spotLights.value = i.state.spot, f.spotLightShadows.value = i.state.spotShadow, f.rectAreaLights.value = i.state.rectArea, f.pointLights.value = i.state.point, f.pointLightShadows.value = i.state.pointShadow, f.hemisphereLights.value = i.state.hemi, f.directionalShadowMap.value = i.state.directionalShadowMap, f.directionalShadowMatrix.value = i.state.directionalShadowMatrix, f.spotShadowMap.value = i.state.spotShadowMap, f.spotShadowMatrix.value = i.state.spotShadowMatrix, f.pointShadowMap.value = i.state.pointShadowMap, f.pointShadowMatrix.value = i.state.pointShadowMatrix);
                var m = r.program.getUniforms(), v = Ur.seqWithValue(m.seq, f);
                r.uniformsList = v
            }

            function Re(e, t, n, r) {
                b.resetTextureUnits();
                var i = t.fog, a = n.isMeshStandardMaterial ? t.environment : null,
                    o = null === G ? D.outputEncoding : G.texture.encoding, s = x.get(n), c = p.state.lights;
                if (ce && (le || e !== q)) {
                    var l = e === q && n.id === j;
                    se.setState(n.clippingPlanes, n.clipIntersection, n.clipShadows, e, s, l)
                }
                n.version === s.__version ? void 0 === s.program || n.fog && s.fog !== i || s.environment !== a || s.needsLights && s.lightsStateVersion !== c.state.version ? Le(n, t, r) : void 0 === s.numClippingPlanes || s.numClippingPlanes === se.numPlanes && s.numIntersection === se.numIntersection ? s.outputEncoding !== o && Le(n, t, r) : Le(n, t, r) : (Le(n, t, r), s.__version = n.version);
                var u, h, f = !1, g = !1, _ = !1, w = s.program, M = w.getUniforms(), S = s.uniforms;
                if (v.useProgram(w.program) && (f = !0, g = !0, _ = !0), n.id !== j && (j = n.id, g = !0), f || q !== e) {
                    if (M.setValue(d, "projectionMatrix", e.projectionMatrix), m.logarithmicDepthBuffer && M.setValue(d, "logDepthBufFC", 2 / (Math.log(e.far + 1) / Math.LN2)), q !== e && (q = e, g = !0, _ = !0), n.isShaderMaterial || n.isMeshPhongMaterial || n.isMeshToonMaterial || n.isMeshStandardMaterial || n.envMap) {
                        var E = M.map.cameraPosition;
                        void 0 !== E && E.setValue(d, he.setFromMatrixPosition(e.matrixWorld))
                    }
                    (n.isMeshPhongMaterial || n.isMeshToonMaterial || n.isMeshLambertMaterial || n.isMeshBasicMaterial || n.isMeshStandardMaterial || n.isShaderMaterial) && M.setValue(d, "isOrthographic", !0 === e.isOrthographicCamera), (n.isMeshPhongMaterial || n.isMeshToonMaterial || n.isMeshLambertMaterial || n.isMeshBasicMaterial || n.isMeshStandardMaterial || n.isShaderMaterial || n.skinning) && M.setValue(d, "viewMatrix", e.matrixWorldInverse)
                }
                if (n.skinning) {
                    M.setOptional(d, r, "bindMatrix"), M.setOptional(d, r, "bindMatrixInverse");
                    var A = r.skeleton;
                    if (A) {
                        var L = A.bones;
                        if (m.floatVertexTextures) {
                            if (void 0 === A.boneTexture) {
                                var R = Math.sqrt(4 * L.length);
                                R = O.ceilPowerOfTwo(R), R = Math.max(R, 4);
                                var P = new Float32Array(R * R * 4);
                                P.set(A.boneMatrices);
                                var C = new gn(P, R, R, y, 1015);
                                A.boneMatrices = P, A.boneTexture = C, A.boneTextureSize = R
                            }
                            M.setValue(d, "boneTexture", A.boneTexture, b), M.setValue(d, "boneTextureSize", A.boneTextureSize)
                        } else M.setOptional(d, A, "boneMatrices")
                    }
                }
                return (g || s.receiveShadow !== r.receiveShadow) && (s.receiveShadow = r.receiveShadow, M.setValue(d, "receiveShadow", r.receiveShadow)), g && (M.setValue(d, "toneMappingExposure", D.toneMappingExposure), M.setValue(d, "toneMappingWhitePoint", D.toneMappingWhitePoint), s.needsLights && (h = _, (u = S).ambientLightColor.needsUpdate = h, u.lightProbe.needsUpdate = h, u.directionalLights.needsUpdate = h, u.directionalLightShadows.needsUpdate = h, u.pointLights.needsUpdate = h, u.pointLightShadows.needsUpdate = h, u.spotLights.needsUpdate = h, u.spotLightShadows.needsUpdate = h, u.rectAreaLights.needsUpdate = h, u.hemisphereLights.needsUpdate = h), i && n.fog && T.refreshFogUniforms(S, i), T.refreshMaterialUniforms(S, n, a, ee, $), void 0 !== S.ltc_1 && (S.ltc_1.value = _n.LTC_1), void 0 !== S.ltc_2 && (S.ltc_2.value = _n.LTC_2), Ur.upload(d, s.uniformsList, S, b)), n.isShaderMaterial && !0 === n.uniformsNeedUpdate && (Ur.upload(d, s.uniformsList, S, b), n.uniformsNeedUpdate = !1), n.isSpriteMaterial && M.setValue(d, "center", r.center), M.setValue(d, "modelViewMatrix", r.modelViewMatrix), M.setValue(d, "normalMatrix", r.normalMatrix), M.setValue(d, "modelMatrix", r.matrixWorld), w
            }

            Se.setAnimationLoop((function (e) {
                me.isPresenting || Me && Me(e)
            })), "undefined" != typeof window && Se.setContext(window), this.setAnimationLoop = function (e) {
                Me = e, me.setAnimationLoop(e), Se.start()
            }, this.render = function (e, t) {
                var n, r;
                if (void 0 !== arguments[2] && (console.warn("THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead."), n = arguments[2]), void 0 !== arguments[3] && (console.warn("THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead."), r = arguments[3]), t && t.isCamera) {
                    if (!U) {
                        W.geometry = null, W.program = null, W.wireframe = !1, j = -1, q = null, !0 === e.autoUpdate && e.updateMatrixWorld(), null === t.parent && t.updateMatrixWorld(), me.enabled && me.isPresenting && (t = me.getCamera(t)), e.onBeforeRender(D, e, t, n || G), (p = A.get(e, t)).init(), ue.multiplyMatrices(t.projectionMatrix, t.matrixWorldInverse), oe.setFromProjectionMatrix(ue), le = this.localClippingEnabled, ce = se.init(this.clippingPlanes, le, t), (h = E.get(e, t)).init(), Te(e, t, 0, D.sortObjects), h.finish(), !0 === D.sortObjects && h.sort(te, ne), ce && se.beginShadows();
                        var i = p.state.shadowsArray;
                        ve.render(i, e, t), p.setupLights(t), ce && se.endShadows(), this.info.autoReset && this.info.reset(), void 0 !== n && this.setRenderTarget(n), L.render(h, e, t, r);
                        var a = h.opaque, o = h.transparent;
                        if (e.overrideMaterial) {
                            var s = e.overrideMaterial;
                            a.length && Ee(a, e, t, s), o.length && Ee(o, e, t, s)
                        } else a.length && Ee(a, e, t), o.length && Ee(o, e, t);
                        e.onAfterRender(D, e, t), null !== G && (b.updateRenderTargetMipmap(G), b.updateMultisampleRenderTarget(G)), v.buffers.depth.setTest(!0), v.buffers.depth.setMask(!0), v.buffers.color.setMask(!0), v.setPolygonOffset(!1), h = null, p = null
                    }
                } else console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.")
            }, this.setFramebuffer = function (e) {
                z !== e && null === G && d.bindFramebuffer(36160, e), z = e
            }, this.getActiveCubeFace = function () {
                return B
            }, this.getActiveMipmapLevel = function () {
                return H
            }, this.getRenderTarget = function () {
                return G
            }, this.setRenderTarget = function (e, t, n) {
                G = e, B = t, H = n, e && void 0 === x.get(e).__webglFramebuffer && b.setupRenderTarget(e);
                var r = z, i = !1;
                if (e) {
                    var a = x.get(e).__webglFramebuffer;
                    e.isWebGLCubeRenderTarget ? (r = a[t || 0], i = !0) : r = e.isWebGLMultisampleRenderTarget ? x.get(e).__webglMultisampledFramebuffer : a, Y.copy(e.viewport), J.copy(e.scissor), Z = e.scissorTest
                } else Y.copy(re).multiplyScalar(ee).floor(), J.copy(ie).multiplyScalar(ee).floor(), Z = ae;
                if (k !== r && (d.bindFramebuffer(36160, r), k = r), v.viewport(Y), v.scissor(J), v.setScissorTest(Z), i) {
                    var o = x.get(e.texture);
                    d.framebufferTexture2D(36160, 36064, 34069 + (t || 0), o.__webglTexture, n || 0)
                }
            }, this.readRenderTargetPixels = function (e, t, n, r, i, a, o) {
                if (e && e.isWebGLRenderTarget) {
                    var s = x.get(e).__webglFramebuffer;
                    if (e.isWebGLCubeRenderTarget && void 0 !== o && (s = s[o]), s) {
                        var c = !1;
                        s !== k && (d.bindFramebuffer(36160, s), c = !0);
                        try {
                            var l = e.texture, u = l.format, h = l.type;
                            if (u !== y && N.convert(u) !== d.getParameter(35739)) return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
                            if (!(1009 === h || N.convert(h) === d.getParameter(35738) || 1015 === h && (m.isWebGL2 || f.get("OES_texture_float") || f.get("WEBGL_color_buffer_float")) || 1016 === h && (m.isWebGL2 ? f.get("EXT_color_buffer_float") : f.get("EXT_color_buffer_half_float")))) return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
                            36053 === d.checkFramebufferStatus(36160) ? t >= 0 && t <= e.width - r && n >= 0 && n <= e.height - i && d.readPixels(t, n, r, i, N.convert(u), N.convert(h), a) : console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")
                        } finally {
                            c && d.bindFramebuffer(36160, k)
                        }
                    }
                } else console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.")
            }, this.copyFramebufferToTexture = function (e, t, n) {
                void 0 === n && (n = 0);
                var r = Math.pow(2, -n), i = Math.floor(t.image.width * r), a = Math.floor(t.image.height * r),
                    o = N.convert(t.format);
                b.setTexture2D(t, 0), d.copyTexImage2D(3553, n, o, e.x, e.y, i, a, 0), v.unbindTexture()
            }, this.copyTextureToTexture = function (e, t, n, r) {
                void 0 === r && (r = 0);
                var i = t.image.width, a = t.image.height, o = N.convert(n.format), s = N.convert(n.type);
                b.setTexture2D(n, 0), t.isDataTexture ? d.texSubImage2D(3553, r, e.x, e.y, i, a, o, s, t.image.data) : t.isCompressedTexture ? d.compressedTexSubImage2D(3553, r, e.x, e.y, t.mipmaps[0].width, t.mipmaps[0].height, o, t.mipmaps[0].data) : d.texSubImage2D(3553, r, e.x, e.y, o, s, t.image), 0 === r && n.generateMipmaps && d.generateMipmap(3553), v.unbindTexture()
            }, this.initTexture = function (e) {
                b.setTexture2D(e, 0), v.unbindTexture()
            }, "undefined" != typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {detail: this}))
        }

        function Ei(e, t) {
            this.name = "", this.color = new st(e), this.density = void 0 !== t ? t : 25e-5
        }

        function Ai(e, t, n) {
            this.name = "", this.color = new st(e), this.near = void 0 !== t ? t : 1, this.far = void 0 !== n ? n : 1e3
        }

        function Li(e, t) {
            this.array = e, this.stride = t, this.count = void 0 !== e ? e.length / t : 0, this.usage = 35044, this.updateRange = {
                offset: 0,
                count: -1
            }, this.version = 0
        }

        bi.prototype = Object.assign(Object.create(fn.prototype), {
            constructor: bi,
            isArrayCamera: !0
        }), _i.prototype = Object.assign(Object.create(ve.prototype), {
            constructor: _i,
            isGroup: !0
        }), Object.assign(wi.prototype, {
            constructor: wi, getTargetRaySpace: function () {
                return null === this._targetRay && (this._targetRay = new _i, this._targetRay.matrixAutoUpdate = !1, this._targetRay.visible = !1), this._targetRay
            }, getGripSpace: function () {
                return null === this._grip && (this._grip = new _i, this._grip.matrixAutoUpdate = !1, this._grip.visible = !1), this._grip
            }, dispatchEvent: function (e) {
                return null !== this._targetRay && this._targetRay.dispatchEvent(e), null !== this._grip && this._grip.dispatchEvent(e), this
            }, disconnect: function (e) {
                return this.dispatchEvent({
                    type: "disconnected",
                    data: e
                }), null !== this._targetRay && (this._targetRay.visible = !1), null !== this._grip && (this._grip.visible = !1), this
            }, update: function (e, t, n) {
                var r = null, i = null, a = this._targetRay, o = this._grip;
                return e && (null !== a && null !== (r = t.getPose(e.targetRaySpace, n)) && (a.matrix.fromArray(r.transform.matrix), a.matrix.decompose(a.position, a.rotation, a.scale)), null !== o && e.gripSpace && null !== (i = t.getPose(e.gripSpace, n)) && (o.matrix.fromArray(i.transform.matrix), o.matrix.decompose(o.position, o.rotation, o.scale))), null !== a && (a.visible = null !== r), null !== o && (o.visible = null !== i), this
            }
        }), Object.assign(Mi.prototype, L.prototype), Object.assign(Ei.prototype, {
            isFogExp2: !0, clone: function () {
                return new Ei(this.color, this.density)
            }, toJSON: function () {
                return {type: "FogExp2", color: this.color.getHex(), density: this.density}
            }
        }), Object.assign(Ai.prototype, {
            isFog: !0, clone: function () {
                return new Ai(this.color, this.near, this.far)
            }, toJSON: function () {
                return {type: "Fog", color: this.color.getHex(), near: this.near, far: this.far}
            }
        }), Object.defineProperty(Li.prototype, "needsUpdate", {
            set: function (e) {
                !0 === e && this.version++
            }
        }), Object.assign(Li.prototype, {
            isInterleavedBuffer: !0, onUploadCallback: function () {
            }, setUsage: function (e) {
                return this.usage = e, this
            }, copy: function (e) {
                return this.array = new e.array.constructor(e.array), this.count = e.count, this.stride = e.stride, this.usage = e.usage, this
            }, copyAt: function (e, t, n) {
                e *= this.stride, n *= t.stride;
                for (var r = 0, i = this.stride; r < i; r++) this.array[e + r] = t.array[n + r];
                return this
            }, set: function (e, t) {
                return void 0 === t && (t = 0), this.array.set(e, t), this
            }, clone: function () {
                return (new this.constructor).copy(this)
            }, onUpload: function (e) {
                return this.onUploadCallback = e, this
            }
        });
        var Ri, Pi = new V;

        function Ci(e, t, n, r) {
            this.name = "", this.data = e, this.itemSize = t, this.offset = n, this.normalized = !0 === r
        }

        function Oi(e) {
            dt.call(this), this.type = "SpriteMaterial", this.color = new st(16777215), this.map = null, this.alphaMap = null, this.rotation = 0, this.sizeAttenuation = !0, this.transparent = !0, this.setValues(e)
        }

        Object.defineProperties(Ci.prototype, {
            count: {
                get: function () {
                    return this.data.count
                }
            }, array: {
                get: function () {
                    return this.data.array
                }
            }
        }), Object.assign(Ci.prototype, {
            isInterleavedBufferAttribute: !0, applyMatrix4: function (e) {
                for (var t = 0, n = this.data.count; t < n; t++) Pi.x = this.getX(t), Pi.y = this.getY(t), Pi.z = this.getZ(t), Pi.applyMatrix4(e), this.setXYZ(t, Pi.x, Pi.y, Pi.z);
                return this
            }, setX: function (e, t) {
                return this.data.array[e * this.data.stride + this.offset] = t, this
            }, setY: function (e, t) {
                return this.data.array[e * this.data.stride + this.offset + 1] = t, this
            }, setZ: function (e, t) {
                return this.data.array[e * this.data.stride + this.offset + 2] = t, this
            }, setW: function (e, t) {
                return this.data.array[e * this.data.stride + this.offset + 3] = t, this
            }, getX: function (e) {
                return this.data.array[e * this.data.stride + this.offset]
            }, getY: function (e) {
                return this.data.array[e * this.data.stride + this.offset + 1]
            }, getZ: function (e) {
                return this.data.array[e * this.data.stride + this.offset + 2]
            }, getW: function (e) {
                return this.data.array[e * this.data.stride + this.offset + 3]
            }, setXY: function (e, t, n) {
                return e = e * this.data.stride + this.offset, this.data.array[e + 0] = t, this.data.array[e + 1] = n, this
            }, setXYZ: function (e, t, n, r) {
                return e = e * this.data.stride + this.offset, this.data.array[e + 0] = t, this.data.array[e + 1] = n, this.data.array[e + 2] = r, this
            }, setXYZW: function (e, t, n, r, i) {
                return e = e * this.data.stride + this.offset, this.data.array[e + 0] = t, this.data.array[e + 1] = n, this.data.array[e + 2] = r, this.data.array[e + 3] = i, this
            }, clone: function () {
                console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");
                for (var e = [], t = 0; t < this.count; t++) for (var n = t * this.data.stride + this.offset, r = 0; r < this.itemSize; r++) e.push(this.data.array[n + r]);
                return new vt(new this.array.constructor(e), this.itemSize, this.normalized)
            }, toJSON: function () {
                console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");
                for (var e = [], t = 0; t < this.count; t++) for (var n = t * this.data.stride + this.offset, r = 0; r < this.itemSize; r++) e.push(this.data.array[n + r]);
                return {
                    itemSize: this.itemSize,
                    type: this.array.constructor.name,
                    array: e,
                    normalized: this.normalized
                }
            }
        }), Oi.prototype = Object.create(dt.prototype), Oi.prototype.constructor = Oi, Oi.prototype.isSpriteMaterial = !0, Oi.prototype.copy = function (e) {
            return dt.prototype.copy.call(this, e), this.color.copy(e.color), this.map = e.map, this.alphaMap = e.alphaMap, this.rotation = e.rotation, this.sizeAttenuation = e.sizeAttenuation, this
        };
        var Ii = new V, Ni = new V, Di = new V, Ui = new I, zi = new I, Fi = new Q, Bi = new V, Hi = new V, Gi = new V,
            ki = new I, ji = new I, Vi = new I;

        function Wi(e) {
            if (ve.call(this), this.type = "Sprite", void 0 === Ri) {
                Ri = new Dt;
                var t = new Li(new Float32Array([-.5, -.5, 0, 0, 0, .5, -.5, 0, 1, 0, .5, .5, 0, 1, 1, -.5, .5, 0, 0, 1]), 5);
                Ri.setIndex([0, 1, 2, 0, 2, 3]), Ri.setAttribute("position", new Ci(t, 3, 0, !1)), Ri.setAttribute("uv", new Ci(t, 2, 3, !1))
            }
            this.geometry = Ri, this.material = void 0 !== e ? e : new Oi, this.center = new I(.5, .5)
        }

        function qi(e, t, n, r, i, a) {
            Ui.subVectors(e, n).addScalar(.5).multiply(r), void 0 !== i ? (zi.x = a * Ui.x - i * Ui.y, zi.y = i * Ui.x + a * Ui.y) : zi.copy(Ui), e.copy(t), e.x += zi.x, e.y += zi.y, e.applyMatrix4(Fi)
        }

        Wi.prototype = Object.assign(Object.create(ve.prototype), {
            constructor: Wi, isSprite: !0, raycast: function (e, t) {
                null === e.camera && console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'), Ni.setFromMatrixScale(this.matrixWorld), Fi.copy(e.camera.matrixWorld), this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse, this.matrixWorld), Di.setFromMatrixPosition(this.modelViewMatrix), e.camera.isPerspectiveCamera && !1 === this.material.sizeAttenuation && Ni.multiplyScalar(-Di.z);
                var n, r, i = this.material.rotation;
                0 !== i && (r = Math.cos(i), n = Math.sin(i));
                var a = this.center;
                qi(Bi.set(-.5, -.5, 0), Di, a, Ni, n, r), qi(Hi.set(.5, -.5, 0), Di, a, Ni, n, r), qi(Gi.set(.5, .5, 0), Di, a, Ni, n, r), ki.set(0, 0), ji.set(1, 0), Vi.set(1, 1);
                var o = e.ray.intersectTriangle(Bi, Hi, Gi, !1, Ii);
                if (null !== o || (qi(Hi.set(-.5, .5, 0), Di, a, Ni, n, r), ji.set(0, 1), null !== (o = e.ray.intersectTriangle(Bi, Gi, Hi, !1, Ii)))) {
                    var s = e.ray.origin.distanceTo(Ii);
                    s < e.near || s > e.far || t.push({
                        distance: s,
                        point: Ii.clone(),
                        uv: rt.getUV(Ii, Bi, Hi, Gi, ki, ji, Vi, new I),
                        face: null,
                        object: this
                    })
                }
            }, clone: function () {
                return new this.constructor(this.material).copy(this)
            }, copy: function (e) {
                return ve.prototype.copy.call(this, e), void 0 !== e.center && this.center.copy(e.center), this
            }
        });
        var Xi, Yi, Ji, Zi, Ki, Qi = new V, $i = new V;

        function ea() {
            ve.call(this), this._currentLevel = 0, this.type = "LOD", Object.defineProperties(this, {
                levels: {
                    enumerable: !0,
                    value: []
                }
            }), this.autoUpdate = !0
        }

        function ta(e, t) {
            e && e.isGeometry && console.error("THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead."), $t.call(this, e, t), this.type = "SkinnedMesh", this.bindMode = "attached", this.bindMatrix = new Q, this.bindMatrixInverse = new Q
        }

        ea.prototype = Object.assign(Object.create(ve.prototype), {
            constructor: ea, isLOD: !0, copy: function (e) {
                ve.prototype.copy.call(this, e, !1);
                for (var t = e.levels, n = 0, r = t.length; n < r; n++) {
                    var i = t[n];
                    this.addLevel(i.object.clone(), i.distance)
                }
                return this.autoUpdate = e.autoUpdate, this
            }, addLevel: function (e, t) {
                void 0 === t && (t = 0), t = Math.abs(t);
                for (var n = this.levels, r = 0; r < n.length && !(t < n[r].distance); r++) ;
                return n.splice(r, 0, {distance: t, object: e}), this.add(e), this
            }, getCurrentLevel: function () {
                return this._currentLevel
            }, getObjectForDistance: function (e) {
                var t = this.levels;
                if (t.length > 0) {
                    for (var n = 1, r = t.length; n < r && !(e < t[n].distance); n++) ;
                    return t[n - 1].object
                }
                return null
            }, raycast: function (e, t) {
                if (this.levels.length > 0) {
                    Qi.setFromMatrixPosition(this.matrixWorld);
                    var n = e.ray.origin.distanceTo(Qi);
                    this.getObjectForDistance(n).raycast(e, t)
                }
            }, update: function (e) {
                var t = this.levels;
                if (t.length > 1) {
                    Qi.setFromMatrixPosition(e.matrixWorld), $i.setFromMatrixPosition(this.matrixWorld);
                    var n = Qi.distanceTo($i) / e.zoom;
                    t[0].object.visible = !0;
                    for (var r = 1, i = t.length; r < i && n >= t[r].distance; r++) t[r - 1].object.visible = !1, t[r].object.visible = !0;
                    for (this._currentLevel = r - 1; r < i; r++) t[r].object.visible = !1
                }
            }, toJSON: function (e) {
                var t = ve.prototype.toJSON.call(this, e);
                !1 === this.autoUpdate && (t.object.autoUpdate = !1), t.object.levels = [];
                for (var n = this.levels, r = 0, i = n.length; r < i; r++) {
                    var a = n[r];
                    t.object.levels.push({object: a.object.uuid, distance: a.distance})
                }
                return t
            }
        }), ta.prototype = Object.assign(Object.create($t.prototype), {
            constructor: ta, isSkinnedMesh: !0, bind: function (e, t) {
                this.skeleton = e, void 0 === t && (this.updateMatrixWorld(!0), this.skeleton.calculateInverses(), t = this.matrixWorld), this.bindMatrix.copy(t), this.bindMatrixInverse.getInverse(t)
            }, pose: function () {
                this.skeleton.pose()
            }, normalizeSkinWeights: function () {
                for (var e = new F, t = this.geometry.attributes.skinWeight, n = 0, r = t.count; n < r; n++) {
                    e.x = t.getX(n), e.y = t.getY(n), e.z = t.getZ(n), e.w = t.getW(n);
                    var i = 1 / e.manhattanLength();
                    i !== 1 / 0 ? e.multiplyScalar(i) : e.set(1, 0, 0, 0), t.setXYZW(n, e.x, e.y, e.z, e.w)
                }
            }, updateMatrixWorld: function (e) {
                $t.prototype.updateMatrixWorld.call(this, e), "attached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.matrixWorld) : "detached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.bindMatrix) : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode)
            }, clone: function () {
                return new this.constructor(this.geometry, this.material).copy(this)
            }, boneTransform: (Xi = new V, Yi = new F, Ji = new F, Zi = new V, Ki = new Q, function (e, t) {
                var n = this.skeleton, r = this.geometry;
                Yi.fromBufferAttribute(r.attributes.skinIndex, e), Ji.fromBufferAttribute(r.attributes.skinWeight, e), Xi.fromBufferAttribute(r.attributes.position, e).applyMatrix4(this.bindMatrix), t.set(0, 0, 0);
                for (var i = 0; i < 4; i++) {
                    var a = Ji.getComponent(i);
                    if (0 !== a) {
                        var o = Yi.getComponent(i);
                        Ki.multiplyMatrices(n.bones[o].matrixWorld, n.boneInverses[o]), t.addScaledVector(Zi.copy(Xi).applyMatrix4(Ki), a)
                    }
                }
                return t.applyMatrix4(this.bindMatrixInverse)
            })
        });
        var na = new Q, ra = new Q;

        function ia(e, t) {
            if (e = e || [], this.bones = e.slice(0), this.boneMatrices = new Float32Array(16 * this.bones.length), this.frame = -1, void 0 === t) this.calculateInverses(); else if (this.bones.length === t.length) this.boneInverses = t.slice(0); else {
                console.warn("THREE.Skeleton boneInverses is the wrong length."), this.boneInverses = [];
                for (var n = 0, r = this.bones.length; n < r; n++) this.boneInverses.push(new Q)
            }
        }

        function aa() {
            ve.call(this), this.type = "Bone"
        }

        Object.assign(ia.prototype, {
            calculateInverses: function () {
                this.boneInverses = [];
                for (var e = 0, t = this.bones.length; e < t; e++) {
                    var n = new Q;
                    this.bones[e] && n.getInverse(this.bones[e].matrixWorld), this.boneInverses.push(n)
                }
            }, pose: function () {
                var e, t, n;
                for (t = 0, n = this.bones.length; t < n; t++) (e = this.bones[t]) && e.matrixWorld.getInverse(this.boneInverses[t]);
                for (t = 0, n = this.bones.length; t < n; t++) (e = this.bones[t]) && (e.parent && e.parent.isBone ? (e.matrix.getInverse(e.parent.matrixWorld), e.matrix.multiply(e.matrixWorld)) : e.matrix.copy(e.matrixWorld), e.matrix.decompose(e.position, e.quaternion, e.scale))
            }, update: function () {
                for (var e = this.bones, t = this.boneInverses, n = this.boneMatrices, r = this.boneTexture, i = 0, a = e.length; i < a; i++) {
                    var o = e[i] ? e[i].matrixWorld : ra;
                    na.multiplyMatrices(o, t[i]), na.toArray(n, 16 * i)
                }
                void 0 !== r && (r.needsUpdate = !0)
            }, clone: function () {
                return new ia(this.bones, this.boneInverses)
            }, getBoneByName: function (e) {
                for (var t = 0, n = this.bones.length; t < n; t++) {
                    var r = this.bones[t];
                    if (r.name === e) return r
                }
            }, dispose: function () {
                this.boneTexture && (this.boneTexture.dispose(), this.boneTexture = void 0)
            }
        }), aa.prototype = Object.assign(Object.create(ve.prototype), {constructor: aa, isBone: !0});
        var oa = new Q, sa = new Q, ca = [], la = new $t;

        function ua(e, t, n) {
            $t.call(this, e, t), this.instanceMatrix = new vt(new Float32Array(16 * n), 16), this.count = n, this.frustumCulled = !1
        }

        function ha(e) {
            dt.call(this), this.type = "LineBasicMaterial", this.color = new st(16777215), this.linewidth = 1, this.linecap = "round", this.linejoin = "round", this.morphTargets = !1, this.setValues(e)
        }

        ua.prototype = Object.assign(Object.create($t.prototype), {
            constructor: ua,
            isInstancedMesh: !0,
            getMatrixAt: function (e, t) {
                t.fromArray(this.instanceMatrix.array, 16 * e)
            },
            raycast: function (e, t) {
                var n = this.matrixWorld, r = this.count;
                if (la.geometry = this.geometry, la.material = this.material, void 0 !== la.material) for (var i = 0; i < r; i++) {
                    this.getMatrixAt(i, oa), sa.multiplyMatrices(n, oa), la.matrixWorld = sa, la.raycast(e, ca);
                    for (var a = 0, o = ca.length; a < o; a++) {
                        var s = ca[a];
                        s.instanceId = i, s.object = this, t.push(s)
                    }
                    ca.length = 0
                }
            },
            setMatrixAt: function (e, t) {
                t.toArray(this.instanceMatrix.array, 16 * e)
            },
            updateMorphTargets: function () {
            }
        }), ha.prototype = Object.create(dt.prototype), ha.prototype.constructor = ha, ha.prototype.isLineBasicMaterial = !0, ha.prototype.copy = function (e) {
            return dt.prototype.copy.call(this, e), this.color.copy(e.color), this.linewidth = e.linewidth, this.linecap = e.linecap, this.linejoin = e.linejoin, this.morphTargets = e.morphTargets, this
        };
        var pa = new V, da = new V, fa = new Q, ma = new ke, va = new Ne;

        function ga(e, t, n) {
            1 === n && console.error("THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead."), ve.call(this), this.type = "Line", this.geometry = void 0 !== e ? e : new Dt, this.material = void 0 !== t ? t : new ha, this.updateMorphTargets()
        }

        ga.prototype = Object.assign(Object.create(ve.prototype), {
            constructor: ga, isLine: !0, computeLineDistances: function () {
                var e = this.geometry;
                if (e.isBufferGeometry) if (null === e.index) {
                    for (var t = e.attributes.position, n = [0], r = 1, i = t.count; r < i; r++) pa.fromBufferAttribute(t, r - 1), da.fromBufferAttribute(t, r), n[r] = n[r - 1], n[r] += pa.distanceTo(da);
                    e.setAttribute("lineDistance", new St(n, 1))
                } else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry."); else if (e.isGeometry) {
                    var a = e.vertices;
                    (n = e.lineDistances)[0] = 0;
                    for (r = 1, i = a.length; r < i; r++) n[r] = n[r - 1], n[r] += a[r - 1].distanceTo(a[r])
                }
                return this
            }, raycast: function (e, t) {
                var n = this.geometry, r = this.matrixWorld, i = e.params.Line.threshold;
                if (null === n.boundingSphere && n.computeBoundingSphere(), va.copy(n.boundingSphere), va.applyMatrix4(r), va.radius += i, !1 !== e.ray.intersectsSphere(va)) {
                    fa.getInverse(r), ma.copy(e.ray).applyMatrix4(fa);
                    var a = i / ((this.scale.x + this.scale.y + this.scale.z) / 3), o = a * a, s = new V, c = new V,
                        l = new V, u = new V, h = this && this.isLineSegments ? 2 : 1;
                    if (n.isBufferGeometry) {
                        var p = n.index, d = n.attributes.position.array;
                        if (null !== p) for (var f = p.array, m = 0, v = f.length - 1; m < v; m += h) {
                            var g = f[m], y = f[m + 1];
                            if (s.fromArray(d, 3 * g), c.fromArray(d, 3 * y), !(ma.distanceSqToSegment(s, c, u, l) > o)) u.applyMatrix4(this.matrixWorld), (_ = e.ray.origin.distanceTo(u)) < e.near || _ > e.far || t.push({
                                distance: _,
                                point: l.clone().applyMatrix4(this.matrixWorld),
                                index: m,
                                face: null,
                                faceIndex: null,
                                object: this
                            })
                        } else for (m = 0, v = d.length / 3 - 1; m < v; m += h) {
                            if (s.fromArray(d, 3 * m), c.fromArray(d, 3 * m + 3), !(ma.distanceSqToSegment(s, c, u, l) > o)) u.applyMatrix4(this.matrixWorld), (_ = e.ray.origin.distanceTo(u)) < e.near || _ > e.far || t.push({
                                distance: _,
                                point: l.clone().applyMatrix4(this.matrixWorld),
                                index: m,
                                face: null,
                                faceIndex: null,
                                object: this
                            })
                        }
                    } else if (n.isGeometry) {
                        var x = n.vertices, b = x.length;
                        for (m = 0; m < b - 1; m += h) {
                            var _;
                            if (!(ma.distanceSqToSegment(x[m], x[m + 1], u, l) > o)) u.applyMatrix4(this.matrixWorld), (_ = e.ray.origin.distanceTo(u)) < e.near || _ > e.far || t.push({
                                distance: _,
                                point: l.clone().applyMatrix4(this.matrixWorld),
                                index: m,
                                face: null,
                                faceIndex: null,
                                object: this
                            })
                        }
                    }
                }
            }, updateMorphTargets: function () {
                var e, t, n, r = this.geometry;
                if (r.isBufferGeometry) {
                    var i = r.morphAttributes, a = Object.keys(i);
                    if (a.length > 0) {
                        var o = i[a[0]];
                        if (void 0 !== o) for (this.morphTargetInfluences = [], this.morphTargetDictionary = {}, e = 0, t = o.length; e < t; e++) n = o[e].name || String(e), this.morphTargetInfluences.push(0), this.morphTargetDictionary[n] = e
                    }
                } else {
                    var s = r.morphTargets;
                    void 0 !== s && s.length > 0 && console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")
                }
            }, clone: function () {
                return new this.constructor(this.geometry, this.material).copy(this)
            }
        });
        var ya = new V, xa = new V;

        function ba(e, t) {
            ga.call(this, e, t), this.type = "LineSegments"
        }

        function _a(e, t) {
            ga.call(this, e, t), this.type = "LineLoop"
        }

        function wa(e) {
            dt.call(this), this.type = "PointsMaterial", this.color = new st(16777215), this.map = null, this.alphaMap = null, this.size = 1, this.sizeAttenuation = !0, this.morphTargets = !1, this.setValues(e)
        }

        ba.prototype = Object.assign(Object.create(ga.prototype), {
            constructor: ba,
            isLineSegments: !0,
            computeLineDistances: function () {
                var e = this.geometry;
                if (e.isBufferGeometry) if (null === e.index) {
                    for (var t = e.attributes.position, n = [], r = 0, i = t.count; r < i; r += 2) ya.fromBufferAttribute(t, r), xa.fromBufferAttribute(t, r + 1), n[r] = 0 === r ? 0 : n[r - 1], n[r + 1] = n[r] + ya.distanceTo(xa);
                    e.setAttribute("lineDistance", new St(n, 1))
                } else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry."); else if (e.isGeometry) {
                    var a = e.vertices;
                    for (n = e.lineDistances, r = 0, i = a.length; r < i; r += 2) ya.copy(a[r]), xa.copy(a[r + 1]), n[r] = 0 === r ? 0 : n[r - 1], n[r + 1] = n[r] + ya.distanceTo(xa)
                }
                return this
            }
        }), _a.prototype = Object.assign(Object.create(ga.prototype), {
            constructor: _a,
            isLineLoop: !0
        }), wa.prototype = Object.create(dt.prototype), wa.prototype.constructor = wa, wa.prototype.isPointsMaterial = !0, wa.prototype.copy = function (e) {
            return dt.prototype.copy.call(this, e), this.color.copy(e.color), this.map = e.map, this.alphaMap = e.alphaMap, this.size = e.size, this.sizeAttenuation = e.sizeAttenuation, this.morphTargets = e.morphTargets, this
        };
        var Ma = new Q, Sa = new ke, Ta = new Ne, Ea = new V;

        function Aa(e, t) {
            ve.call(this), this.type = "Points", this.geometry = void 0 !== e ? e : new Dt, this.material = void 0 !== t ? t : new wa, this.updateMorphTargets()
        }

        function La(e, t, n, r, i, a, o) {
            var s = Sa.distanceSqToPoint(e);
            if (s < n) {
                var c = new V;
                Sa.closestPointToPoint(e, c), c.applyMatrix4(r);
                var l = i.ray.origin.distanceTo(c);
                if (l < i.near || l > i.far) return;
                a.push({distance: l, distanceToRay: Math.sqrt(s), point: c, index: t, face: null, object: o})
            }
        }

        function Ra(e, t, n, r, i, a, o, s, c) {
            z.call(this, e, t, n, r, i, a, o, s, c), this.format = void 0 !== o ? o : g, this.minFilter = void 0 !== a ? a : f, this.magFilter = void 0 !== i ? i : f, this.generateMipmaps = !1
        }

        function Pa(e, t, n, r, i, a, o, s, c, l, u, h) {
            z.call(this, null, a, o, s, c, l, r, i, u, h), this.image = {
                width: t,
                height: n
            }, this.mipmaps = e, this.flipY = !1, this.generateMipmaps = !1
        }

        function Ca(e, t, n, r, i, a, o, s, c) {
            z.call(this, e, t, n, r, i, a, o, s, c), this.needsUpdate = !0
        }

        function Oa(e, t, n, r, i, a, o, s, c, l) {
            if (1026 !== (l = void 0 !== l ? l : 1026) && 1027 !== l) throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
            void 0 === n && 1026 === l && (n = 1012), void 0 === n && 1027 === l && (n = 1020), z.call(this, null, r, i, a, o, s, l, n, c), this.image = {
                width: e,
                height: t
            }, this.magFilter = void 0 !== o ? o : h, this.minFilter = void 0 !== s ? s : h, this.flipY = !1, this.generateMipmaps = !1
        }

        function Ia(e) {
            Dt.call(this), this.type = "WireframeGeometry";
            var t, n, r, i, a, o, s, c, l, u, h = [], p = [0, 0], d = {}, f = ["a", "b", "c"];
            if (e && e.isGeometry) {
                var m = e.faces;
                for (t = 0, r = m.length; t < r; t++) {
                    var v = m[t];
                    for (n = 0; n < 3; n++) s = v[f[n]], c = v[f[(n + 1) % 3]], p[0] = Math.min(s, c), p[1] = Math.max(s, c), void 0 === d[l = p[0] + "," + p[1]] && (d[l] = {
                        index1: p[0],
                        index2: p[1]
                    })
                }
                for (l in d) o = d[l], u = e.vertices[o.index1], h.push(u.x, u.y, u.z), u = e.vertices[o.index2], h.push(u.x, u.y, u.z)
            } else if (e && e.isBufferGeometry) {
                var g, y, x, b, _, w, M;
                if (u = new V, null !== e.index) {
                    for (g = e.attributes.position, y = e.index, 0 === (x = e.groups).length && (x = [{
                        start: 0,
                        count: y.count,
                        materialIndex: 0
                    }]), i = 0, a = x.length; i < a; ++i) for (t = _ = (b = x[i]).start, r = _ + b.count; t < r; t += 3) for (n = 0; n < 3; n++) s = y.getX(t + n), c = y.getX(t + (n + 1) % 3), p[0] = Math.min(s, c), p[1] = Math.max(s, c), void 0 === d[l = p[0] + "," + p[1]] && (d[l] = {
                        index1: p[0],
                        index2: p[1]
                    });
                    for (l in d) o = d[l], u.fromBufferAttribute(g, o.index1), h.push(u.x, u.y, u.z), u.fromBufferAttribute(g, o.index2), h.push(u.x, u.y, u.z)
                } else for (t = 0, r = (g = e.attributes.position).count / 3; t < r; t++) for (n = 0; n < 3; n++) w = 3 * t + n, u.fromBufferAttribute(g, w), h.push(u.x, u.y, u.z), M = 3 * t + (n + 1) % 3, u.fromBufferAttribute(g, M), h.push(u.x, u.y, u.z)
            }
            this.setAttribute("position", new St(h, 3))
        }

        function Na(e, t, n) {
            sn.call(this), this.type = "ParametricGeometry", this.parameters = {
                func: e,
                slices: t,
                stacks: n
            }, this.fromBufferGeometry(new Da(e, t, n)), this.mergeVertices()
        }

        function Da(e, t, n) {
            Dt.call(this), this.type = "ParametricBufferGeometry", this.parameters = {func: e, slices: t, stacks: n};
            var r, i, a = [], o = [], s = [], c = [], l = 1e-5, u = new V, h = new V, p = new V, d = new V, f = new V;
            e.length < 3 && console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");
            var m = t + 1;
            for (r = 0; r <= n; r++) {
                var v = r / n;
                for (i = 0; i <= t; i++) {
                    var g = i / t;
                    e(g, v, h), o.push(h.x, h.y, h.z), g - l >= 0 ? (e(g - l, v, p), d.subVectors(h, p)) : (e(g + l, v, p), d.subVectors(p, h)), v - l >= 0 ? (e(g, v - l, p), f.subVectors(h, p)) : (e(g, v + l, p), f.subVectors(p, h)), u.crossVectors(d, f).normalize(), s.push(u.x, u.y, u.z), c.push(g, v)
                }
            }
            for (r = 0; r < n; r++) for (i = 0; i < t; i++) {
                var y = r * m + i, x = r * m + i + 1, b = (r + 1) * m + i + 1, _ = (r + 1) * m + i;
                a.push(y, x, _), a.push(x, b, _)
            }
            this.setIndex(a), this.setAttribute("position", new St(o, 3)), this.setAttribute("normal", new St(s, 3)), this.setAttribute("uv", new St(c, 2))
        }

        function Ua(e, t, n, r) {
            sn.call(this), this.type = "PolyhedronGeometry", this.parameters = {
                vertices: e,
                indices: t,
                radius: n,
                detail: r
            }, this.fromBufferGeometry(new za(e, t, n, r)), this.mergeVertices()
        }

        function za(e, t, n, r) {
            Dt.call(this), this.type = "PolyhedronBufferGeometry", this.parameters = {
                vertices: e,
                indices: t,
                radius: n,
                detail: r
            }, n = n || 1;
            var i = [], a = [];

            function o(e, t, n, r) {
                var i, a, o = Math.pow(2, r), c = [];
                for (i = 0; i <= o; i++) {
                    c[i] = [];
                    var l = e.clone().lerp(n, i / o), u = t.clone().lerp(n, i / o), h = o - i;
                    for (a = 0; a <= h; a++) c[i][a] = 0 === a && i === o ? l : l.clone().lerp(u, a / h)
                }
                for (i = 0; i < o; i++) for (a = 0; a < 2 * (o - i) - 1; a++) {
                    var p = Math.floor(a / 2);
                    a % 2 == 0 ? (s(c[i][p + 1]), s(c[i + 1][p]), s(c[i][p])) : (s(c[i][p + 1]), s(c[i + 1][p + 1]), s(c[i + 1][p]))
                }
            }

            function s(e) {
                i.push(e.x, e.y, e.z)
            }

            function c(t, n) {
                var r = 3 * t;
                n.x = e[r + 0], n.y = e[r + 1], n.z = e[r + 2]
            }

            function l(e, t, n, r) {
                r < 0 && 1 === e.x && (a[t] = e.x - 1), 0 === n.x && 0 === n.z && (a[t] = r / 2 / Math.PI + .5)
            }

            function u(e) {
                return Math.atan2(e.z, -e.x)
            }

            function h(e) {
                return Math.atan2(-e.y, Math.sqrt(e.x * e.x + e.z * e.z))
            }

            !function (e) {
                for (var n = new V, r = new V, i = new V, a = 0; a < t.length; a += 3) c(t[a + 0], n), c(t[a + 1], r), c(t[a + 2], i), o(n, r, i, e)
            }(r = r || 0), function (e) {
                for (var t = new V, n = 0; n < i.length; n += 3) t.x = i[n + 0], t.y = i[n + 1], t.z = i[n + 2], t.normalize().multiplyScalar(e), i[n + 0] = t.x, i[n + 1] = t.y, i[n + 2] = t.z
            }(n), function () {
                for (var e = new V, t = 0; t < i.length; t += 3) {
                    e.x = i[t + 0], e.y = i[t + 1], e.z = i[t + 2];
                    var n = u(e) / 2 / Math.PI + .5, r = h(e) / Math.PI + .5;
                    a.push(n, 1 - r)
                }
                (function () {
                    for (var e = new V, t = new V, n = new V, r = new V, o = new I, s = new I, c = new I, h = 0, p = 0; h < i.length; h += 9, p += 6) {
                        e.set(i[h + 0], i[h + 1], i[h + 2]), t.set(i[h + 3], i[h + 4], i[h + 5]), n.set(i[h + 6], i[h + 7], i[h + 8]), o.set(a[p + 0], a[p + 1]), s.set(a[p + 2], a[p + 3]), c.set(a[p + 4], a[p + 5]), r.copy(e).add(t).add(n).divideScalar(3);
                        var d = u(r);
                        l(o, p + 0, e, d), l(s, p + 2, t, d), l(c, p + 4, n, d)
                    }
                })(), function () {
                    for (var e = 0; e < a.length; e += 6) {
                        var t = a[e + 0], n = a[e + 2], r = a[e + 4], i = Math.max(t, n, r), o = Math.min(t, n, r);
                        i > .9 && o < .1 && (t < .2 && (a[e + 0] += 1), n < .2 && (a[e + 2] += 1), r < .2 && (a[e + 4] += 1))
                    }
                }()
            }(), this.setAttribute("position", new St(i, 3)), this.setAttribute("normal", new St(i.slice(), 3)), this.setAttribute("uv", new St(a, 2)), 0 === r ? this.computeVertexNormals() : this.normalizeNormals()
        }

        function Fa(e, t) {
            sn.call(this), this.type = "TetrahedronGeometry", this.parameters = {
                radius: e,
                detail: t
            }, this.fromBufferGeometry(new Ba(e, t)), this.mergeVertices()
        }

        function Ba(e, t) {
            za.call(this, [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1], [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1], e, t), this.type = "TetrahedronBufferGeometry", this.parameters = {
                radius: e,
                detail: t
            }
        }

        function Ha(e, t) {
            sn.call(this), this.type = "OctahedronGeometry", this.parameters = {
                radius: e,
                detail: t
            }, this.fromBufferGeometry(new Ga(e, t)), this.mergeVertices()
        }

        function Ga(e, t) {
            za.call(this, [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1], [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2], e, t), this.type = "OctahedronBufferGeometry", this.parameters = {
                radius: e,
                detail: t
            }
        }

        function ka(e, t) {
            sn.call(this), this.type = "IcosahedronGeometry", this.parameters = {
                radius: e,
                detail: t
            }, this.fromBufferGeometry(new ja(e, t)), this.mergeVertices()
        }

        function ja(e, t) {
            var n = (1 + Math.sqrt(5)) / 2,
                r = [-1, n, 0, 1, n, 0, -1, -n, 0, 1, -n, 0, 0, -1, n, 0, 1, n, 0, -1, -n, 0, 1, -n, n, 0, -1, n, 0, 1, -n, 0, -1, -n, 0, 1];
            za.call(this, r, [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1], e, t), this.type = "IcosahedronBufferGeometry", this.parameters = {
                radius: e,
                detail: t
            }
        }

        function Va(e, t) {
            sn.call(this), this.type = "DodecahedronGeometry", this.parameters = {
                radius: e,
                detail: t
            }, this.fromBufferGeometry(new Wa(e, t)), this.mergeVertices()
        }

        function Wa(e, t) {
            var n = (1 + Math.sqrt(5)) / 2, r = 1 / n,
                i = [-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 0, -r, -n, 0, -r, n, 0, r, -n, 0, r, n, -r, -n, 0, -r, n, 0, r, -n, 0, r, n, 0, -n, 0, -r, n, 0, -r, -n, 0, r, n, 0, r];
            za.call(this, i, [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9], e, t), this.type = "DodecahedronBufferGeometry", this.parameters = {
                radius: e,
                detail: t
            }
        }

        function qa(e, t, n, r, i, a) {
            sn.call(this), this.type = "TubeGeometry", this.parameters = {
                path: e,
                tubularSegments: t,
                radius: n,
                radialSegments: r,
                closed: i
            }, void 0 !== a && console.warn("THREE.TubeGeometry: taper has been removed.");
            var o = new Xa(e, t, n, r, i);
            this.tangents = o.tangents, this.normals = o.normals, this.binormals = o.binormals, this.fromBufferGeometry(o), this.mergeVertices()
        }

        function Xa(e, t, n, r, i) {
            Dt.call(this), this.type = "TubeBufferGeometry", this.parameters = {
                path: e,
                tubularSegments: t,
                radius: n,
                radialSegments: r,
                closed: i
            }, t = t || 64, n = n || 1, r = r || 8, i = i || !1;
            var a = e.computeFrenetFrames(t, i);
            this.tangents = a.tangents, this.normals = a.normals, this.binormals = a.binormals;
            var o, s, c = new V, l = new V, u = new I, h = new V, p = [], d = [], f = [], m = [];

            function v(i) {
                h = e.getPointAt(i / t, h);
                var o = a.normals[i], u = a.binormals[i];
                for (s = 0; s <= r; s++) {
                    var f = s / r * Math.PI * 2, m = Math.sin(f), v = -Math.cos(f);
                    l.x = v * o.x + m * u.x, l.y = v * o.y + m * u.y, l.z = v * o.z + m * u.z, l.normalize(), d.push(l.x, l.y, l.z), c.x = h.x + n * l.x, c.y = h.y + n * l.y, c.z = h.z + n * l.z, p.push(c.x, c.y, c.z)
                }
            }

            !function () {
                for (o = 0; o < t; o++) v(o);
                v(!1 === i ? t : 0), function () {
                    for (o = 0; o <= t; o++) for (s = 0; s <= r; s++) u.x = o / t, u.y = s / r, f.push(u.x, u.y)
                }(), function () {
                    for (s = 1; s <= t; s++) for (o = 1; o <= r; o++) {
                        var e = (r + 1) * (s - 1) + (o - 1), n = (r + 1) * s + (o - 1), i = (r + 1) * s + o,
                            a = (r + 1) * (s - 1) + o;
                        m.push(e, n, a), m.push(n, i, a)
                    }
                }()
            }(), this.setIndex(m), this.setAttribute("position", new St(p, 3)), this.setAttribute("normal", new St(d, 3)), this.setAttribute("uv", new St(f, 2))
        }

        function Ya(e, t, n, r, i, a, o) {
            sn.call(this), this.type = "TorusKnotGeometry", this.parameters = {
                radius: e,
                tube: t,
                tubularSegments: n,
                radialSegments: r,
                p: i,
                q: a
            }, void 0 !== o && console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead."), this.fromBufferGeometry(new Ja(e, t, n, r, i, a)), this.mergeVertices()
        }

        function Ja(e, t, n, r, i, a) {
            Dt.call(this), this.type = "TorusKnotBufferGeometry", this.parameters = {
                radius: e,
                tube: t,
                tubularSegments: n,
                radialSegments: r,
                p: i,
                q: a
            }, e = e || 1, t = t || .4, n = Math.floor(n) || 64, r = Math.floor(r) || 8, i = i || 2, a = a || 3;
            var o, s, c = [], l = [], u = [], h = [], p = new V, d = new V, f = new V, m = new V, v = new V, g = new V,
                y = new V;
            for (o = 0; o <= n; ++o) {
                var x = o / n * i * Math.PI * 2;
                for (A(x, i, a, e, f), A(x + .01, i, a, e, m), g.subVectors(m, f), y.addVectors(m, f), v.crossVectors(g, y), y.crossVectors(v, g), v.normalize(), y.normalize(), s = 0; s <= r; ++s) {
                    var b = s / r * Math.PI * 2, _ = -t * Math.cos(b), w = t * Math.sin(b);
                    p.x = f.x + (_ * y.x + w * v.x), p.y = f.y + (_ * y.y + w * v.y), p.z = f.z + (_ * y.z + w * v.z), l.push(p.x, p.y, p.z), d.subVectors(p, f).normalize(), u.push(d.x, d.y, d.z), h.push(o / n), h.push(s / r)
                }
            }
            for (s = 1; s <= n; s++) for (o = 1; o <= r; o++) {
                var M = (r + 1) * (s - 1) + (o - 1), S = (r + 1) * s + (o - 1), T = (r + 1) * s + o,
                    E = (r + 1) * (s - 1) + o;
                c.push(M, S, E), c.push(S, T, E)
            }

            function A(e, t, n, r, i) {
                var a = Math.cos(e), o = Math.sin(e), s = n / t * e, c = Math.cos(s);
                i.x = r * (2 + c) * .5 * a, i.y = r * (2 + c) * o * .5, i.z = r * Math.sin(s) * .5
            }

            this.setIndex(c), this.setAttribute("position", new St(l, 3)), this.setAttribute("normal", new St(u, 3)), this.setAttribute("uv", new St(h, 2))
        }

        function Za(e, t, n, r, i) {
            sn.call(this), this.type = "TorusGeometry", this.parameters = {
                radius: e,
                tube: t,
                radialSegments: n,
                tubularSegments: r,
                arc: i
            }, this.fromBufferGeometry(new Ka(e, t, n, r, i)), this.mergeVertices()
        }

        function Ka(e, t, n, r, i) {
            Dt.call(this), this.type = "TorusBufferGeometry", this.parameters = {
                radius: e,
                tube: t,
                radialSegments: n,
                tubularSegments: r,
                arc: i
            }, e = e || 1, t = t || .4, n = Math.floor(n) || 8, r = Math.floor(r) || 6, i = i || 2 * Math.PI;
            var a, o, s = [], c = [], l = [], u = [], h = new V, p = new V, d = new V;
            for (a = 0; a <= n; a++) for (o = 0; o <= r; o++) {
                var f = o / r * i, m = a / n * Math.PI * 2;
                p.x = (e + t * Math.cos(m)) * Math.cos(f), p.y = (e + t * Math.cos(m)) * Math.sin(f), p.z = t * Math.sin(m), c.push(p.x, p.y, p.z), h.x = e * Math.cos(f), h.y = e * Math.sin(f), d.subVectors(p, h).normalize(), l.push(d.x, d.y, d.z), u.push(o / r), u.push(a / n)
            }
            for (a = 1; a <= n; a++) for (o = 1; o <= r; o++) {
                var v = (r + 1) * a + o - 1, g = (r + 1) * (a - 1) + o - 1, y = (r + 1) * (a - 1) + o,
                    x = (r + 1) * a + o;
                s.push(v, g, x), s.push(g, y, x)
            }
            this.setIndex(s), this.setAttribute("position", new St(c, 3)), this.setAttribute("normal", new St(l, 3)), this.setAttribute("uv", new St(u, 2))
        }

        Aa.prototype = Object.assign(Object.create(ve.prototype), {
            constructor: Aa, isPoints: !0, raycast: function (e, t) {
                var n = this.geometry, r = this.matrixWorld, i = e.params.Points.threshold;
                if (null === n.boundingSphere && n.computeBoundingSphere(), Ta.copy(n.boundingSphere), Ta.applyMatrix4(r), Ta.radius += i, !1 !== e.ray.intersectsSphere(Ta)) {
                    Ma.getInverse(r), Sa.copy(e.ray).applyMatrix4(Ma);
                    var a = i / ((this.scale.x + this.scale.y + this.scale.z) / 3), o = a * a;
                    if (n.isBufferGeometry) {
                        var s = n.index, c = n.attributes.position.array;
                        if (null !== s) for (var l = s.array, u = 0, h = l.length; u < h; u++) {
                            var p = l[u];
                            Ea.fromArray(c, 3 * p), La(Ea, p, o, r, e, t, this)
                        } else {
                            u = 0;
                            for (var d = c.length / 3; u < d; u++) Ea.fromArray(c, 3 * u), La(Ea, u, o, r, e, t, this)
                        }
                    } else {
                        var f = n.vertices;
                        for (u = 0, d = f.length; u < d; u++) La(f[u], u, o, r, e, t, this)
                    }
                }
            }, updateMorphTargets: function () {
                var e, t, n, r = this.geometry;
                if (r.isBufferGeometry) {
                    var i = r.morphAttributes, a = Object.keys(i);
                    if (a.length > 0) {
                        var o = i[a[0]];
                        if (void 0 !== o) for (this.morphTargetInfluences = [], this.morphTargetDictionary = {}, e = 0, t = o.length; e < t; e++) n = o[e].name || String(e), this.morphTargetInfluences.push(0), this.morphTargetDictionary[n] = e
                    }
                } else {
                    var s = r.morphTargets;
                    void 0 !== s && s.length > 0 && console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")
                }
            }, clone: function () {
                return new this.constructor(this.geometry, this.material).copy(this)
            }
        }), Ra.prototype = Object.assign(Object.create(z.prototype), {
            constructor: Ra,
            isVideoTexture: !0,
            update: function () {
                var e = this.image;
                e.readyState >= e.HAVE_CURRENT_DATA && (this.needsUpdate = !0)
            }
        }), Pa.prototype = Object.create(z.prototype), Pa.prototype.constructor = Pa, Pa.prototype.isCompressedTexture = !0, Ca.prototype = Object.create(z.prototype), Ca.prototype.constructor = Ca, Ca.prototype.isCanvasTexture = !0, Oa.prototype = Object.create(z.prototype), Oa.prototype.constructor = Oa, Oa.prototype.isDepthTexture = !0, Ia.prototype = Object.create(Dt.prototype), Ia.prototype.constructor = Ia, Na.prototype = Object.create(sn.prototype), Na.prototype.constructor = Na, Da.prototype = Object.create(Dt.prototype), Da.prototype.constructor = Da, Ua.prototype = Object.create(sn.prototype), Ua.prototype.constructor = Ua, za.prototype = Object.create(Dt.prototype), za.prototype.constructor = za, Fa.prototype = Object.create(sn.prototype), Fa.prototype.constructor = Fa, Ba.prototype = Object.create(za.prototype), Ba.prototype.constructor = Ba, Ha.prototype = Object.create(sn.prototype), Ha.prototype.constructor = Ha, Ga.prototype = Object.create(za.prototype), Ga.prototype.constructor = Ga, ka.prototype = Object.create(sn.prototype), ka.prototype.constructor = ka, ja.prototype = Object.create(za.prototype), ja.prototype.constructor = ja, Va.prototype = Object.create(sn.prototype), Va.prototype.constructor = Va, Wa.prototype = Object.create(za.prototype), Wa.prototype.constructor = Wa, qa.prototype = Object.create(sn.prototype), qa.prototype.constructor = qa, Xa.prototype = Object.create(Dt.prototype), Xa.prototype.constructor = Xa, Xa.prototype.toJSON = function () {
            var e = Dt.prototype.toJSON.call(this);
            return e.path = this.parameters.path.toJSON(), e
        }, Ya.prototype = Object.create(sn.prototype), Ya.prototype.constructor = Ya, Ja.prototype = Object.create(Dt.prototype), Ja.prototype.constructor = Ja, Za.prototype = Object.create(sn.prototype), Za.prototype.constructor = Za, Ka.prototype = Object.create(Dt.prototype), Ka.prototype.constructor = Ka;
        var Qa = function (e, t, n) {
            n = n || 2;
            var r, i, a, o, s, c, l, u = t && t.length, h = u ? t[0] * n : e.length, p = $a(e, 0, h, n, !0), d = [];
            if (!p || p.next === p.prev) return d;
            if (u && (p = function (e, t, n, r) {
                var i, a, o, s, c, l = [];
                for (i = 0, a = t.length; i < a; i++) o = t[i] * r, s = i < a - 1 ? t[i + 1] * r : e.length, (c = $a(e, o, s, r, !1)) === c.next && (c.steiner = !0), l.push(uo(c));
                for (l.sort(oo), i = 0; i < l.length; i++) so(l[i], n), n = eo(n, n.next);
                return n
            }(e, t, p, n)), e.length > 80 * n) {
                r = a = e[0], i = o = e[1];
                for (var f = n; f < h; f += n) (s = e[f]) < r && (r = s), (c = e[f + 1]) < i && (i = c), s > a && (a = s), c > o && (o = c);
                l = 0 !== (l = Math.max(a - r, o - i)) ? 1 / l : 0
            }
            return to(p, d, n, r, i, l), d
        };

        function $a(e, t, n, r, i) {
            var a, o;
            if (i === function (e, t, n, r) {
                for (var i = 0, a = t, o = n - r; a < n; a += r) i += (e[o] - e[a]) * (e[a + 1] + e[o + 1]), o = a;
                return i
            }(e, t, n, r) > 0) for (a = t; a < n; a += r) o = _o(a, e[a], e[a + 1], o); else for (a = n - r; a >= t; a -= r) o = _o(a, e[a], e[a + 1], o);
            return o && mo(o, o.next) && (wo(o), o = o.next), o
        }

        function eo(e, t) {
            if (!e) return e;
            t || (t = e);
            var n, r = e;
            do {
                if (n = !1, r.steiner || !mo(r, r.next) && 0 !== fo(r.prev, r, r.next)) r = r.next; else {
                    if (wo(r), (r = t = r.prev) === r.next) break;
                    n = !0
                }
            } while (n || r !== t);
            return t
        }

        function to(e, t, n, r, i, a, o) {
            if (e) {
                !o && a && function (e, t, n, r) {
                    var i = e;
                    do {
                        null === i.z && (i.z = lo(i.x, i.y, t, n, r)), i.prevZ = i.prev, i.nextZ = i.next, i = i.next
                    } while (i !== e);
                    i.prevZ.nextZ = null, i.prevZ = null, function (e) {
                        var t, n, r, i, a, o, s, c, l = 1;
                        do {
                            for (n = e, e = null, a = null, o = 0; n;) {
                                for (o++, r = n, s = 0, t = 0; t < l && (s++, r = r.nextZ); t++) ;
                                for (c = l; s > 0 || c > 0 && r;) 0 !== s && (0 === c || !r || n.z <= r.z) ? (i = n, n = n.nextZ, s--) : (i = r, r = r.nextZ, c--), a ? a.nextZ = i : e = i, i.prevZ = a, a = i;
                                n = r
                            }
                            a.nextZ = null, l *= 2
                        } while (o > 1)
                    }(i)
                }(e, r, i, a);
                for (var s, c, l = e; e.prev !== e.next;) if (s = e.prev, c = e.next, a ? ro(e, r, i, a) : no(e)) t.push(s.i / n), t.push(e.i / n), t.push(c.i / n), wo(e), e = c.next, l = c.next; else if ((e = c) === l) {
                    o ? 1 === o ? to(e = io(eo(e), t, n), t, n, r, i, a, 2) : 2 === o && ao(e, t, n, r, i, a) : to(eo(e), t, n, r, i, a, 1);
                    break
                }
            }
        }

        function no(e) {
            var t = e.prev, n = e, r = e.next;
            if (fo(t, n, r) >= 0) return !1;
            for (var i = e.next.next; i !== e.prev;) {
                if (ho(t.x, t.y, n.x, n.y, r.x, r.y, i.x, i.y) && fo(i.prev, i, i.next) >= 0) return !1;
                i = i.next
            }
            return !0
        }

        function ro(e, t, n, r) {
            var i = e.prev, a = e, o = e.next;
            if (fo(i, a, o) >= 0) return !1;
            for (var s = i.x < a.x ? i.x < o.x ? i.x : o.x : a.x < o.x ? a.x : o.x, c = i.y < a.y ? i.y < o.y ? i.y : o.y : a.y < o.y ? a.y : o.y, l = i.x > a.x ? i.x > o.x ? i.x : o.x : a.x > o.x ? a.x : o.x, u = i.y > a.y ? i.y > o.y ? i.y : o.y : a.y > o.y ? a.y : o.y, h = lo(s, c, t, n, r), p = lo(l, u, t, n, r), d = e.prevZ, f = e.nextZ; d && d.z >= h && f && f.z <= p;) {
                if (d !== e.prev && d !== e.next && ho(i.x, i.y, a.x, a.y, o.x, o.y, d.x, d.y) && fo(d.prev, d, d.next) >= 0) return !1;
                if (d = d.prevZ, f !== e.prev && f !== e.next && ho(i.x, i.y, a.x, a.y, o.x, o.y, f.x, f.y) && fo(f.prev, f, f.next) >= 0) return !1;
                f = f.nextZ
            }
            for (; d && d.z >= h;) {
                if (d !== e.prev && d !== e.next && ho(i.x, i.y, a.x, a.y, o.x, o.y, d.x, d.y) && fo(d.prev, d, d.next) >= 0) return !1;
                d = d.prevZ
            }
            for (; f && f.z <= p;) {
                if (f !== e.prev && f !== e.next && ho(i.x, i.y, a.x, a.y, o.x, o.y, f.x, f.y) && fo(f.prev, f, f.next) >= 0) return !1;
                f = f.nextZ
            }
            return !0
        }

        function io(e, t, n) {
            var r = e;
            do {
                var i = r.prev, a = r.next.next;
                !mo(i, a) && vo(i, r, r.next, a) && xo(i, a) && xo(a, i) && (t.push(i.i / n), t.push(r.i / n), t.push(a.i / n), wo(r), wo(r.next), r = e = a), r = r.next
            } while (r !== e);
            return eo(r)
        }

        function ao(e, t, n, r, i, a) {
            var o = e;
            do {
                for (var s = o.next.next; s !== o.prev;) {
                    if (o.i !== s.i && po(o, s)) {
                        var c = bo(o, s);
                        return o = eo(o, o.next), c = eo(c, c.next), to(o, t, n, r, i, a), void to(c, t, n, r, i, a)
                    }
                    s = s.next
                }
                o = o.next
            } while (o !== e)
        }

        function oo(e, t) {
            return e.x - t.x
        }

        function so(e, t) {
            if (t = function (e, t) {
                var n, r = t, i = e.x, a = e.y, o = -1 / 0;
                do {
                    if (a <= r.y && a >= r.next.y && r.next.y !== r.y) {
                        var s = r.x + (a - r.y) * (r.next.x - r.x) / (r.next.y - r.y);
                        if (s <= i && s > o) {
                            if (o = s, s === i) {
                                if (a === r.y) return r;
                                if (a === r.next.y) return r.next
                            }
                            n = r.x < r.next.x ? r : r.next
                        }
                    }
                    r = r.next
                } while (r !== t);
                if (!n) return null;
                if (i === o) return n;
                var c, l = n, u = n.x, h = n.y, p = 1 / 0;
                r = n;
                do {
                    i >= r.x && r.x >= u && i !== r.x && ho(a < h ? i : o, a, u, h, a < h ? o : i, a, r.x, r.y) && (c = Math.abs(a - r.y) / (i - r.x), xo(r, e) && (c < p || c === p && (r.x > n.x || r.x === n.x && co(n, r))) && (n = r, p = c)), r = r.next
                } while (r !== l);
                return n
            }(e, t)) {
                var n = bo(t, e);
                eo(t, t.next), eo(n, n.next)
            }
        }

        function co(e, t) {
            return fo(e.prev, e, t.prev) < 0 && fo(t.next, e, e.next) < 0
        }

        function lo(e, t, n, r, i) {
            return (e = 1431655765 & ((e = 858993459 & ((e = 252645135 & ((e = 16711935 & ((e = 32767 * (e - n) * i) | e << 8)) | e << 4)) | e << 2)) | e << 1)) | (t = 1431655765 & ((t = 858993459 & ((t = 252645135 & ((t = 16711935 & ((t = 32767 * (t - r) * i) | t << 8)) | t << 4)) | t << 2)) | t << 1)) << 1
        }

        function uo(e) {
            var t = e, n = e;
            do {
                (t.x < n.x || t.x === n.x && t.y < n.y) && (n = t), t = t.next
            } while (t !== e);
            return n
        }

        function ho(e, t, n, r, i, a, o, s) {
            return (i - o) * (t - s) - (e - o) * (a - s) >= 0 && (e - o) * (r - s) - (n - o) * (t - s) >= 0 && (n - o) * (a - s) - (i - o) * (r - s) >= 0
        }

        function po(e, t) {
            return e.next.i !== t.i && e.prev.i !== t.i && !function (e, t) {
                var n = e;
                do {
                    if (n.i !== e.i && n.next.i !== e.i && n.i !== t.i && n.next.i !== t.i && vo(n, n.next, e, t)) return !0;
                    n = n.next
                } while (n !== e);
                return !1
            }(e, t) && (xo(e, t) && xo(t, e) && function (e, t) {
                var n = e, r = !1, i = (e.x + t.x) / 2, a = (e.y + t.y) / 2;
                do {
                    n.y > a != n.next.y > a && n.next.y !== n.y && i < (n.next.x - n.x) * (a - n.y) / (n.next.y - n.y) + n.x && (r = !r), n = n.next
                } while (n !== e);
                return r
            }(e, t) && (fo(e.prev, e, t.prev) || fo(e, t.prev, t)) || mo(e, t) && fo(e.prev, e, e.next) > 0 && fo(t.prev, t, t.next) > 0)
        }

        function fo(e, t, n) {
            return (t.y - e.y) * (n.x - t.x) - (t.x - e.x) * (n.y - t.y)
        }

        function mo(e, t) {
            return e.x === t.x && e.y === t.y
        }

        function vo(e, t, n, r) {
            var i = yo(fo(e, t, n)), a = yo(fo(e, t, r)), o = yo(fo(n, r, e)), s = yo(fo(n, r, t));
            return i !== a && o !== s || (!(0 !== i || !go(e, n, t)) || (!(0 !== a || !go(e, r, t)) || (!(0 !== o || !go(n, e, r)) || !(0 !== s || !go(n, t, r)))))
        }

        function go(e, t, n) {
            return t.x <= Math.max(e.x, n.x) && t.x >= Math.min(e.x, n.x) && t.y <= Math.max(e.y, n.y) && t.y >= Math.min(e.y, n.y)
        }

        function yo(e) {
            return e > 0 ? 1 : e < 0 ? -1 : 0
        }

        function xo(e, t) {
            return fo(e.prev, e, e.next) < 0 ? fo(e, t, e.next) >= 0 && fo(e, e.prev, t) >= 0 : fo(e, t, e.prev) < 0 || fo(e, e.next, t) < 0
        }

        function bo(e, t) {
            var n = new Mo(e.i, e.x, e.y), r = new Mo(t.i, t.x, t.y), i = e.next, a = t.prev;
            return e.next = t, t.prev = e, n.next = i, i.prev = n, r.next = n, n.prev = r, a.next = r, r.prev = a, r
        }

        function _o(e, t, n, r) {
            var i = new Mo(e, t, n);
            return r ? (i.next = r.next, i.prev = r, r.next.prev = i, r.next = i) : (i.prev = i, i.next = i), i
        }

        function wo(e) {
            e.next.prev = e.prev, e.prev.next = e.next, e.prevZ && (e.prevZ.nextZ = e.nextZ), e.nextZ && (e.nextZ.prevZ = e.prevZ)
        }

        function Mo(e, t, n) {
            this.i = e, this.x = t, this.y = n, this.prev = null, this.next = null, this.z = null, this.prevZ = null, this.nextZ = null, this.steiner = !1
        }

        var So = {
            area: function (e) {
                for (var t = e.length, n = 0, r = t - 1, i = 0; i < t; r = i++) n += e[r].x * e[i].y - e[i].x * e[r].y;
                return .5 * n
            }, isClockWise: function (e) {
                return So.area(e) < 0
            }, triangulateShape: function (e, t) {
                var n = [], r = [], i = [];
                To(e), Eo(n, e);
                var a = e.length;
                t.forEach(To);
                for (var o = 0; o < t.length; o++) r.push(a), a += t[o].length, Eo(n, t[o]);
                var s = Qa(n, r);
                for (o = 0; o < s.length; o += 3) i.push(s.slice(o, o + 3));
                return i
            }
        };

        function To(e) {
            var t = e.length;
            t > 2 && e[t - 1].equals(e[0]) && e.pop()
        }

        function Eo(e, t) {
            for (var n = 0; n < t.length; n++) e.push(t[n].x), e.push(t[n].y)
        }

        function Ao(e, t) {
            sn.call(this), this.type = "ExtrudeGeometry", this.parameters = {
                shapes: e,
                options: t
            }, this.fromBufferGeometry(new Lo(e, t)), this.mergeVertices()
        }

        function Lo(e, t) {
            Dt.call(this), this.type = "ExtrudeBufferGeometry", this.parameters = {
                shapes: e,
                options: t
            }, e = Array.isArray(e) ? e : [e];
            for (var n = this, r = [], i = [], a = 0, o = e.length; a < o; a++) {
                s(e[a])
            }

            function s(e) {
                var a = [], o = void 0 !== t.curveSegments ? t.curveSegments : 12, s = void 0 !== t.steps ? t.steps : 1,
                    c = void 0 !== t.depth ? t.depth : 100, l = void 0 === t.bevelEnabled || t.bevelEnabled,
                    u = void 0 !== t.bevelThickness ? t.bevelThickness : 6,
                    h = void 0 !== t.bevelSize ? t.bevelSize : u - 2, p = void 0 !== t.bevelOffset ? t.bevelOffset : 0,
                    d = void 0 !== t.bevelSegments ? t.bevelSegments : 3, f = t.extrudePath,
                    m = void 0 !== t.UVGenerator ? t.UVGenerator : Ro;
                void 0 !== t.amount && (console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."), c = t.amount);
                var v, g, y, x, b, _, w, M, S = !1;
                f && (v = f.getSpacedPoints(s), S = !0, l = !1, g = f.computeFrenetFrames(s, !1), y = new V, x = new V, b = new V), l || (d = 0, u = 0, h = 0, p = 0);
                var T = e.extractPoints(o), E = T.shape, A = T.holes;
                if (!So.isClockWise(E)) for (E = E.reverse(), w = 0, M = A.length; w < M; w++) _ = A[w], So.isClockWise(_) && (A[w] = _.reverse());
                var L = So.triangulateShape(E, A), R = E;
                for (w = 0, M = A.length; w < M; w++) _ = A[w], E = E.concat(_);

                function P(e, t, n) {
                    return t || console.error("THREE.ExtrudeGeometry: vec does not exist"), t.clone().multiplyScalar(n).add(e)
                }

                var C, O, N, D, U, z, F = E.length, B = L.length;

                function H(e, t, n) {
                    var r, i, a, o = e.x - t.x, s = e.y - t.y, c = n.x - e.x, l = n.y - e.y, u = o * o + s * s,
                        h = o * l - s * c;
                    if (Math.abs(h) > Number.EPSILON) {
                        var p = Math.sqrt(u), d = Math.sqrt(c * c + l * l), f = t.x - s / p, m = t.y + o / p,
                            v = ((n.x - l / d - f) * l - (n.y + c / d - m) * c) / (o * l - s * c),
                            g = (r = f + o * v - e.x) * r + (i = m + s * v - e.y) * i;
                        if (g <= 2) return new I(r, i);
                        a = Math.sqrt(g / 2)
                    } else {
                        var y = !1;
                        o > Number.EPSILON ? c > Number.EPSILON && (y = !0) : o < -Number.EPSILON ? c < -Number.EPSILON && (y = !0) : Math.sign(s) === Math.sign(l) && (y = !0), y ? (r = -s, i = o, a = Math.sqrt(u)) : (r = o, i = s, a = Math.sqrt(u / 2))
                    }
                    return new I(r / a, i / a)
                }

                for (var G = [], k = 0, j = R.length, W = j - 1, q = k + 1; k < j; k++, W++, q++) W === j && (W = 0), q === j && (q = 0), G[k] = H(R[k], R[W], R[q]);
                var X, Y, J = [], Z = G.concat();
                for (w = 0, M = A.length; w < M; w++) {
                    for (_ = A[w], X = [], k = 0, W = (j = _.length) - 1, q = k + 1; k < j; k++, W++, q++) W === j && (W = 0), q === j && (q = 0), X[k] = H(_[k], _[W], _[q]);
                    J.push(X), Z = Z.concat(X)
                }
                for (C = 0; C < d; C++) {
                    for (N = C / d, D = u * Math.cos(N * Math.PI / 2), O = h * Math.sin(N * Math.PI / 2) + p, k = 0, j = R.length; k < j; k++) Q((U = P(R[k], G[k], O)).x, U.y, -D);
                    for (w = 0, M = A.length; w < M; w++) for (_ = A[w], X = J[w], k = 0, j = _.length; k < j; k++) Q((U = P(_[k], X[k], O)).x, U.y, -D)
                }
                for (O = h + p, k = 0; k < F; k++) U = l ? P(E[k], Z[k], O) : E[k], S ? (x.copy(g.normals[0]).multiplyScalar(U.x), y.copy(g.binormals[0]).multiplyScalar(U.y), b.copy(v[0]).add(x).add(y), Q(b.x, b.y, b.z)) : Q(U.x, U.y, 0);
                for (Y = 1; Y <= s; Y++) for (k = 0; k < F; k++) U = l ? P(E[k], Z[k], O) : E[k], S ? (x.copy(g.normals[Y]).multiplyScalar(U.x), y.copy(g.binormals[Y]).multiplyScalar(U.y), b.copy(v[Y]).add(x).add(y), Q(b.x, b.y, b.z)) : Q(U.x, U.y, c / s * Y);
                for (C = d - 1; C >= 0; C--) {
                    for (N = C / d, D = u * Math.cos(N * Math.PI / 2), O = h * Math.sin(N * Math.PI / 2) + p, k = 0, j = R.length; k < j; k++) Q((U = P(R[k], G[k], O)).x, U.y, c + D);
                    for (w = 0, M = A.length; w < M; w++) for (_ = A[w], X = J[w], k = 0, j = _.length; k < j; k++) U = P(_[k], X[k], O), S ? Q(U.x, U.y + v[s - 1].y, v[s - 1].x + D) : Q(U.x, U.y, c + D)
                }

                function K(e, t) {
                    var n, r;
                    for (k = e.length; --k >= 0;) {
                        n = k, (r = k - 1) < 0 && (r = e.length - 1);
                        var i = 0, a = s + 2 * d;
                        for (i = 0; i < a; i++) {
                            var o = F * i, c = F * (i + 1);
                            ee(t + n + o, t + r + o, t + r + c, t + n + c)
                        }
                    }
                }

                function Q(e, t, n) {
                    a.push(e), a.push(t), a.push(n)
                }

                function $(e, t, i) {
                    te(e), te(t), te(i);
                    var a = r.length / 3, o = m.generateTopUV(n, r, a - 3, a - 2, a - 1);
                    ne(o[0]), ne(o[1]), ne(o[2])
                }

                function ee(e, t, i, a) {
                    te(e), te(t), te(a), te(t), te(i), te(a);
                    var o = r.length / 3, s = m.generateSideWallUV(n, r, o - 6, o - 3, o - 2, o - 1);
                    ne(s[0]), ne(s[1]), ne(s[3]), ne(s[1]), ne(s[2]), ne(s[3])
                }

                function te(e) {
                    r.push(a[3 * e + 0]), r.push(a[3 * e + 1]), r.push(a[3 * e + 2])
                }

                function ne(e) {
                    i.push(e.x), i.push(e.y)
                }

                !function () {
                    var e = r.length / 3;
                    if (l) {
                        var t = 0, i = F * t;
                        for (k = 0; k < B; k++) $((z = L[k])[2] + i, z[1] + i, z[0] + i);
                        for (i = F * (t = s + 2 * d), k = 0; k < B; k++) $((z = L[k])[0] + i, z[1] + i, z[2] + i)
                    } else {
                        for (k = 0; k < B; k++) $((z = L[k])[2], z[1], z[0]);
                        for (k = 0; k < B; k++) $((z = L[k])[0] + F * s, z[1] + F * s, z[2] + F * s)
                    }
                    n.addGroup(e, r.length / 3 - e, 0)
                }(), function () {
                    var e = r.length / 3, t = 0;
                    for (K(R, t), t += R.length, w = 0, M = A.length; w < M; w++) K(_ = A[w], t), t += _.length;
                    n.addGroup(e, r.length / 3 - e, 1)
                }()
            }

            this.setAttribute("position", new St(r, 3)), this.setAttribute("uv", new St(i, 2)), this.computeVertexNormals()
        }

        Ao.prototype = Object.create(sn.prototype), Ao.prototype.constructor = Ao, Ao.prototype.toJSON = function () {
            var e = sn.prototype.toJSON.call(this);
            return Po(this.parameters.shapes, this.parameters.options, e)
        }, Lo.prototype = Object.create(Dt.prototype), Lo.prototype.constructor = Lo, Lo.prototype.toJSON = function () {
            var e = Dt.prototype.toJSON.call(this);
            return Po(this.parameters.shapes, this.parameters.options, e)
        };
        var Ro = {
            generateTopUV: function (e, t, n, r, i) {
                var a = t[3 * n], o = t[3 * n + 1], s = t[3 * r], c = t[3 * r + 1], l = t[3 * i], u = t[3 * i + 1];
                return [new I(a, o), new I(s, c), new I(l, u)]
            }, generateSideWallUV: function (e, t, n, r, i, a) {
                var o = t[3 * n], s = t[3 * n + 1], c = t[3 * n + 2], l = t[3 * r], u = t[3 * r + 1], h = t[3 * r + 2],
                    p = t[3 * i], d = t[3 * i + 1], f = t[3 * i + 2], m = t[3 * a], v = t[3 * a + 1], g = t[3 * a + 2];
                return Math.abs(s - u) < .01 ? [new I(o, 1 - c), new I(l, 1 - h), new I(p, 1 - f), new I(m, 1 - g)] : [new I(s, 1 - c), new I(u, 1 - h), new I(d, 1 - f), new I(v, 1 - g)]
            }
        };

        function Po(e, t, n) {
            if (n.shapes = [], Array.isArray(e)) for (var r = 0, i = e.length; r < i; r++) {
                var a = e[r];
                n.shapes.push(a.uuid)
            } else n.shapes.push(e.uuid);
            return void 0 !== t.extrudePath && (n.options.extrudePath = t.extrudePath.toJSON()), n
        }

        function Co(e, t) {
            sn.call(this), this.type = "TextGeometry", this.parameters = {
                text: e,
                parameters: t
            }, this.fromBufferGeometry(new Oo(e, t)), this.mergeVertices()
        }

        function Oo(e, t) {
            var n = (t = t || {}).font;
            if (!n || !n.isFont) return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."), new sn;
            var r = n.generateShapes(e, t.size);
            t.depth = void 0 !== t.height ? t.height : 50, void 0 === t.bevelThickness && (t.bevelThickness = 10), void 0 === t.bevelSize && (t.bevelSize = 8), void 0 === t.bevelEnabled && (t.bevelEnabled = !1), Lo.call(this, r, t), this.type = "TextBufferGeometry"
        }

        function Io(e, t, n, r, i, a, o) {
            sn.call(this), this.type = "SphereGeometry", this.parameters = {
                radius: e,
                widthSegments: t,
                heightSegments: n,
                phiStart: r,
                phiLength: i,
                thetaStart: a,
                thetaLength: o
            }, this.fromBufferGeometry(new No(e, t, n, r, i, a, o)), this.mergeVertices()
        }

        function No(e, t, n, r, i, a, o) {
            Dt.call(this), this.type = "SphereBufferGeometry", this.parameters = {
                radius: e,
                widthSegments: t,
                heightSegments: n,
                phiStart: r,
                phiLength: i,
                thetaStart: a,
                thetaLength: o
            }, e = e || 1, t = Math.max(3, Math.floor(t) || 8), n = Math.max(2, Math.floor(n) || 6), r = void 0 !== r ? r : 0, i = void 0 !== i ? i : 2 * Math.PI, a = void 0 !== a ? a : 0, o = void 0 !== o ? o : Math.PI;
            var s, c, l = Math.min(a + o, Math.PI), u = 0, h = [], p = new V, d = new V, f = [], m = [], v = [], g = [];
            for (c = 0; c <= n; c++) {
                var y = [], x = c / n, b = 0;
                for (0 == c && 0 == a ? b = .5 / t : c == n && l == Math.PI && (b = -.5 / t), s = 0; s <= t; s++) {
                    var _ = s / t;
                    p.x = -e * Math.cos(r + _ * i) * Math.sin(a + x * o), p.y = e * Math.cos(a + x * o), p.z = e * Math.sin(r + _ * i) * Math.sin(a + x * o), m.push(p.x, p.y, p.z), d.copy(p).normalize(), v.push(d.x, d.y, d.z), g.push(_ + b, 1 - x), y.push(u++)
                }
                h.push(y)
            }
            for (c = 0; c < n; c++) for (s = 0; s < t; s++) {
                var w = h[c][s + 1], M = h[c][s], S = h[c + 1][s], T = h[c + 1][s + 1];
                (0 !== c || a > 0) && f.push(w, M, T), (c !== n - 1 || l < Math.PI) && f.push(M, S, T)
            }
            this.setIndex(f), this.setAttribute("position", new St(m, 3)), this.setAttribute("normal", new St(v, 3)), this.setAttribute("uv", new St(g, 2))
        }

        function Do(e, t, n, r, i, a) {
            sn.call(this), this.type = "RingGeometry", this.parameters = {
                innerRadius: e,
                outerRadius: t,
                thetaSegments: n,
                phiSegments: r,
                thetaStart: i,
                thetaLength: a
            }, this.fromBufferGeometry(new Uo(e, t, n, r, i, a)), this.mergeVertices()
        }

        function Uo(e, t, n, r, i, a) {
            Dt.call(this), this.type = "RingBufferGeometry", this.parameters = {
                innerRadius: e,
                outerRadius: t,
                thetaSegments: n,
                phiSegments: r,
                thetaStart: i,
                thetaLength: a
            }, e = e || .5, t = t || 1, i = void 0 !== i ? i : 0, a = void 0 !== a ? a : 2 * Math.PI, n = void 0 !== n ? Math.max(3, n) : 8;
            var o, s, c, l = [], u = [], h = [], p = [], d = e, f = (t - e) / (r = void 0 !== r ? Math.max(1, r) : 1),
                m = new V, v = new I;
            for (s = 0; s <= r; s++) {
                for (c = 0; c <= n; c++) o = i + c / n * a, m.x = d * Math.cos(o), m.y = d * Math.sin(o), u.push(m.x, m.y, m.z), h.push(0, 0, 1), v.x = (m.x / t + 1) / 2, v.y = (m.y / t + 1) / 2, p.push(v.x, v.y);
                d += f
            }
            for (s = 0; s < r; s++) {
                var g = s * (n + 1);
                for (c = 0; c < n; c++) {
                    var y = o = c + g, x = o + n + 1, b = o + n + 2, _ = o + 1;
                    l.push(y, x, _), l.push(x, b, _)
                }
            }
            this.setIndex(l), this.setAttribute("position", new St(u, 3)), this.setAttribute("normal", new St(h, 3)), this.setAttribute("uv", new St(p, 2))
        }

        function zo(e, t, n, r) {
            sn.call(this), this.type = "LatheGeometry", this.parameters = {
                points: e,
                segments: t,
                phiStart: n,
                phiLength: r
            }, this.fromBufferGeometry(new Fo(e, t, n, r)), this.mergeVertices()
        }

        function Fo(e, t, n, r) {
            Dt.call(this), this.type = "LatheBufferGeometry", this.parameters = {
                points: e,
                segments: t,
                phiStart: n,
                phiLength: r
            }, t = Math.floor(t) || 12, n = n || 0, r = r || 2 * Math.PI, r = O.clamp(r, 0, 2 * Math.PI);
            var i, a, o, s = [], c = [], l = [], u = 1 / t, h = new V, p = new I;
            for (a = 0; a <= t; a++) {
                var d = n + a * u * r, f = Math.sin(d), m = Math.cos(d);
                for (o = 0; o <= e.length - 1; o++) h.x = e[o].x * f, h.y = e[o].y, h.z = e[o].x * m, c.push(h.x, h.y, h.z), p.x = a / t, p.y = o / (e.length - 1), l.push(p.x, p.y)
            }
            for (a = 0; a < t; a++) for (o = 0; o < e.length - 1; o++) {
                var v = i = o + a * e.length, g = i + e.length, y = i + e.length + 1, x = i + 1;
                s.push(v, g, x), s.push(g, y, x)
            }
            if (this.setIndex(s), this.setAttribute("position", new St(c, 3)), this.setAttribute("uv", new St(l, 2)), this.computeVertexNormals(), r === 2 * Math.PI) {
                var b = this.attributes.normal.array, _ = new V, w = new V, M = new V;
                for (i = t * e.length * 3, a = 0, o = 0; a < e.length; a++, o += 3) _.x = b[o + 0], _.y = b[o + 1], _.z = b[o + 2], w.x = b[i + o + 0], w.y = b[i + o + 1], w.z = b[i + o + 2], M.addVectors(_, w).normalize(), b[o + 0] = b[i + o + 0] = M.x, b[o + 1] = b[i + o + 1] = M.y, b[o + 2] = b[i + o + 2] = M.z
            }
        }

        function Bo(e, t) {
            sn.call(this), this.type = "ShapeGeometry", "object" == typeof t && (console.warn("THREE.ShapeGeometry: Options parameter has been removed."), t = t.curveSegments), this.parameters = {
                shapes: e,
                curveSegments: t
            }, this.fromBufferGeometry(new Ho(e, t)), this.mergeVertices()
        }

        function Ho(e, t) {
            Dt.call(this), this.type = "ShapeBufferGeometry", this.parameters = {
                shapes: e,
                curveSegments: t
            }, t = t || 12;
            var n = [], r = [], i = [], a = [], o = 0, s = 0;
            if (!1 === Array.isArray(e)) l(e); else for (var c = 0; c < e.length; c++) l(e[c]), this.addGroup(o, s, c), o += s, s = 0;

            function l(e) {
                var o, c, l, u = r.length / 3, h = e.extractPoints(t), p = h.shape, d = h.holes;
                for (!1 === So.isClockWise(p) && (p = p.reverse()), o = 0, c = d.length; o < c; o++) l = d[o], !0 === So.isClockWise(l) && (d[o] = l.reverse());
                var f = So.triangulateShape(p, d);
                for (o = 0, c = d.length; o < c; o++) l = d[o], p = p.concat(l);
                for (o = 0, c = p.length; o < c; o++) {
                    var m = p[o];
                    r.push(m.x, m.y, 0), i.push(0, 0, 1), a.push(m.x, m.y)
                }
                for (o = 0, c = f.length; o < c; o++) {
                    var v = f[o], g = v[0] + u, y = v[1] + u, x = v[2] + u;
                    n.push(g, y, x), s += 3
                }
            }

            this.setIndex(n), this.setAttribute("position", new St(r, 3)), this.setAttribute("normal", new St(i, 3)), this.setAttribute("uv", new St(a, 2))
        }

        function Go(e, t) {
            if (t.shapes = [], Array.isArray(e)) for (var n = 0, r = e.length; n < r; n++) {
                var i = e[n];
                t.shapes.push(i.uuid)
            } else t.shapes.push(e.uuid);
            return t
        }

        function ko(e, t) {
            Dt.call(this), this.type = "EdgesGeometry", this.parameters = {thresholdAngle: t}, t = void 0 !== t ? t : 1;
            var n, r, i, a, o = [], s = Math.cos(O.DEG2RAD * t), c = [0, 0], l = {}, u = ["a", "b", "c"];
            e.isBufferGeometry ? (a = new sn).fromBufferGeometry(e) : a = e.clone(), a.mergeVertices(), a.computeFaceNormals();
            for (var h = a.vertices, p = a.faces, d = 0, f = p.length; d < f; d++) for (var m = p[d], v = 0; v < 3; v++) n = m[u[v]], r = m[u[(v + 1) % 3]], c[0] = Math.min(n, r), c[1] = Math.max(n, r), void 0 === l[i = c[0] + "," + c[1]] ? l[i] = {
                index1: c[0],
                index2: c[1],
                face1: d,
                face2: void 0
            } : l[i].face2 = d;
            for (i in l) {
                var g = l[i];
                if (void 0 === g.face2 || p[g.face1].normal.dot(p[g.face2].normal) <= s) {
                    var y = h[g.index1];
                    o.push(y.x, y.y, y.z), y = h[g.index2], o.push(y.x, y.y, y.z)
                }
            }
            this.setAttribute("position", new St(o, 3))
        }

        function jo(e, t, n, r, i, a, o, s) {
            sn.call(this), this.type = "CylinderGeometry", this.parameters = {
                radiusTop: e,
                radiusBottom: t,
                height: n,
                radialSegments: r,
                heightSegments: i,
                openEnded: a,
                thetaStart: o,
                thetaLength: s
            }, this.fromBufferGeometry(new Vo(e, t, n, r, i, a, o, s)), this.mergeVertices()
        }

        function Vo(e, t, n, r, i, a, o, s) {
            Dt.call(this), this.type = "CylinderBufferGeometry", this.parameters = {
                radiusTop: e,
                radiusBottom: t,
                height: n,
                radialSegments: r,
                heightSegments: i,
                openEnded: a,
                thetaStart: o,
                thetaLength: s
            };
            var c = this;
            e = void 0 !== e ? e : 1, t = void 0 !== t ? t : 1, n = n || 1, r = Math.floor(r) || 8, i = Math.floor(i) || 1, a = void 0 !== a && a, o = void 0 !== o ? o : 0, s = void 0 !== s ? s : 2 * Math.PI;
            var l = [], u = [], h = [], p = [], d = 0, f = [], m = n / 2, v = 0;

            function g(n) {
                var i, a, f, g = new I, y = new V, x = 0, b = !0 === n ? e : t, _ = !0 === n ? 1 : -1;
                for (a = d, i = 1; i <= r; i++) u.push(0, m * _, 0), h.push(0, _, 0), p.push(.5, .5), d++;
                for (f = d, i = 0; i <= r; i++) {
                    var w = i / r * s + o, M = Math.cos(w), S = Math.sin(w);
                    y.x = b * S, y.y = m * _, y.z = b * M, u.push(y.x, y.y, y.z), h.push(0, _, 0), g.x = .5 * M + .5, g.y = .5 * S * _ + .5, p.push(g.x, g.y), d++
                }
                for (i = 0; i < r; i++) {
                    var T = a + i, E = f + i;
                    !0 === n ? l.push(E, E + 1, T) : l.push(E + 1, E, T), x += 3
                }
                c.addGroup(v, x, !0 === n ? 1 : 2), v += x
            }

            !function () {
                var a, g, y = new V, x = new V, b = 0, _ = (t - e) / n;
                for (g = 0; g <= i; g++) {
                    var w = [], M = g / i, S = M * (t - e) + e;
                    for (a = 0; a <= r; a++) {
                        var T = a / r, E = T * s + o, A = Math.sin(E), L = Math.cos(E);
                        x.x = S * A, x.y = -M * n + m, x.z = S * L, u.push(x.x, x.y, x.z), y.set(A, _, L).normalize(), h.push(y.x, y.y, y.z), p.push(T, 1 - M), w.push(d++)
                    }
                    f.push(w)
                }
                for (a = 0; a < r; a++) for (g = 0; g < i; g++) {
                    var R = f[g][a], P = f[g + 1][a], C = f[g + 1][a + 1], O = f[g][a + 1];
                    l.push(R, P, O), l.push(P, C, O), b += 6
                }
                c.addGroup(v, b, 0), v += b
            }(), !1 === a && (e > 0 && g(!0), t > 0 && g(!1)), this.setIndex(l), this.setAttribute("position", new St(u, 3)), this.setAttribute("normal", new St(h, 3)), this.setAttribute("uv", new St(p, 2))
        }

        function Wo(e, t, n, r, i, a, o) {
            jo.call(this, 0, e, t, n, r, i, a, o), this.type = "ConeGeometry", this.parameters = {
                radius: e,
                height: t,
                radialSegments: n,
                heightSegments: r,
                openEnded: i,
                thetaStart: a,
                thetaLength: o
            }
        }

        function qo(e, t, n, r, i, a, o) {
            Vo.call(this, 0, e, t, n, r, i, a, o), this.type = "ConeBufferGeometry", this.parameters = {
                radius: e,
                height: t,
                radialSegments: n,
                heightSegments: r,
                openEnded: i,
                thetaStart: a,
                thetaLength: o
            }
        }

        function Xo(e, t, n, r) {
            sn.call(this), this.type = "CircleGeometry", this.parameters = {
                radius: e,
                segments: t,
                thetaStart: n,
                thetaLength: r
            }, this.fromBufferGeometry(new Yo(e, t, n, r)), this.mergeVertices()
        }

        function Yo(e, t, n, r) {
            Dt.call(this), this.type = "CircleBufferGeometry", this.parameters = {
                radius: e,
                segments: t,
                thetaStart: n,
                thetaLength: r
            }, e = e || 1, t = void 0 !== t ? Math.max(3, t) : 8, n = void 0 !== n ? n : 0, r = void 0 !== r ? r : 2 * Math.PI;
            var i, a, o = [], s = [], c = [], l = [], u = new V, h = new I;
            for (s.push(0, 0, 0), c.push(0, 0, 1), l.push(.5, .5), a = 0, i = 3; a <= t; a++, i += 3) {
                var p = n + a / t * r;
                u.x = e * Math.cos(p), u.y = e * Math.sin(p), s.push(u.x, u.y, u.z), c.push(0, 0, 1), h.x = (s[i] / e + 1) / 2, h.y = (s[i + 1] / e + 1) / 2, l.push(h.x, h.y)
            }
            for (i = 1; i <= t; i++) o.push(i, i + 1, 0);
            this.setIndex(o), this.setAttribute("position", new St(s, 3)), this.setAttribute("normal", new St(c, 3)), this.setAttribute("uv", new St(l, 2))
        }

        Co.prototype = Object.create(sn.prototype), Co.prototype.constructor = Co, Oo.prototype = Object.create(Lo.prototype), Oo.prototype.constructor = Oo, Io.prototype = Object.create(sn.prototype), Io.prototype.constructor = Io, No.prototype = Object.create(Dt.prototype), No.prototype.constructor = No, Do.prototype = Object.create(sn.prototype), Do.prototype.constructor = Do, Uo.prototype = Object.create(Dt.prototype), Uo.prototype.constructor = Uo, zo.prototype = Object.create(sn.prototype), zo.prototype.constructor = zo, Fo.prototype = Object.create(Dt.prototype), Fo.prototype.constructor = Fo, Bo.prototype = Object.create(sn.prototype), Bo.prototype.constructor = Bo, Bo.prototype.toJSON = function () {
            var e = sn.prototype.toJSON.call(this);
            return Go(this.parameters.shapes, e)
        }, Ho.prototype = Object.create(Dt.prototype), Ho.prototype.constructor = Ho, Ho.prototype.toJSON = function () {
            var e = Dt.prototype.toJSON.call(this);
            return Go(this.parameters.shapes, e)
        }, ko.prototype = Object.create(Dt.prototype), ko.prototype.constructor = ko, jo.prototype = Object.create(sn.prototype), jo.prototype.constructor = jo, Vo.prototype = Object.create(Dt.prototype), Vo.prototype.constructor = Vo, Wo.prototype = Object.create(jo.prototype), Wo.prototype.constructor = Wo, qo.prototype = Object.create(Vo.prototype), qo.prototype.constructor = qo, Xo.prototype = Object.create(sn.prototype), Xo.prototype.constructor = Xo, Yo.prototype = Object.create(Dt.prototype), Yo.prototype.constructor = Yo;
        var Jo = Object.freeze({
            __proto__: null,
            WireframeGeometry: Ia,
            ParametricGeometry: Na,
            ParametricBufferGeometry: Da,
            TetrahedronGeometry: Fa,
            TetrahedronBufferGeometry: Ba,
            OctahedronGeometry: Ha,
            OctahedronBufferGeometry: Ga,
            IcosahedronGeometry: ka,
            IcosahedronBufferGeometry: ja,
            DodecahedronGeometry: Va,
            DodecahedronBufferGeometry: Wa,
            PolyhedronGeometry: Ua,
            PolyhedronBufferGeometry: za,
            TubeGeometry: qa,
            TubeBufferGeometry: Xa,
            TorusKnotGeometry: Ya,
            TorusKnotBufferGeometry: Ja,
            TorusGeometry: Za,
            TorusBufferGeometry: Ka,
            TextGeometry: Co,
            TextBufferGeometry: Oo,
            SphereGeometry: Io,
            SphereBufferGeometry: No,
            RingGeometry: Do,
            RingBufferGeometry: Uo,
            PlaneGeometry: Sn,
            PlaneBufferGeometry: Tn,
            LatheGeometry: zo,
            LatheBufferGeometry: Fo,
            ShapeGeometry: Bo,
            ShapeBufferGeometry: Ho,
            ExtrudeGeometry: Ao,
            ExtrudeBufferGeometry: Lo,
            EdgesGeometry: ko,
            ConeGeometry: Wo,
            ConeBufferGeometry: qo,
            CylinderGeometry: jo,
            CylinderBufferGeometry: Vo,
            CircleGeometry: Xo,
            CircleBufferGeometry: Yo,
            BoxGeometry: class extends sn {
                constructor(e, t, n, r, i, a) {
                    super(), this.type = "BoxGeometry", this.parameters = {
                        width: e,
                        height: t,
                        depth: n,
                        widthSegments: r,
                        heightSegments: i,
                        depthSegments: a
                    }, this.fromBufferGeometry(new cn(e, t, n, r, i, a)), this.mergeVertices()
                }
            },
            BoxBufferGeometry: cn
        });

        function Zo(e) {
            dt.call(this), this.type = "ShadowMaterial", this.color = new st(0), this.transparent = !0, this.setValues(e)
        }

        function Ko(e) {
            pn.call(this, e), this.type = "RawShaderMaterial"
        }

        function Qo(e) {
            dt.call(this), this.defines = {STANDARD: ""}, this.type = "MeshStandardMaterial", this.color = new st(16777215), this.roughness = 1, this.metalness = 0, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new st(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = A, this.normalScale = new I(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.roughnessMap = null, this.metalnessMap = null, this.alphaMap = null, this.envMap = null, this.envMapIntensity = 1, this.refractionRatio = .98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.skinning = !1, this.morphTargets = !1, this.morphNormals = !1, this.vertexTangents = !1, this.setValues(e)
        }

        function $o(e) {
            Qo.call(this), this.defines = {
                STANDARD: "",
                PHYSICAL: ""
            }, this.type = "MeshPhysicalMaterial", this.clearcoat = 0, this.clearcoatMap = null, this.clearcoatRoughness = 0, this.clearcoatRoughnessMap = null, this.clearcoatNormalScale = new I(1, 1), this.clearcoatNormalMap = null, this.reflectivity = .5, this.sheen = null, this.transparency = 0, this.setValues(e)
        }

        function es(e) {
            dt.call(this), this.type = "MeshPhongMaterial", this.color = new st(16777215), this.specular = new st(1118481), this.shininess = 30, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new st(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = A, this.normalScale = new I(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = 0, this.reflectivity = 1, this.refractionRatio = .98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.skinning = !1, this.morphTargets = !1, this.morphNormals = !1, this.setValues(e)
        }

        function ts(e) {
            dt.call(this), this.defines = {TOON: ""}, this.type = "MeshToonMaterial", this.color = new st(16777215), this.specular = new st(1118481), this.shininess = 30, this.map = null, this.gradientMap = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new st(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = A, this.normalScale = new I(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.skinning = !1, this.morphTargets = !1, this.morphNormals = !1, this.setValues(e)
        }

        function ns(e) {
            dt.call(this), this.type = "MeshNormalMaterial", this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = A, this.normalScale = new I(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.fog = !1, this.skinning = !1, this.morphTargets = !1, this.morphNormals = !1, this.setValues(e)
        }

        function rs(e) {
            dt.call(this), this.type = "MeshLambertMaterial", this.color = new st(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new st(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = 0, this.reflectivity = 1, this.refractionRatio = .98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.skinning = !1, this.morphTargets = !1, this.morphNormals = !1, this.setValues(e)
        }

        function is(e) {
            dt.call(this), this.defines = {MATCAP: ""}, this.type = "MeshMatcapMaterial", this.color = new st(16777215), this.matcap = null, this.map = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = A, this.normalScale = new I(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.skinning = !1, this.morphTargets = !1, this.morphNormals = !1, this.setValues(e)
        }

        function as(e) {
            ha.call(this), this.type = "LineDashedMaterial", this.scale = 1, this.dashSize = 3, this.gapSize = 1, this.setValues(e)
        }

        Zo.prototype = Object.create(dt.prototype), Zo.prototype.constructor = Zo, Zo.prototype.isShadowMaterial = !0, Zo.prototype.copy = function (e) {
            return dt.prototype.copy.call(this, e), this.color.copy(e.color), this
        }, Ko.prototype = Object.create(pn.prototype), Ko.prototype.constructor = Ko, Ko.prototype.isRawShaderMaterial = !0, Qo.prototype = Object.create(dt.prototype), Qo.prototype.constructor = Qo, Qo.prototype.isMeshStandardMaterial = !0, Qo.prototype.copy = function (e) {
            return dt.prototype.copy.call(this, e), this.defines = {STANDARD: ""}, this.color.copy(e.color), this.roughness = e.roughness, this.metalness = e.metalness, this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.roughnessMap = e.roughnessMap, this.metalnessMap = e.metalnessMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.envMapIntensity = e.envMapIntensity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.skinning = e.skinning, this.morphTargets = e.morphTargets, this.morphNormals = e.morphNormals, this.vertexTangents = e.vertexTangents, this
        }, $o.prototype = Object.create(Qo.prototype), $o.prototype.constructor = $o, $o.prototype.isMeshPhysicalMaterial = !0, $o.prototype.copy = function (e) {
            return Qo.prototype.copy.call(this, e), this.defines = {
                STANDARD: "",
                PHYSICAL: ""
            }, this.clearcoat = e.clearcoat, this.clearcoatMap = e.clearcoatMap, this.clearcoatRoughness = e.clearcoatRoughness, this.clearcoatRoughnessMap = e.clearcoatRoughnessMap, this.clearcoatNormalMap = e.clearcoatNormalMap, this.clearcoatNormalScale.copy(e.clearcoatNormalScale), this.reflectivity = e.reflectivity, e.sheen ? this.sheen = (this.sheen || new st).copy(e.sheen) : this.sheen = null, this.transparency = e.transparency, this
        }, es.prototype = Object.create(dt.prototype), es.prototype.constructor = es, es.prototype.isMeshPhongMaterial = !0, es.prototype.copy = function (e) {
            return dt.prototype.copy.call(this, e), this.color.copy(e.color), this.specular.copy(e.specular), this.shininess = e.shininess, this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.skinning = e.skinning, this.morphTargets = e.morphTargets, this.morphNormals = e.morphNormals, this
        }, ts.prototype = Object.create(dt.prototype), ts.prototype.constructor = ts, ts.prototype.isMeshToonMaterial = !0, ts.prototype.copy = function (e) {
            return dt.prototype.copy.call(this, e), this.color.copy(e.color), this.specular.copy(e.specular), this.shininess = e.shininess, this.map = e.map, this.gradientMap = e.gradientMap, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.skinning = e.skinning, this.morphTargets = e.morphTargets, this.morphNormals = e.morphNormals, this
        }, ns.prototype = Object.create(dt.prototype), ns.prototype.constructor = ns, ns.prototype.isMeshNormalMaterial = !0, ns.prototype.copy = function (e) {
            return dt.prototype.copy.call(this, e), this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.skinning = e.skinning, this.morphTargets = e.morphTargets, this.morphNormals = e.morphNormals, this
        }, rs.prototype = Object.create(dt.prototype), rs.prototype.constructor = rs, rs.prototype.isMeshLambertMaterial = !0, rs.prototype.copy = function (e) {
            return dt.prototype.copy.call(this, e), this.color.copy(e.color), this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.skinning = e.skinning, this.morphTargets = e.morphTargets, this.morphNormals = e.morphNormals, this
        }, is.prototype = Object.create(dt.prototype), is.prototype.constructor = is, is.prototype.isMeshMatcapMaterial = !0, is.prototype.copy = function (e) {
            return dt.prototype.copy.call(this, e), this.defines = {MATCAP: ""}, this.color.copy(e.color), this.matcap = e.matcap, this.map = e.map, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.alphaMap = e.alphaMap, this.skinning = e.skinning, this.morphTargets = e.morphTargets, this.morphNormals = e.morphNormals, this
        }, as.prototype = Object.create(ha.prototype), as.prototype.constructor = as, as.prototype.isLineDashedMaterial = !0, as.prototype.copy = function (e) {
            return ha.prototype.copy.call(this, e), this.scale = e.scale, this.dashSize = e.dashSize, this.gapSize = e.gapSize, this
        };
        var os = Object.freeze({
            __proto__: null,
            ShadowMaterial: Zo,
            SpriteMaterial: Oi,
            RawShaderMaterial: Ko,
            ShaderMaterial: pn,
            PointsMaterial: wa,
            MeshPhysicalMaterial: $o,
            MeshStandardMaterial: Qo,
            MeshPhongMaterial: es,
            MeshToonMaterial: ts,
            MeshNormalMaterial: ns,
            MeshLambertMaterial: rs,
            MeshDepthMaterial: fi,
            MeshDistanceMaterial: mi,
            MeshBasicMaterial: ft,
            MeshMatcapMaterial: is,
            LineDashedMaterial: as,
            LineBasicMaterial: ha,
            Material: dt
        }), ss = {
            arraySlice: function (e, t, n) {
                return ss.isTypedArray(e) ? new e.constructor(e.subarray(t, void 0 !== n ? n : e.length)) : e.slice(t, n)
            }, convertArray: function (e, t, n) {
                return !e || !n && e.constructor === t ? e : "number" == typeof t.BYTES_PER_ELEMENT ? new t(e) : Array.prototype.slice.call(e)
            }, isTypedArray: function (e) {
                return ArrayBuffer.isView(e) && !(e instanceof DataView)
            }, getKeyframeOrder: function (e) {
                for (var t = e.length, n = new Array(t), r = 0; r !== t; ++r) n[r] = r;
                return n.sort((function (t, n) {
                    return e[t] - e[n]
                })), n
            }, sortedArray: function (e, t, n) {
                for (var r = e.length, i = new e.constructor(r), a = 0, o = 0; o !== r; ++a) for (var s = n[a] * t, c = 0; c !== t; ++c) i[o++] = e[s + c];
                return i
            }, flattenJSON: function (e, t, n, r) {
                for (var i = 1, a = e[0]; void 0 !== a && void 0 === a[r];) a = e[i++];
                if (void 0 !== a) {
                    var o = a[r];
                    if (void 0 !== o) if (Array.isArray(o)) do {
                        void 0 !== (o = a[r]) && (t.push(a.time), n.push.apply(n, o)), a = e[i++]
                    } while (void 0 !== a); else if (void 0 !== o.toArray) do {
                        void 0 !== (o = a[r]) && (t.push(a.time), o.toArray(n, n.length)), a = e[i++]
                    } while (void 0 !== a); else do {
                        void 0 !== (o = a[r]) && (t.push(a.time), n.push(o)), a = e[i++]
                    } while (void 0 !== a)
                }
            }, subclip: function (e, t, n, r, i) {
                i = i || 30;
                var a = e.clone();
                a.name = t;
                for (var o = [], s = 0; s < a.tracks.length; ++s) {
                    for (var c = a.tracks[s], l = c.getValueSize(), u = [], h = [], p = 0; p < c.times.length; ++p) {
                        var d = c.times[p] * i;
                        if (!(d < n || d >= r)) {
                            u.push(c.times[p]);
                            for (var f = 0; f < l; ++f) h.push(c.values[p * l + f])
                        }
                    }
                    0 !== u.length && (c.times = ss.convertArray(u, c.times.constructor), c.values = ss.convertArray(h, c.values.constructor), o.push(c))
                }
                a.tracks = o;
                var m = 1 / 0;
                for (s = 0; s < a.tracks.length; ++s) m > a.tracks[s].times[0] && (m = a.tracks[s].times[0]);
                for (s = 0; s < a.tracks.length; ++s) a.tracks[s].shift(-1 * m);
                return a.resetDuration(), a
            }, makeClipAdditive: function (e, t, n, r) {
                void 0 === t && (t = 0), void 0 === n && (n = e), (void 0 === r || r <= 0) && (r = 30);
                for (var i = e.tracks.length, a = t / r, o = 0; o < i; ++o) {
                    var s = n.tracks[o], c = s.ValueTypeName;
                    if ("bool" !== c && "string" !== c) {
                        var l = e.tracks.find((function (e) {
                            return e.name === s.name && e.ValueTypeName === c
                        }));
                        if (void 0 !== l) {
                            var u, h = s.getValueSize(), p = s.times.length - 1;
                            if (a <= s.times[0]) u = ss.arraySlice(s.values, 0, s.valueSize); else if (a >= s.times[p]) {
                                var d = p * h;
                                u = ss.arraySlice(s.values, d)
                            } else {
                                var f = s.createInterpolant();
                                f.evaluate(a), u = f.resultBuffer
                            }
                            if ("quaternion" === c) new G(u[0], u[1], u[2], u[3]).normalize().conjugate().toArray(u);
                            for (var m = l.times.length, v = 0; v < m; ++v) {
                                var g = v * h;
                                if ("quaternion" === c) G.multiplyQuaternionsFlat(l.values, g, u, 0, l.values, g); else for (var y = 0; y < h; ++y) l.values[g + y] -= u[y]
                            }
                        }
                    }
                }
                return e.blendMode = 2501, e
            }
        };

        function cs(e, t, n, r) {
            this.parameterPositions = e, this._cachedIndex = 0, this.resultBuffer = void 0 !== r ? r : new t.constructor(n), this.sampleValues = t, this.valueSize = n
        }

        function ls(e, t, n, r) {
            cs.call(this, e, t, n, r), this._weightPrev = -0, this._offsetPrev = -0, this._weightNext = -0, this._offsetNext = -0
        }

        function us(e, t, n, r) {
            cs.call(this, e, t, n, r)
        }

        function hs(e, t, n, r) {
            cs.call(this, e, t, n, r)
        }

        function ps(e, t, n, r) {
            if (void 0 === e) throw new Error("THREE.KeyframeTrack: track name is undefined");
            if (void 0 === t || 0 === t.length) throw new Error("THREE.KeyframeTrack: no keyframes in track named " + e);
            this.name = e, this.times = ss.convertArray(t, this.TimeBufferType), this.values = ss.convertArray(n, this.ValueBufferType), this.setInterpolation(r || this.DefaultInterpolation)
        }

        function ds(e, t, n) {
            ps.call(this, e, t, n)
        }

        function fs(e, t, n, r) {
            ps.call(this, e, t, n, r)
        }

        function ms(e, t, n, r) {
            ps.call(this, e, t, n, r)
        }

        function vs(e, t, n, r) {
            cs.call(this, e, t, n, r)
        }

        function gs(e, t, n, r) {
            ps.call(this, e, t, n, r)
        }

        function ys(e, t, n, r) {
            ps.call(this, e, t, n, r)
        }

        function xs(e, t, n, r) {
            ps.call(this, e, t, n, r)
        }

        function bs(e, t, n, r) {
            this.name = e, this.tracks = n, this.duration = void 0 !== t ? t : -1, this.blendMode = void 0 !== r ? r : 2500, this.uuid = O.generateUUID(), this.duration < 0 && this.resetDuration()
        }

        function _s(e) {
            if (void 0 === e.type) throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
            var t = function (e) {
                switch (e.toLowerCase()) {
                    case"scalar":
                    case"double":
                    case"float":
                    case"number":
                    case"integer":
                        return ms;
                    case"vector":
                    case"vector2":
                    case"vector3":
                    case"vector4":
                        return xs;
                    case"color":
                        return fs;
                    case"quaternion":
                        return gs;
                    case"bool":
                    case"boolean":
                        return ds;
                    case"string":
                        return ys
                }
                throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + e)
            }(e.type);
            if (void 0 === e.times) {
                var n = [], r = [];
                ss.flattenJSON(e.keys, n, r, "value"), e.times = n, e.values = r
            }
            return void 0 !== t.parse ? t.parse(e) : new t(e.name, e.times, e.values, e.interpolation)
        }

        Object.assign(cs.prototype, {
            evaluate: function (e) {
                var t = this.parameterPositions, n = this._cachedIndex, r = t[n], i = t[n - 1];
                e:{
                    t:{
                        var a;
                        n:{
                            r:if (!(e < r)) {
                                for (var o = n + 2; ;) {
                                    if (void 0 === r) {
                                        if (e < i) break r;
                                        return n = t.length, this._cachedIndex = n, this.afterEnd_(n - 1, e, i)
                                    }
                                    if (n === o) break;
                                    if (i = r, e < (r = t[++n])) break t
                                }
                                a = t.length;
                                break n
                            }
                            if (e >= i) break e;
                            var s = t[1];
                            e < s && (n = 2, i = s);
                            for (o = n - 2; ;) {
                                if (void 0 === i) return this._cachedIndex = 0, this.beforeStart_(0, e, r);
                                if (n === o) break;
                                if (r = i, e >= (i = t[--n - 1])) break t
                            }
                            a = n, n = 0
                        }
                        for (; n < a;) {
                            var c = n + a >>> 1;
                            e < t[c] ? a = c : n = c + 1
                        }
                        if (r = t[n], void 0 === (i = t[n - 1])) return this._cachedIndex = 0, this.beforeStart_(0, e, r);
                        if (void 0 === r) return n = t.length, this._cachedIndex = n, this.afterEnd_(n - 1, i, e)
                    }
                    this._cachedIndex = n, this.intervalChanged_(n, i, r)
                }
                return this.interpolate_(n, i, e, r)
            }, settings: null, DefaultSettings_: {}, getSettings_: function () {
                return this.settings || this.DefaultSettings_
            }, copySampleValue_: function (e) {
                for (var t = this.resultBuffer, n = this.sampleValues, r = this.valueSize, i = e * r, a = 0; a !== r; ++a) t[a] = n[i + a];
                return t
            }, interpolate_: function () {
                throw new Error("call to abstract method")
            }, intervalChanged_: function () {
            }
        }), Object.assign(cs.prototype, {
            beforeStart_: cs.prototype.copySampleValue_,
            afterEnd_: cs.prototype.copySampleValue_
        }), ls.prototype = Object.assign(Object.create(cs.prototype), {
            constructor: ls,
            DefaultSettings_: {endingStart: 2400, endingEnd: 2400},
            intervalChanged_: function (e, t, n) {
                var r = this.parameterPositions, i = e - 2, a = e + 1, o = r[i], s = r[a];
                if (void 0 === o) switch (this.getSettings_().endingStart) {
                    case 2401:
                        i = e, o = 2 * t - n;
                        break;
                    case 2402:
                        o = t + r[i = r.length - 2] - r[i + 1];
                        break;
                    default:
                        i = e, o = n
                }
                if (void 0 === s) switch (this.getSettings_().endingEnd) {
                    case 2401:
                        a = e, s = 2 * n - t;
                        break;
                    case 2402:
                        a = 1, s = n + r[1] - r[0];
                        break;
                    default:
                        a = e - 1, s = t
                }
                var c = .5 * (n - t), l = this.valueSize;
                this._weightPrev = c / (t - o), this._weightNext = c / (s - n), this._offsetPrev = i * l, this._offsetNext = a * l
            },
            interpolate_: function (e, t, n, r) {
                for (var i = this.resultBuffer, a = this.sampleValues, o = this.valueSize, s = e * o, c = s - o, l = this._offsetPrev, u = this._offsetNext, h = this._weightPrev, p = this._weightNext, d = (n - t) / (r - t), f = d * d, m = f * d, v = -h * m + 2 * h * f - h * d, g = (1 + h) * m + (-1.5 - 2 * h) * f + (-.5 + h) * d + 1, y = (-1 - p) * m + (1.5 + p) * f + .5 * d, x = p * m - p * f, b = 0; b !== o; ++b) i[b] = v * a[l + b] + g * a[c + b] + y * a[s + b] + x * a[u + b];
                return i
            }
        }), us.prototype = Object.assign(Object.create(cs.prototype), {
            constructor: us,
            interpolate_: function (e, t, n, r) {
                for (var i = this.resultBuffer, a = this.sampleValues, o = this.valueSize, s = e * o, c = s - o, l = (n - t) / (r - t), u = 1 - l, h = 0; h !== o; ++h) i[h] = a[c + h] * u + a[s + h] * l;
                return i
            }
        }), hs.prototype = Object.assign(Object.create(cs.prototype), {
            constructor: hs, interpolate_: function (e) {
                return this.copySampleValue_(e - 1)
            }
        }), Object.assign(ps, {
            toJSON: function (e) {
                var t, n = e.constructor;
                if (void 0 !== n.toJSON) t = n.toJSON(e); else {
                    t = {
                        name: e.name,
                        times: ss.convertArray(e.times, Array),
                        values: ss.convertArray(e.values, Array)
                    };
                    var r = e.getInterpolation();
                    r !== e.DefaultInterpolation && (t.interpolation = r)
                }
                return t.type = e.ValueTypeName, t
            }
        }), Object.assign(ps.prototype, {
            constructor: ps,
            TimeBufferType: Float32Array,
            ValueBufferType: Float32Array,
            DefaultInterpolation: M,
            InterpolantFactoryMethodDiscrete: function (e) {
                return new hs(this.times, this.values, this.getValueSize(), e)
            },
            InterpolantFactoryMethodLinear: function (e) {
                return new us(this.times, this.values, this.getValueSize(), e)
            },
            InterpolantFactoryMethodSmooth: function (e) {
                return new ls(this.times, this.values, this.getValueSize(), e)
            },
            setInterpolation: function (e) {
                var t;
                switch (e) {
                    case w:
                        t = this.InterpolantFactoryMethodDiscrete;
                        break;
                    case M:
                        t = this.InterpolantFactoryMethodLinear;
                        break;
                    case 2302:
                        t = this.InterpolantFactoryMethodSmooth
                }
                if (void 0 === t) {
                    var n = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
                    if (void 0 === this.createInterpolant) {
                        if (e === this.DefaultInterpolation) throw new Error(n);
                        this.setInterpolation(this.DefaultInterpolation)
                    }
                    return console.warn("THREE.KeyframeTrack:", n), this
                }
                return this.createInterpolant = t, this
            },
            getInterpolation: function () {
                switch (this.createInterpolant) {
                    case this.InterpolantFactoryMethodDiscrete:
                        return w;
                    case this.InterpolantFactoryMethodLinear:
                        return M;
                    case this.InterpolantFactoryMethodSmooth:
                        return 2302
                }
            },
            getValueSize: function () {
                return this.values.length / this.times.length
            },
            shift: function (e) {
                if (0 !== e) for (var t = this.times, n = 0, r = t.length; n !== r; ++n) t[n] += e;
                return this
            },
            scale: function (e) {
                if (1 !== e) for (var t = this.times, n = 0, r = t.length; n !== r; ++n) t[n] *= e;
                return this
            },
            trim: function (e, t) {
                for (var n = this.times, r = n.length, i = 0, a = r - 1; i !== r && n[i] < e;) ++i;
                for (; -1 !== a && n[a] > t;) --a;
                if (++a, 0 !== i || a !== r) {
                    i >= a && (i = (a = Math.max(a, 1)) - 1);
                    var o = this.getValueSize();
                    this.times = ss.arraySlice(n, i, a), this.values = ss.arraySlice(this.values, i * o, a * o)
                }
                return this
            },
            validate: function () {
                var e = !0, t = this.getValueSize();
                t - Math.floor(t) != 0 && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), e = !1);
                var n = this.times, r = this.values, i = n.length;
                0 === i && (console.error("THREE.KeyframeTrack: Track is empty.", this), e = !1);
                for (var a = null, o = 0; o !== i; o++) {
                    var s = n[o];
                    if ("number" == typeof s && isNaN(s)) {
                        console.error("THREE.KeyframeTrack: Time is not a valid number.", this, o, s), e = !1;
                        break
                    }
                    if (null !== a && a > s) {
                        console.error("THREE.KeyframeTrack: Out of order keys.", this, o, s, a), e = !1;
                        break
                    }
                    a = s
                }
                if (void 0 !== r && ss.isTypedArray(r)) {
                    o = 0;
                    for (var c = r.length; o !== c; ++o) {
                        var l = r[o];
                        if (isNaN(l)) {
                            console.error("THREE.KeyframeTrack: Value is not a valid number.", this, o, l), e = !1;
                            break
                        }
                    }
                }
                return e
            },
            optimize: function () {
                for (var e = ss.arraySlice(this.times), t = ss.arraySlice(this.values), n = this.getValueSize(), r = 2302 === this.getInterpolation(), i = 1, a = e.length - 1, o = 1; o < a; ++o) {
                    var s = !1, c = e[o];
                    if (c !== e[o + 1] && (1 !== o || c !== c[0])) if (r) s = !0; else for (var l = o * n, u = l - n, h = l + n, p = 0; p !== n; ++p) {
                        var d = t[l + p];
                        if (d !== t[u + p] || d !== t[h + p]) {
                            s = !0;
                            break
                        }
                    }
                    if (s) {
                        if (o !== i) {
                            e[i] = e[o];
                            var f = o * n, m = i * n;
                            for (p = 0; p !== n; ++p) t[m + p] = t[f + p]
                        }
                        ++i
                    }
                }
                if (a > 0) {
                    e[i] = e[a];
                    for (f = a * n, m = i * n, p = 0; p !== n; ++p) t[m + p] = t[f + p];
                    ++i
                }
                return i !== e.length ? (this.times = ss.arraySlice(e, 0, i), this.values = ss.arraySlice(t, 0, i * n)) : (this.times = e, this.values = t), this
            },
            clone: function () {
                var e = ss.arraySlice(this.times, 0), t = ss.arraySlice(this.values, 0),
                    n = new (0, this.constructor)(this.name, e, t);
                return n.createInterpolant = this.createInterpolant, n
            }
        }), ds.prototype = Object.assign(Object.create(ps.prototype), {
            constructor: ds,
            ValueTypeName: "bool",
            ValueBufferType: Array,
            DefaultInterpolation: w,
            InterpolantFactoryMethodLinear: void 0,
            InterpolantFactoryMethodSmooth: void 0
        }), fs.prototype = Object.assign(Object.create(ps.prototype), {
            constructor: fs,
            ValueTypeName: "color"
        }), ms.prototype = Object.assign(Object.create(ps.prototype), {
            constructor: ms,
            ValueTypeName: "number"
        }), vs.prototype = Object.assign(Object.create(cs.prototype), {
            constructor: vs,
            interpolate_: function (e, t, n, r) {
                for (var i = this.resultBuffer, a = this.sampleValues, o = this.valueSize, s = e * o, c = (n - t) / (r - t), l = s + o; s !== l; s += 4) G.slerpFlat(i, 0, a, s - o, a, s, c);
                return i
            }
        }), gs.prototype = Object.assign(Object.create(ps.prototype), {
            constructor: gs,
            ValueTypeName: "quaternion",
            DefaultInterpolation: M,
            InterpolantFactoryMethodLinear: function (e) {
                return new vs(this.times, this.values, this.getValueSize(), e)
            },
            InterpolantFactoryMethodSmooth: void 0
        }), ys.prototype = Object.assign(Object.create(ps.prototype), {
            constructor: ys,
            ValueTypeName: "string",
            ValueBufferType: Array,
            DefaultInterpolation: w,
            InterpolantFactoryMethodLinear: void 0,
            InterpolantFactoryMethodSmooth: void 0
        }), xs.prototype = Object.assign(Object.create(ps.prototype), {
            constructor: xs,
            ValueTypeName: "vector"
        }), Object.assign(bs, {
            parse: function (e) {
                for (var t = [], n = e.tracks, r = 1 / (e.fps || 1), i = 0, a = n.length; i !== a; ++i) t.push(_s(n[i]).scale(r));
                return new bs(e.name, e.duration, t, e.blendMode)
            }, toJSON: function (e) {
                for (var t = [], n = e.tracks, r = {
                    name: e.name,
                    duration: e.duration,
                    tracks: t,
                    uuid: e.uuid,
                    blendMode: e.blendMode
                }, i = 0, a = n.length; i !== a; ++i) t.push(ps.toJSON(n[i]));
                return r
            }, CreateFromMorphTargetSequence: function (e, t, n, r) {
                for (var i = t.length, a = [], o = 0; o < i; o++) {
                    var s = [], c = [];
                    s.push((o + i - 1) % i, o, (o + 1) % i), c.push(0, 1, 0);
                    var l = ss.getKeyframeOrder(s);
                    s = ss.sortedArray(s, 1, l), c = ss.sortedArray(c, 1, l), r || 0 !== s[0] || (s.push(i), c.push(c[0])), a.push(new ms(".morphTargetInfluences[" + t[o].name + "]", s, c).scale(1 / n))
                }
                return new bs(e, -1, a)
            }, findByName: function (e, t) {
                var n = e;
                if (!Array.isArray(e)) {
                    var r = e;
                    n = r.geometry && r.geometry.animations || r.animations
                }
                for (var i = 0; i < n.length; i++) if (n[i].name === t) return n[i];
                return null
            }, CreateClipsFromMorphTargetSequences: function (e, t, n) {
                for (var r = {}, i = /^([\w-]*?)([\d]+)$/, a = 0, o = e.length; a < o; a++) {
                    var s = e[a], c = s.name.match(i);
                    if (c && c.length > 1) {
                        var l = r[h = c[1]];
                        l || (r[h] = l = []), l.push(s)
                    }
                }
                var u = [];
                for (var h in r) u.push(bs.CreateFromMorphTargetSequence(h, r[h], t, n));
                return u
            }, parseAnimation: function (e, t) {
                if (!e) return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null;
                for (var n = function (e, t, n, r, i) {
                    if (0 !== n.length) {
                        var a = [], o = [];
                        ss.flattenJSON(n, a, o, r), 0 !== a.length && i.push(new e(t, a, o))
                    }
                }, r = [], i = e.name || "default", a = e.length || -1, o = e.fps || 30, s = e.blendMode, c = e.hierarchy || [], l = 0; l < c.length; l++) {
                    var u = c[l].keys;
                    if (u && 0 !== u.length) if (u[0].morphTargets) {
                        for (var h = {}, p = 0; p < u.length; p++) if (u[p].morphTargets) for (var d = 0; d < u[p].morphTargets.length; d++) h[u[p].morphTargets[d]] = -1;
                        for (var f in h) {
                            var m = [], v = [];
                            for (d = 0; d !== u[p].morphTargets.length; ++d) {
                                var g = u[p];
                                m.push(g.time), v.push(g.morphTarget === f ? 1 : 0)
                            }
                            r.push(new ms(".morphTargetInfluence[" + f + "]", m, v))
                        }
                        a = h.length * (o || 1)
                    } else {
                        var y = ".bones[" + t[l].name + "]";
                        n(xs, y + ".position", u, "pos", r), n(gs, y + ".quaternion", u, "rot", r), n(xs, y + ".scale", u, "scl", r)
                    }
                }
                return 0 === r.length ? null : new bs(i, a, r, s)
            }
        }), Object.assign(bs.prototype, {
            resetDuration: function () {
                for (var e = 0, t = 0, n = this.tracks.length; t !== n; ++t) {
                    var r = this.tracks[t];
                    e = Math.max(e, r.times[r.times.length - 1])
                }
                return this.duration = e, this
            }, trim: function () {
                for (var e = 0; e < this.tracks.length; e++) this.tracks[e].trim(0, this.duration);
                return this
            }, validate: function () {
                for (var e = !0, t = 0; t < this.tracks.length; t++) e = e && this.tracks[t].validate();
                return e
            }, optimize: function () {
                for (var e = 0; e < this.tracks.length; e++) this.tracks[e].optimize();
                return this
            }, clone: function () {
                for (var e = [], t = 0; t < this.tracks.length; t++) e.push(this.tracks[t].clone());
                return new bs(this.name, this.duration, e, this.blendMode)
            }
        });
        var ws = {
            enabled: !1, files: {}, add: function (e, t) {
                !1 !== this.enabled && (this.files[e] = t)
            }, get: function (e) {
                if (!1 !== this.enabled) return this.files[e]
            }, remove: function (e) {
                delete this.files[e]
            }, clear: function () {
                this.files = {}
            }
        };

        function Ms(e, t, n) {
            var r = this, i = !1, a = 0, o = 0, s = void 0, c = [];
            this.onStart = void 0, this.onLoad = e, this.onProgress = t, this.onError = n, this.itemStart = function (e) {
                o++, !1 === i && void 0 !== r.onStart && r.onStart(e, a, o), i = !0
            }, this.itemEnd = function (e) {
                a++, void 0 !== r.onProgress && r.onProgress(e, a, o), a === o && (i = !1, void 0 !== r.onLoad && r.onLoad())
            }, this.itemError = function (e) {
                void 0 !== r.onError && r.onError(e)
            }, this.resolveURL = function (e) {
                return s ? s(e) : e
            }, this.setURLModifier = function (e) {
                return s = e, this
            }, this.addHandler = function (e, t) {
                return c.push(e, t), this
            }, this.removeHandler = function (e) {
                var t = c.indexOf(e);
                return -1 !== t && c.splice(t, 2), this
            }, this.getHandler = function (e) {
                for (var t = 0, n = c.length; t < n; t += 2) {
                    var r = c[t], i = c[t + 1];
                    if (r.global && (r.lastIndex = 0), r.test(e)) return i
                }
                return null
            }
        }

        var Ss = new Ms;

        function Ts(e) {
            this.manager = void 0 !== e ? e : Ss, this.crossOrigin = "anonymous", this.path = "", this.resourcePath = "", this.requestHeader = {}
        }

        Object.assign(Ts.prototype, {
            load: function () {
            }, loadAsync: function (e, t) {
                var n = this;
                return new Promise((function (r, i) {
                    n.load(e, r, t, i)
                }))
            }, parse: function () {
            }, setCrossOrigin: function (e) {
                return this.crossOrigin = e, this
            }, setPath: function (e) {
                return this.path = e, this
            }, setResourcePath: function (e) {
                return this.resourcePath = e, this
            }, setRequestHeader: function (e) {
                return this.requestHeader = e, this
            }
        });
        var Es = {};

        function As(e) {
            Ts.call(this, e)
        }

        function Ls(e) {
            Ts.call(this, e)
        }

        function Rs(e) {
            Ts.call(this, e)
        }

        function Ps(e) {
            Ts.call(this, e)
        }

        function Cs(e) {
            Ts.call(this, e)
        }

        function Os(e) {
            Ts.call(this, e)
        }

        function Is(e) {
            Ts.call(this, e)
        }

        function Ns() {
            this.type = "Curve", this.arcLengthDivisions = 200
        }

        function Ds(e, t, n, r, i, a, o, s) {
            Ns.call(this), this.type = "EllipseCurve", this.aX = e || 0, this.aY = t || 0, this.xRadius = n || 1, this.yRadius = r || 1, this.aStartAngle = i || 0, this.aEndAngle = a || 2 * Math.PI, this.aClockwise = o || !1, this.aRotation = s || 0
        }

        function Us(e, t, n, r, i, a) {
            Ds.call(this, e, t, n, n, r, i, a), this.type = "ArcCurve"
        }

        function zs() {
            var e = 0, t = 0, n = 0, r = 0;

            function i(i, a, o, s) {
                e = i, t = o, n = -3 * i + 3 * a - 2 * o - s, r = 2 * i - 2 * a + o + s
            }

            return {
                initCatmullRom: function (e, t, n, r, a) {
                    i(t, n, a * (n - e), a * (r - t))
                }, initNonuniformCatmullRom: function (e, t, n, r, a, o, s) {
                    var c = (t - e) / a - (n - e) / (a + o) + (n - t) / o,
                        l = (n - t) / o - (r - t) / (o + s) + (r - n) / s;
                    i(t, n, c *= o, l *= o)
                }, calc: function (i) {
                    var a = i * i;
                    return e + t * i + n * a + r * (a * i)
                }
            }
        }

        As.prototype = Object.assign(Object.create(Ts.prototype), {
            constructor: As, load: function (e, t, n, r) {
                void 0 === e && (e = ""), void 0 !== this.path && (e = this.path + e), e = this.manager.resolveURL(e);
                var i = this, a = ws.get(e);
                if (void 0 !== a) return i.manager.itemStart(e), setTimeout((function () {
                    t && t(a), i.manager.itemEnd(e)
                }), 0), a;
                if (void 0 === Es[e]) {
                    var o = e.match(/^data:(.*?)(;base64)?,(.*)$/);
                    if (o) {
                        var s = o[1], c = !!o[2], l = o[3];
                        l = decodeURIComponent(l), c && (l = atob(l));
                        try {
                            var u, h = (this.responseType || "").toLowerCase();
                            switch (h) {
                                case"arraybuffer":
                                case"blob":
                                    for (var p = new Uint8Array(l.length), d = 0; d < l.length; d++) p[d] = l.charCodeAt(d);
                                    u = "blob" === h ? new Blob([p.buffer], {type: s}) : p.buffer;
                                    break;
                                case"document":
                                    var f = new DOMParser;
                                    u = f.parseFromString(l, s);
                                    break;
                                case"json":
                                    u = JSON.parse(l);
                                    break;
                                default:
                                    u = l
                            }
                            setTimeout((function () {
                                t && t(u), i.manager.itemEnd(e)
                            }), 0)
                        } catch (t) {
                            setTimeout((function () {
                                r && r(t), i.manager.itemError(e), i.manager.itemEnd(e)
                            }), 0)
                        }
                    } else {
                        Es[e] = [], Es[e].push({onLoad: t, onProgress: n, onError: r});
                        var m = new XMLHttpRequest;
                        for (var v in m.open("GET", e, !0), m.addEventListener("load", (function (t) {
                            var n = this.response, r = Es[e];
                            if (delete Es[e], 200 === this.status || 0 === this.status) {
                                0 === this.status && console.warn("THREE.FileLoader: HTTP Status 0 received."), ws.add(e, n);
                                for (var a = 0, o = r.length; a < o; a++) {
                                    (s = r[a]).onLoad && s.onLoad(n)
                                }
                                i.manager.itemEnd(e)
                            } else {
                                for (a = 0, o = r.length; a < o; a++) {
                                    var s;
                                    (s = r[a]).onError && s.onError(t)
                                }
                                i.manager.itemError(e), i.manager.itemEnd(e)
                            }
                        }), !1), m.addEventListener("progress", (function (t) {
                            for (var n = Es[e], r = 0, i = n.length; r < i; r++) {
                                var a = n[r];
                                a.onProgress && a.onProgress(t)
                            }
                        }), !1), m.addEventListener("error", (function (t) {
                            var n = Es[e];
                            delete Es[e];
                            for (var r = 0, a = n.length; r < a; r++) {
                                var o = n[r];
                                o.onError && o.onError(t)
                            }
                            i.manager.itemError(e), i.manager.itemEnd(e)
                        }), !1), m.addEventListener("abort", (function (t) {
                            var n = Es[e];
                            delete Es[e];
                            for (var r = 0, a = n.length; r < a; r++) {
                                var o = n[r];
                                o.onError && o.onError(t)
                            }
                            i.manager.itemError(e), i.manager.itemEnd(e)
                        }), !1), void 0 !== this.responseType && (m.responseType = this.responseType), void 0 !== this.withCredentials && (m.withCredentials = this.withCredentials), m.overrideMimeType && m.overrideMimeType(void 0 !== this.mimeType ? this.mimeType : "text/plain"), this.requestHeader) m.setRequestHeader(v, this.requestHeader[v]);
                        m.send(null)
                    }
                    return i.manager.itemStart(e), m
                }
                Es[e].push({onLoad: t, onProgress: n, onError: r})
            }, setResponseType: function (e) {
                return this.responseType = e, this
            }, setWithCredentials: function (e) {
                return this.withCredentials = e, this
            }, setMimeType: function (e) {
                return this.mimeType = e, this
            }
        }), Ls.prototype = Object.assign(Object.create(Ts.prototype), {
            constructor: Ls, load: function (e, t, n, r) {
                var i = this, a = new As(i.manager);
                a.setPath(i.path), a.load(e, (function (n) {
                    try {
                        t(i.parse(JSON.parse(n)))
                    } catch (t) {
                        r ? r(t) : console.error(t), i.manager.itemError(e)
                    }
                }), n, r)
            }, parse: function (e) {
                for (var t = [], n = 0; n < e.length; n++) {
                    var r = bs.parse(e[n]);
                    t.push(r)
                }
                return t
            }
        }), Rs.prototype = Object.assign(Object.create(Ts.prototype), {
            constructor: Rs, load: function (e, t, n, r) {
                var i = this, a = [], o = new Pa;
                o.image = a;
                var s = new As(this.manager);

                function c(c) {
                    s.load(e[c], (function (e) {
                        var n = i.parse(e, !0);
                        a[c] = {
                            width: n.width,
                            height: n.height,
                            format: n.format,
                            mipmaps: n.mipmaps
                        }, 6 === (l += 1) && (1 === n.mipmapCount && (o.minFilter = f), o.format = n.format, o.needsUpdate = !0, t && t(o))
                    }), n, r)
                }

                if (s.setPath(this.path), s.setResponseType("arraybuffer"), Array.isArray(e)) for (var l = 0, u = 0, h = e.length; u < h; ++u) c(u); else s.load(e, (function (e) {
                    var n = i.parse(e, !0);
                    if (n.isCubemap) for (var r = n.mipmaps.length / n.mipmapCount, s = 0; s < r; s++) {
                        a[s] = {mipmaps: []};
                        for (var c = 0; c < n.mipmapCount; c++) a[s].mipmaps.push(n.mipmaps[s * n.mipmapCount + c]), a[s].format = n.format, a[s].width = n.width, a[s].height = n.height
                    } else o.image.width = n.width, o.image.height = n.height, o.mipmaps = n.mipmaps;
                    1 === n.mipmapCount && (o.minFilter = f), o.format = n.format, o.needsUpdate = !0, t && t(o)
                }), n, r);
                return o
            }
        }), Ps.prototype = Object.assign(Object.create(Ts.prototype), {
            constructor: Ps, load: function (e, t, n, r) {
                var i = this, a = new gn, o = new As(this.manager);
                return o.setResponseType("arraybuffer"), o.setPath(this.path), o.load(e, (function (e) {
                    var n = i.parse(e);
                    n && (void 0 !== n.image ? a.image = n.image : void 0 !== n.data && (a.image.width = n.width, a.image.height = n.height, a.image.data = n.data), a.wrapS = void 0 !== n.wrapS ? n.wrapS : l, a.wrapT = void 0 !== n.wrapT ? n.wrapT : l, a.magFilter = void 0 !== n.magFilter ? n.magFilter : f, a.minFilter = void 0 !== n.minFilter ? n.minFilter : f, a.anisotropy = void 0 !== n.anisotropy ? n.anisotropy : 1, void 0 !== n.format && (a.format = n.format), void 0 !== n.type && (a.type = n.type), void 0 !== n.mipmaps && (a.mipmaps = n.mipmaps, a.minFilter = v), 1 === n.mipmapCount && (a.minFilter = f), a.needsUpdate = !0, t && t(a, n))
                }), n, r), a
            }
        }), Cs.prototype = Object.assign(Object.create(Ts.prototype), {
            constructor: Cs, load: function (e, t, n, r) {
                void 0 !== this.path && (e = this.path + e), e = this.manager.resolveURL(e);
                var i = this, a = ws.get(e);
                if (void 0 !== a) return i.manager.itemStart(e), setTimeout((function () {
                    t && t(a), i.manager.itemEnd(e)
                }), 0), a;
                var o = document.createElementNS("http://www.w3.org/1999/xhtml", "img");

                function s() {
                    o.removeEventListener("load", s, !1), o.removeEventListener("error", c, !1), ws.add(e, this), t && t(this), i.manager.itemEnd(e)
                }

                function c(t) {
                    o.removeEventListener("load", s, !1), o.removeEventListener("error", c, !1), r && r(t), i.manager.itemError(e), i.manager.itemEnd(e)
                }

                return o.addEventListener("load", s, !1), o.addEventListener("error", c, !1), "data:" !== e.substr(0, 5) && void 0 !== this.crossOrigin && (o.crossOrigin = this.crossOrigin), i.manager.itemStart(e), o.src = e, o
            }
        }), Os.prototype = Object.assign(Object.create(Ts.prototype), {
            constructor: Os, load: function (e, t, n, r) {
                var i = new Bn, a = new Cs(this.manager);
                a.setCrossOrigin(this.crossOrigin), a.setPath(this.path);
                var o = 0;

                function s(n) {
                    a.load(e[n], (function (e) {
                        i.images[n] = e, 6 === ++o && (i.needsUpdate = !0, t && t(i))
                    }), void 0, r)
                }

                for (var c = 0; c < e.length; ++c) s(c);
                return i
            }
        }), Is.prototype = Object.assign(Object.create(Ts.prototype), {
            constructor: Is, load: function (e, t, n, r) {
                var i = new z, a = new Cs(this.manager);
                return a.setCrossOrigin(this.crossOrigin), a.setPath(this.path), a.load(e, (function (n) {
                    i.image = n;
                    var r = e.search(/\.jpe?g($|\?)/i) > 0 || 0 === e.search(/^data\:image\/jpeg/);
                    i.format = r ? g : y, i.needsUpdate = !0, void 0 !== t && t(i)
                }), n, r), i
            }
        }), Object.assign(Ns.prototype, {
            getPoint: function () {
                return console.warn("THREE.Curve: .getPoint() not implemented."), null
            }, getPointAt: function (e, t) {
                var n = this.getUtoTmapping(e);
                return this.getPoint(n, t)
            }, getPoints: function (e) {
                void 0 === e && (e = 5);
                for (var t = [], n = 0; n <= e; n++) t.push(this.getPoint(n / e));
                return t
            }, getSpacedPoints: function (e) {
                void 0 === e && (e = 5);
                for (var t = [], n = 0; n <= e; n++) t.push(this.getPointAt(n / e));
                return t
            }, getLength: function () {
                var e = this.getLengths();
                return e[e.length - 1]
            }, getLengths: function (e) {
                if (void 0 === e && (e = this.arcLengthDivisions), this.cacheArcLengths && this.cacheArcLengths.length === e + 1 && !this.needsUpdate) return this.cacheArcLengths;
                this.needsUpdate = !1;
                var t, n, r = [], i = this.getPoint(0), a = 0;
                for (r.push(0), n = 1; n <= e; n++) a += (t = this.getPoint(n / e)).distanceTo(i), r.push(a), i = t;
                return this.cacheArcLengths = r, r
            }, updateArcLengths: function () {
                this.needsUpdate = !0, this.getLengths()
            }, getUtoTmapping: function (e, t) {
                var n, r = this.getLengths(), i = 0, a = r.length;
                n = t || e * r[a - 1];
                for (var o, s = 0, c = a - 1; s <= c;) if ((o = r[i = Math.floor(s + (c - s) / 2)] - n) < 0) s = i + 1; else {
                    if (!(o > 0)) {
                        c = i;
                        break
                    }
                    c = i - 1
                }
                if (r[i = c] === n) return i / (a - 1);
                var l = r[i];
                return (i + (n - l) / (r[i + 1] - l)) / (a - 1)
            }, getTangent: function (e, t) {
                var n = e - 1e-4, r = e + 1e-4;
                n < 0 && (n = 0), r > 1 && (r = 1);
                var i = this.getPoint(n), a = this.getPoint(r), o = t || (i.isVector2 ? new I : new V);
                return o.copy(a).sub(i).normalize(), o
            }, getTangentAt: function (e, t) {
                var n = this.getUtoTmapping(e);
                return this.getTangent(n, t)
            }, computeFrenetFrames: function (e, t) {
                var n, r, i, a = new V, o = [], s = [], c = [], l = new V, u = new Q;
                for (n = 0; n <= e; n++) r = n / e, o[n] = this.getTangentAt(r, new V), o[n].normalize();
                s[0] = new V, c[0] = new V;
                var h = Number.MAX_VALUE, p = Math.abs(o[0].x), d = Math.abs(o[0].y), f = Math.abs(o[0].z);
                for (p <= h && (h = p, a.set(1, 0, 0)), d <= h && (h = d, a.set(0, 1, 0)), f <= h && a.set(0, 0, 1), l.crossVectors(o[0], a).normalize(), s[0].crossVectors(o[0], l), c[0].crossVectors(o[0], s[0]), n = 1; n <= e; n++) s[n] = s[n - 1].clone(), c[n] = c[n - 1].clone(), l.crossVectors(o[n - 1], o[n]), l.length() > Number.EPSILON && (l.normalize(), i = Math.acos(O.clamp(o[n - 1].dot(o[n]), -1, 1)), s[n].applyMatrix4(u.makeRotationAxis(l, i))), c[n].crossVectors(o[n], s[n]);
                if (!0 === t) for (i = Math.acos(O.clamp(s[0].dot(s[e]), -1, 1)), i /= e, o[0].dot(l.crossVectors(s[0], s[e])) > 0 && (i = -i), n = 1; n <= e; n++) s[n].applyMatrix4(u.makeRotationAxis(o[n], i * n)), c[n].crossVectors(o[n], s[n]);
                return {tangents: o, normals: s, binormals: c}
            }, clone: function () {
                return (new this.constructor).copy(this)
            }, copy: function (e) {
                return this.arcLengthDivisions = e.arcLengthDivisions, this
            }, toJSON: function () {
                var e = {metadata: {version: 4.5, type: "Curve", generator: "Curve.toJSON"}};
                return e.arcLengthDivisions = this.arcLengthDivisions, e.type = this.type, e
            }, fromJSON: function (e) {
                return this.arcLengthDivisions = e.arcLengthDivisions, this
            }
        }), Ds.prototype = Object.create(Ns.prototype), Ds.prototype.constructor = Ds, Ds.prototype.isEllipseCurve = !0, Ds.prototype.getPoint = function (e, t) {
            for (var n = t || new I, r = 2 * Math.PI, i = this.aEndAngle - this.aStartAngle, a = Math.abs(i) < Number.EPSILON; i < 0;) i += r;
            for (; i > r;) i -= r;
            i < Number.EPSILON && (i = a ? 0 : r), !0 !== this.aClockwise || a || (i === r ? i = -r : i -= r);
            var o = this.aStartAngle + e * i, s = this.aX + this.xRadius * Math.cos(o),
                c = this.aY + this.yRadius * Math.sin(o);
            if (0 !== this.aRotation) {
                var l = Math.cos(this.aRotation), u = Math.sin(this.aRotation), h = s - this.aX, p = c - this.aY;
                s = h * l - p * u + this.aX, c = h * u + p * l + this.aY
            }
            return n.set(s, c)
        }, Ds.prototype.copy = function (e) {
            return Ns.prototype.copy.call(this, e), this.aX = e.aX, this.aY = e.aY, this.xRadius = e.xRadius, this.yRadius = e.yRadius, this.aStartAngle = e.aStartAngle, this.aEndAngle = e.aEndAngle, this.aClockwise = e.aClockwise, this.aRotation = e.aRotation, this
        }, Ds.prototype.toJSON = function () {
            var e = Ns.prototype.toJSON.call(this);
            return e.aX = this.aX, e.aY = this.aY, e.xRadius = this.xRadius, e.yRadius = this.yRadius, e.aStartAngle = this.aStartAngle, e.aEndAngle = this.aEndAngle, e.aClockwise = this.aClockwise, e.aRotation = this.aRotation, e
        }, Ds.prototype.fromJSON = function (e) {
            return Ns.prototype.fromJSON.call(this, e), this.aX = e.aX, this.aY = e.aY, this.xRadius = e.xRadius, this.yRadius = e.yRadius, this.aStartAngle = e.aStartAngle, this.aEndAngle = e.aEndAngle, this.aClockwise = e.aClockwise, this.aRotation = e.aRotation, this
        }, Us.prototype = Object.create(Ds.prototype), Us.prototype.constructor = Us, Us.prototype.isArcCurve = !0;
        var Fs = new V, Bs = new zs, Hs = new zs, Gs = new zs;

        function ks(e, t, n, r) {
            Ns.call(this), this.type = "CatmullRomCurve3", this.points = e || [], this.closed = t || !1, this.curveType = n || "centripetal", this.tension = r || .5
        }

        function js(e, t, n, r, i) {
            var a = .5 * (r - t), o = .5 * (i - n), s = e * e;
            return (2 * n - 2 * r + a + o) * (e * s) + (-3 * n + 3 * r - 2 * a - o) * s + a * e + n
        }

        function Vs(e, t, n, r) {
            return function (e, t) {
                var n = 1 - e;
                return n * n * t
            }(e, t) + function (e, t) {
                return 2 * (1 - e) * e * t
            }(e, n) + function (e, t) {
                return e * e * t
            }(e, r)
        }

        function Ws(e, t, n, r, i) {
            return function (e, t) {
                var n = 1 - e;
                return n * n * n * t
            }(e, t) + function (e, t) {
                var n = 1 - e;
                return 3 * n * n * e * t
            }(e, n) + function (e, t) {
                return 3 * (1 - e) * e * e * t
            }(e, r) + function (e, t) {
                return e * e * e * t
            }(e, i)
        }

        function qs(e, t, n, r) {
            Ns.call(this), this.type = "CubicBezierCurve", this.v0 = e || new I, this.v1 = t || new I, this.v2 = n || new I, this.v3 = r || new I
        }

        function Xs(e, t, n, r) {
            Ns.call(this), this.type = "CubicBezierCurve3", this.v0 = e || new V, this.v1 = t || new V, this.v2 = n || new V, this.v3 = r || new V
        }

        function Ys(e, t) {
            Ns.call(this), this.type = "LineCurve", this.v1 = e || new I, this.v2 = t || new I
        }

        function Js(e, t) {
            Ns.call(this), this.type = "LineCurve3", this.v1 = e || new V, this.v2 = t || new V
        }

        function Zs(e, t, n) {
            Ns.call(this), this.type = "QuadraticBezierCurve", this.v0 = e || new I, this.v1 = t || new I, this.v2 = n || new I
        }

        function Ks(e, t, n) {
            Ns.call(this), this.type = "QuadraticBezierCurve3", this.v0 = e || new V, this.v1 = t || new V, this.v2 = n || new V
        }

        function Qs(e) {
            Ns.call(this), this.type = "SplineCurve", this.points = e || []
        }

        ks.prototype = Object.create(Ns.prototype), ks.prototype.constructor = ks, ks.prototype.isCatmullRomCurve3 = !0, ks.prototype.getPoint = function (e, t) {
            var n, r, i, a, o = t || new V, s = this.points, c = s.length, l = (c - (this.closed ? 0 : 1)) * e,
                u = Math.floor(l), h = l - u;
            if (this.closed ? u += u > 0 ? 0 : (Math.floor(Math.abs(u) / c) + 1) * c : 0 === h && u === c - 1 && (u = c - 2, h = 1), this.closed || u > 0 ? n = s[(u - 1) % c] : (Fs.subVectors(s[0], s[1]).add(s[0]), n = Fs), r = s[u % c], i = s[(u + 1) % c], this.closed || u + 2 < c ? a = s[(u + 2) % c] : (Fs.subVectors(s[c - 1], s[c - 2]).add(s[c - 1]), a = Fs), "centripetal" === this.curveType || "chordal" === this.curveType) {
                var p = "chordal" === this.curveType ? .5 : .25, d = Math.pow(n.distanceToSquared(r), p),
                    f = Math.pow(r.distanceToSquared(i), p), m = Math.pow(i.distanceToSquared(a), p);
                f < 1e-4 && (f = 1), d < 1e-4 && (d = f), m < 1e-4 && (m = f), Bs.initNonuniformCatmullRom(n.x, r.x, i.x, a.x, d, f, m), Hs.initNonuniformCatmullRom(n.y, r.y, i.y, a.y, d, f, m), Gs.initNonuniformCatmullRom(n.z, r.z, i.z, a.z, d, f, m)
            } else "catmullrom" === this.curveType && (Bs.initCatmullRom(n.x, r.x, i.x, a.x, this.tension), Hs.initCatmullRom(n.y, r.y, i.y, a.y, this.tension), Gs.initCatmullRom(n.z, r.z, i.z, a.z, this.tension));
            return o.set(Bs.calc(h), Hs.calc(h), Gs.calc(h)), o
        }, ks.prototype.copy = function (e) {
            Ns.prototype.copy.call(this, e), this.points = [];
            for (var t = 0, n = e.points.length; t < n; t++) {
                var r = e.points[t];
                this.points.push(r.clone())
            }
            return this.closed = e.closed, this.curveType = e.curveType, this.tension = e.tension, this
        }, ks.prototype.toJSON = function () {
            var e = Ns.prototype.toJSON.call(this);
            e.points = [];
            for (var t = 0, n = this.points.length; t < n; t++) {
                var r = this.points[t];
                e.points.push(r.toArray())
            }
            return e.closed = this.closed, e.curveType = this.curveType, e.tension = this.tension, e
        }, ks.prototype.fromJSON = function (e) {
            Ns.prototype.fromJSON.call(this, e), this.points = [];
            for (var t = 0, n = e.points.length; t < n; t++) {
                var r = e.points[t];
                this.points.push((new V).fromArray(r))
            }
            return this.closed = e.closed, this.curveType = e.curveType, this.tension = e.tension, this
        }, qs.prototype = Object.create(Ns.prototype), qs.prototype.constructor = qs, qs.prototype.isCubicBezierCurve = !0, qs.prototype.getPoint = function (e, t) {
            var n = t || new I, r = this.v0, i = this.v1, a = this.v2, o = this.v3;
            return n.set(Ws(e, r.x, i.x, a.x, o.x), Ws(e, r.y, i.y, a.y, o.y)), n
        }, qs.prototype.copy = function (e) {
            return Ns.prototype.copy.call(this, e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this.v3.copy(e.v3), this
        }, qs.prototype.toJSON = function () {
            var e = Ns.prototype.toJSON.call(this);
            return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e.v3 = this.v3.toArray(), e
        }, qs.prototype.fromJSON = function (e) {
            return Ns.prototype.fromJSON.call(this, e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this.v3.fromArray(e.v3), this
        }, Xs.prototype = Object.create(Ns.prototype), Xs.prototype.constructor = Xs, Xs.prototype.isCubicBezierCurve3 = !0, Xs.prototype.getPoint = function (e, t) {
            var n = t || new V, r = this.v0, i = this.v1, a = this.v2, o = this.v3;
            return n.set(Ws(e, r.x, i.x, a.x, o.x), Ws(e, r.y, i.y, a.y, o.y), Ws(e, r.z, i.z, a.z, o.z)), n
        }, Xs.prototype.copy = function (e) {
            return Ns.prototype.copy.call(this, e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this.v3.copy(e.v3), this
        }, Xs.prototype.toJSON = function () {
            var e = Ns.prototype.toJSON.call(this);
            return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e.v3 = this.v3.toArray(), e
        }, Xs.prototype.fromJSON = function (e) {
            return Ns.prototype.fromJSON.call(this, e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this.v3.fromArray(e.v3), this
        }, Ys.prototype = Object.create(Ns.prototype), Ys.prototype.constructor = Ys, Ys.prototype.isLineCurve = !0, Ys.prototype.getPoint = function (e, t) {
            var n = t || new I;
            return 1 === e ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(e).add(this.v1)), n
        }, Ys.prototype.getPointAt = function (e, t) {
            return this.getPoint(e, t)
        }, Ys.prototype.getTangent = function (e, t) {
            return (t || new I).copy(this.v2).sub(this.v1).normalize()
        }, Ys.prototype.copy = function (e) {
            return Ns.prototype.copy.call(this, e), this.v1.copy(e.v1), this.v2.copy(e.v2), this
        }, Ys.prototype.toJSON = function () {
            var e = Ns.prototype.toJSON.call(this);
            return e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e
        }, Ys.prototype.fromJSON = function (e) {
            return Ns.prototype.fromJSON.call(this, e), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this
        }, Js.prototype = Object.create(Ns.prototype), Js.prototype.constructor = Js, Js.prototype.isLineCurve3 = !0, Js.prototype.getPoint = function (e, t) {
            var n = t || new V;
            return 1 === e ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(e).add(this.v1)), n
        }, Js.prototype.getPointAt = function (e, t) {
            return this.getPoint(e, t)
        }, Js.prototype.copy = function (e) {
            return Ns.prototype.copy.call(this, e), this.v1.copy(e.v1), this.v2.copy(e.v2), this
        }, Js.prototype.toJSON = function () {
            var e = Ns.prototype.toJSON.call(this);
            return e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e
        }, Js.prototype.fromJSON = function (e) {
            return Ns.prototype.fromJSON.call(this, e), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this
        }, Zs.prototype = Object.create(Ns.prototype), Zs.prototype.constructor = Zs, Zs.prototype.isQuadraticBezierCurve = !0, Zs.prototype.getPoint = function (e, t) {
            var n = t || new I, r = this.v0, i = this.v1, a = this.v2;
            return n.set(Vs(e, r.x, i.x, a.x), Vs(e, r.y, i.y, a.y)), n
        }, Zs.prototype.copy = function (e) {
            return Ns.prototype.copy.call(this, e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this
        }, Zs.prototype.toJSON = function () {
            var e = Ns.prototype.toJSON.call(this);
            return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e
        }, Zs.prototype.fromJSON = function (e) {
            return Ns.prototype.fromJSON.call(this, e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this
        }, Ks.prototype = Object.create(Ns.prototype), Ks.prototype.constructor = Ks, Ks.prototype.isQuadraticBezierCurve3 = !0, Ks.prototype.getPoint = function (e, t) {
            var n = t || new V, r = this.v0, i = this.v1, a = this.v2;
            return n.set(Vs(e, r.x, i.x, a.x), Vs(e, r.y, i.y, a.y), Vs(e, r.z, i.z, a.z)), n
        }, Ks.prototype.copy = function (e) {
            return Ns.prototype.copy.call(this, e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this
        }, Ks.prototype.toJSON = function () {
            var e = Ns.prototype.toJSON.call(this);
            return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e
        }, Ks.prototype.fromJSON = function (e) {
            return Ns.prototype.fromJSON.call(this, e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this
        }, Qs.prototype = Object.create(Ns.prototype), Qs.prototype.constructor = Qs, Qs.prototype.isSplineCurve = !0, Qs.prototype.getPoint = function (e, t) {
            var n = t || new I, r = this.points, i = (r.length - 1) * e, a = Math.floor(i), o = i - a,
                s = r[0 === a ? a : a - 1], c = r[a], l = r[a > r.length - 2 ? r.length - 1 : a + 1],
                u = r[a > r.length - 3 ? r.length - 1 : a + 2];
            return n.set(js(o, s.x, c.x, l.x, u.x), js(o, s.y, c.y, l.y, u.y)), n
        }, Qs.prototype.copy = function (e) {
            Ns.prototype.copy.call(this, e), this.points = [];
            for (var t = 0, n = e.points.length; t < n; t++) {
                var r = e.points[t];
                this.points.push(r.clone())
            }
            return this
        }, Qs.prototype.toJSON = function () {
            var e = Ns.prototype.toJSON.call(this);
            e.points = [];
            for (var t = 0, n = this.points.length; t < n; t++) {
                var r = this.points[t];
                e.points.push(r.toArray())
            }
            return e
        }, Qs.prototype.fromJSON = function (e) {
            Ns.prototype.fromJSON.call(this, e), this.points = [];
            for (var t = 0, n = e.points.length; t < n; t++) {
                var r = e.points[t];
                this.points.push((new I).fromArray(r))
            }
            return this
        };
        var $s = Object.freeze({
            __proto__: null,
            ArcCurve: Us,
            CatmullRomCurve3: ks,
            CubicBezierCurve: qs,
            CubicBezierCurve3: Xs,
            EllipseCurve: Ds,
            LineCurve: Ys,
            LineCurve3: Js,
            QuadraticBezierCurve: Zs,
            QuadraticBezierCurve3: Ks,
            SplineCurve: Qs
        });

        function ec() {
            Ns.call(this), this.type = "CurvePath", this.curves = [], this.autoClose = !1
        }

        function tc(e) {
            ec.call(this), this.type = "Path", this.currentPoint = new I, e && this.setFromPoints(e)
        }

        function nc(e) {
            tc.call(this, e), this.uuid = O.generateUUID(), this.type = "Shape", this.holes = []
        }

        function rc(e, t) {
            ve.call(this), this.type = "Light", this.color = new st(e), this.intensity = void 0 !== t ? t : 1, this.receiveShadow = void 0
        }

        function ic(e, t, n) {
            rc.call(this, e, n), this.type = "HemisphereLight", this.castShadow = void 0, this.position.copy(ve.DefaultUp), this.updateMatrix(), this.groundColor = new st(t)
        }

        function ac(e) {
            // #Window.camera
            this.camera = e, window.camera = e, this.bias = 0, this.radius = 1, this.mapSize = new I(512, 512), this.map = null, this.mapPass = null, this.matrix = new Q, this._frustum = new bn, this._frameExtents = new I(1, 1), this._viewportCount = 1, this._viewports = [new F(0, 0, 1, 1)]
        }

        function oc() {
            ac.call(this, new fn(50, 1, .5, 500))
        }

        function sc(e, t, n, r, i, a) {
            rc.call(this, e, t), this.type = "SpotLight", this.position.copy(ve.DefaultUp), this.updateMatrix(), this.target = new ve, Object.defineProperty(this, "power", {
                get: function () {
                    return this.intensity * Math.PI
                }, set: function (e) {
                    this.intensity = e / Math.PI
                }
            }), this.distance = void 0 !== n ? n : 0, this.angle = void 0 !== r ? r : Math.PI / 3, this.penumbra = void 0 !== i ? i : 0, this.decay = void 0 !== a ? a : 1, this.shadow = new oc
        }

        function cc() {
            ac.call(this, new fn(90, 1, .5, 500)), this._frameExtents = new I(4, 2), this._viewportCount = 6, this._viewports = [new F(2, 1, 1, 1), new F(0, 1, 1, 1), new F(3, 1, 1, 1), new F(1, 1, 1, 1), new F(3, 0, 1, 1), new F(1, 0, 1, 1)], this._cubeDirections = [new V(1, 0, 0), new V(-1, 0, 0), new V(0, 0, 1), new V(0, 0, -1), new V(0, 1, 0), new V(0, -1, 0)], this._cubeUps = [new V(0, 1, 0), new V(0, 1, 0), new V(0, 1, 0), new V(0, 1, 0), new V(0, 0, 1), new V(0, 0, -1)]
        }

        function lc(e, t, n, r) {
            rc.call(this, e, t), this.type = "PointLight", Object.defineProperty(this, "power", {
                get: function () {
                    return 4 * this.intensity * Math.PI
                }, set: function (e) {
                    this.intensity = e / (4 * Math.PI)
                }
            }), this.distance = void 0 !== n ? n : 0, this.decay = void 0 !== r ? r : 1, this.shadow = new cc
        }

        function uc(e, t, n, r, i, a) {
            dn.call(this), this.type = "OrthographicCamera", this.zoom = 1, this.view = null, this.left = void 0 !== e ? e : -1, this.right = void 0 !== t ? t : 1, this.top = void 0 !== n ? n : 1, this.bottom = void 0 !== r ? r : -1, this.near = void 0 !== i ? i : .1, this.far = void 0 !== a ? a : 2e3, this.updateProjectionMatrix()
        }

        function hc() {
            ac.call(this, new uc(-5, 5, 5, -5, .5, 500))
        }

        function pc(e, t) {
            rc.call(this, e, t), this.type = "DirectionalLight", this.position.copy(ve.DefaultUp), this.updateMatrix(), this.target = new ve, this.shadow = new hc
        }

        function dc(e, t) {
            rc.call(this, e, t), this.type = "AmbientLight", this.castShadow = void 0
        }

        function fc(e, t, n, r) {
            rc.call(this, e, t), this.type = "RectAreaLight", this.width = void 0 !== n ? n : 10, this.height = void 0 !== r ? r : 10
        }

        function mc() {
            this.coefficients = [];
            for (var e = 0; e < 9; e++) this.coefficients.push(new V)
        }

        function vc(e, t) {
            rc.call(this, void 0, t), this.type = "LightProbe", this.sh = void 0 !== e ? e : new mc
        }

        function gc(e) {
            Ts.call(this, e), this.textures = {}
        }

        ec.prototype = Object.assign(Object.create(Ns.prototype), {
            constructor: ec, add: function (e) {
                this.curves.push(e)
            }, closePath: function () {
                var e = this.curves[0].getPoint(0), t = this.curves[this.curves.length - 1].getPoint(1);
                e.equals(t) || this.curves.push(new Ys(t, e))
            }, getPoint: function (e) {
                for (var t = e * this.getLength(), n = this.getCurveLengths(), r = 0; r < n.length;) {
                    if (n[r] >= t) {
                        var i = n[r] - t, a = this.curves[r], o = a.getLength(), s = 0 === o ? 0 : 1 - i / o;
                        return a.getPointAt(s)
                    }
                    r++
                }
                return null
            }, getLength: function () {
                var e = this.getCurveLengths();
                return e[e.length - 1]
            }, updateArcLengths: function () {
                this.needsUpdate = !0, this.cacheLengths = null, this.getCurveLengths()
            }, getCurveLengths: function () {
                if (this.cacheLengths && this.cacheLengths.length === this.curves.length) return this.cacheLengths;
                for (var e = [], t = 0, n = 0, r = this.curves.length; n < r; n++) t += this.curves[n].getLength(), e.push(t);
                return this.cacheLengths = e, e
            }, getSpacedPoints: function (e) {
                void 0 === e && (e = 40);
                for (var t = [], n = 0; n <= e; n++) t.push(this.getPoint(n / e));
                return this.autoClose && t.push(t[0]), t
            }, getPoints: function (e) {
                e = e || 12;
                for (var t, n = [], r = 0, i = this.curves; r < i.length; r++) for (var a = i[r], o = a && a.isEllipseCurve ? 2 * e : a && (a.isLineCurve || a.isLineCurve3) ? 1 : a && a.isSplineCurve ? e * a.points.length : e, s = a.getPoints(o), c = 0; c < s.length; c++) {
                    var l = s[c];
                    t && t.equals(l) || (n.push(l), t = l)
                }
                return this.autoClose && n.length > 1 && !n[n.length - 1].equals(n[0]) && n.push(n[0]), n
            }, copy: function (e) {
                Ns.prototype.copy.call(this, e), this.curves = [];
                for (var t = 0, n = e.curves.length; t < n; t++) {
                    var r = e.curves[t];
                    this.curves.push(r.clone())
                }
                return this.autoClose = e.autoClose, this
            }, toJSON: function () {
                var e = Ns.prototype.toJSON.call(this);
                e.autoClose = this.autoClose, e.curves = [];
                for (var t = 0, n = this.curves.length; t < n; t++) {
                    var r = this.curves[t];
                    e.curves.push(r.toJSON())
                }
                return e
            }, fromJSON: function (e) {
                Ns.prototype.fromJSON.call(this, e), this.autoClose = e.autoClose, this.curves = [];
                for (var t = 0, n = e.curves.length; t < n; t++) {
                    var r = e.curves[t];
                    this.curves.push((new $s[r.type]).fromJSON(r))
                }
                return this
            }
        }), tc.prototype = Object.assign(Object.create(ec.prototype), {
            constructor: tc, setFromPoints: function (e) {
                this.moveTo(e[0].x, e[0].y);
                for (var t = 1, n = e.length; t < n; t++) this.lineTo(e[t].x, e[t].y);
                return this
            }, moveTo: function (e, t) {
                return this.currentPoint.set(e, t), this
            }, lineTo: function (e, t) {
                var n = new Ys(this.currentPoint.clone(), new I(e, t));
                return this.curves.push(n), this.currentPoint.set(e, t), this
            }, quadraticCurveTo: function (e, t, n, r) {
                var i = new Zs(this.currentPoint.clone(), new I(e, t), new I(n, r));
                return this.curves.push(i), this.currentPoint.set(n, r), this
            }, bezierCurveTo: function (e, t, n, r, i, a) {
                var o = new qs(this.currentPoint.clone(), new I(e, t), new I(n, r), new I(i, a));
                return this.curves.push(o), this.currentPoint.set(i, a), this
            }, splineThru: function (e) {
                var t = new Qs([this.currentPoint.clone()].concat(e));
                return this.curves.push(t), this.currentPoint.copy(e[e.length - 1]), this
            }, arc: function (e, t, n, r, i, a) {
                var o = this.currentPoint.x, s = this.currentPoint.y;
                return this.absarc(e + o, t + s, n, r, i, a), this
            }, absarc: function (e, t, n, r, i, a) {
                return this.absellipse(e, t, n, n, r, i, a), this
            }, ellipse: function (e, t, n, r, i, a, o, s) {
                var c = this.currentPoint.x, l = this.currentPoint.y;
                return this.absellipse(e + c, t + l, n, r, i, a, o, s), this
            }, absellipse: function (e, t, n, r, i, a, o, s) {
                var c = new Ds(e, t, n, r, i, a, o, s);
                if (this.curves.length > 0) {
                    var l = c.getPoint(0);
                    l.equals(this.currentPoint) || this.lineTo(l.x, l.y)
                }
                this.curves.push(c);
                var u = c.getPoint(1);
                return this.currentPoint.copy(u), this
            }, copy: function (e) {
                return ec.prototype.copy.call(this, e), this.currentPoint.copy(e.currentPoint), this
            }, toJSON: function () {
                var e = ec.prototype.toJSON.call(this);
                return e.currentPoint = this.currentPoint.toArray(), e
            }, fromJSON: function (e) {
                return ec.prototype.fromJSON.call(this, e), this.currentPoint.fromArray(e.currentPoint), this
            }
        }), nc.prototype = Object.assign(Object.create(tc.prototype), {
            constructor: nc, getPointsHoles: function (e) {
                for (var t = [], n = 0, r = this.holes.length; n < r; n++) t[n] = this.holes[n].getPoints(e);
                return t
            }, extractPoints: function (e) {
                return {shape: this.getPoints(e), holes: this.getPointsHoles(e)}
            }, copy: function (e) {
                tc.prototype.copy.call(this, e), this.holes = [];
                for (var t = 0, n = e.holes.length; t < n; t++) {
                    var r = e.holes[t];
                    this.holes.push(r.clone())
                }
                return this
            }, toJSON: function () {
                var e = tc.prototype.toJSON.call(this);
                e.uuid = this.uuid, e.holes = [];
                for (var t = 0, n = this.holes.length; t < n; t++) {
                    var r = this.holes[t];
                    e.holes.push(r.toJSON())
                }
                return e
            }, fromJSON: function (e) {
                tc.prototype.fromJSON.call(this, e), this.uuid = e.uuid, this.holes = [];
                for (var t = 0, n = e.holes.length; t < n; t++) {
                    var r = e.holes[t];
                    this.holes.push((new tc).fromJSON(r))
                }
                return this
            }
        }), rc.prototype = Object.assign(Object.create(ve.prototype), {
            constructor: rc,
            isLight: !0,
            copy: function (e) {
                return ve.prototype.copy.call(this, e), this.color.copy(e.color), this.intensity = e.intensity, this
            },
            toJSON: function (e) {
                var t = ve.prototype.toJSON.call(this, e);
                return t.object.color = this.color.getHex(), t.object.intensity = this.intensity, void 0 !== this.groundColor && (t.object.groundColor = this.groundColor.getHex()), void 0 !== this.distance && (t.object.distance = this.distance), void 0 !== this.angle && (t.object.angle = this.angle), void 0 !== this.decay && (t.object.decay = this.decay), void 0 !== this.penumbra && (t.object.penumbra = this.penumbra), void 0 !== this.shadow && (t.object.shadow = this.shadow.toJSON()), t
            }
        }), ic.prototype = Object.assign(Object.create(rc.prototype), {
            constructor: ic,
            isHemisphereLight: !0,
            copy: function (e) {
                return rc.prototype.copy.call(this, e), this.groundColor.copy(e.groundColor), this
            }
        }), Object.assign(ac.prototype, {
            _projScreenMatrix: new Q, _lightPositionWorld: new V, _lookTarget: new V, getViewportCount: function () {
                return this._viewportCount
            }, getFrustum: function () {
                return this._frustum
            }, updateMatrices: function (e) {
                var t = this.camera, n = this.matrix, r = this._projScreenMatrix, i = this._lookTarget,
                    a = this._lightPositionWorld;
                a.setFromMatrixPosition(e.matrixWorld), t.position.copy(a), i.setFromMatrixPosition(e.target.matrixWorld), t.lookAt(i), t.updateMatrixWorld(), r.multiplyMatrices(t.projectionMatrix, t.matrixWorldInverse), this._frustum.setFromProjectionMatrix(r), n.set(.5, 0, 0, .5, 0, .5, 0, .5, 0, 0, .5, .5, 0, 0, 0, 1), n.multiply(t.projectionMatrix), n.multiply(t.matrixWorldInverse)
            }, getViewport: function (e) {
                return this._viewports[e]
            }, getFrameExtents: function () {
                return this._frameExtents
            }, copy: function (e) {
                return this.camera = e.camera.clone(), this.bias = e.bias, this.radius = e.radius, this.mapSize.copy(e.mapSize), this
            }, clone: function () {
                return (new this.constructor).copy(this)
            }, toJSON: function () {
                var e = {};
                return 0 !== this.bias && (e.bias = this.bias), 1 !== this.radius && (e.radius = this.radius), 512 === this.mapSize.x && 512 === this.mapSize.y || (e.mapSize = this.mapSize.toArray()), e.camera = this.camera.toJSON(!1).object, delete e.camera.matrix, e
            }
        }), oc.prototype = Object.assign(Object.create(ac.prototype), {
            constructor: oc,
            isSpotLightShadow: !0,
            updateMatrices: function (e) {
                var t = this.camera, n = 2 * O.RAD2DEG * e.angle, r = this.mapSize.width / this.mapSize.height,
                    i = e.distance || t.far;
                n === t.fov && r === t.aspect && i === t.far || (t.fov = n, t.aspect = r, t.far = i, t.updateProjectionMatrix()), ac.prototype.updateMatrices.call(this, e)
            }
        }), sc.prototype = Object.assign(Object.create(rc.prototype), {
            constructor: sc,
            isSpotLight: !0,
            copy: function (e) {
                return rc.prototype.copy.call(this, e), this.distance = e.distance, this.angle = e.angle, this.penumbra = e.penumbra, this.decay = e.decay, this.target = e.target.clone(), this.shadow = e.shadow.clone(), this
            }
        }), cc.prototype = Object.assign(Object.create(ac.prototype), {
            constructor: cc,
            isPointLightShadow: !0,
            updateMatrices: function (e, t) {
                void 0 === t && (t = 0);
                var n = this.camera, r = this.matrix, i = this._lightPositionWorld, a = this._lookTarget,
                    o = this._projScreenMatrix;
                i.setFromMatrixPosition(e.matrixWorld), n.position.copy(i), a.copy(n.position), a.add(this._cubeDirections[t]), n.up.copy(this._cubeUps[t]), n.lookAt(a), n.updateMatrixWorld(), r.makeTranslation(-i.x, -i.y, -i.z), o.multiplyMatrices(n.projectionMatrix, n.matrixWorldInverse), this._frustum.setFromProjectionMatrix(o)
            }
        }), lc.prototype = Object.assign(Object.create(rc.prototype), {
            constructor: lc,
            isPointLight: !0,
            copy: function (e) {
                return rc.prototype.copy.call(this, e), this.distance = e.distance, this.decay = e.decay, this.shadow = e.shadow.clone(), this
            }
        }), uc.prototype = Object.assign(Object.create(dn.prototype), {
            constructor: uc, isOrthographicCamera: !0, copy: function (e, t) {
                return dn.prototype.copy.call(this, e, t), this.left = e.left, this.right = e.right, this.top = e.top, this.bottom = e.bottom, this.near = e.near, this.far = e.far, this.zoom = e.zoom, this.view = null === e.view ? null : Object.assign({}, e.view), this
            }, setViewOffset: function (e, t, n, r, i, a) {
                null === this.view && (this.view = {
                    enabled: !0,
                    fullWidth: 1,
                    fullHeight: 1,
                    offsetX: 0,
                    offsetY: 0,
                    width: 1,
                    height: 1
                }), this.view.enabled = !0, this.view.fullWidth = e, this.view.fullHeight = t, this.view.offsetX = n, this.view.offsetY = r, this.view.width = i, this.view.height = a, this.updateProjectionMatrix()
            }, clearViewOffset: function () {
                null !== this.view && (this.view.enabled = !1), this.updateProjectionMatrix()
            }, updateProjectionMatrix: function () {
                var e = (this.right - this.left) / (2 * this.zoom), t = (this.top - this.bottom) / (2 * this.zoom),
                    n = (this.right + this.left) / 2, r = (this.top + this.bottom) / 2, i = n - e, a = n + e, o = r + t,
                    s = r - t;
                if (null !== this.view && this.view.enabled) {
                    var c = (this.right - this.left) / this.view.fullWidth / this.zoom,
                        l = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
                    a = (i += c * this.view.offsetX) + c * this.view.width, s = (o -= l * this.view.offsetY) - l * this.view.height
                }
                this.projectionMatrix.makeOrthographic(i, a, o, s, this.near, this.far), this.projectionMatrixInverse.getInverse(this.projectionMatrix)
            }, toJSON: function (e) {
                var t = ve.prototype.toJSON.call(this, e);
                return t.object.zoom = this.zoom, t.object.left = this.left, t.object.right = this.right, t.object.top = this.top, t.object.bottom = this.bottom, t.object.near = this.near, t.object.far = this.far, null !== this.view && (t.object.view = Object.assign({}, this.view)), t
            }
        }), hc.prototype = Object.assign(Object.create(ac.prototype), {
            constructor: hc,
            isDirectionalLightShadow: !0,
            updateMatrices: function (e) {
                ac.prototype.updateMatrices.call(this, e)
            }
        }), pc.prototype = Object.assign(Object.create(rc.prototype), {
            constructor: pc,
            isDirectionalLight: !0,
            copy: function (e) {
                return rc.prototype.copy.call(this, e), this.target = e.target.clone(), this.shadow = e.shadow.clone(), this
            }
        }), dc.prototype = Object.assign(Object.create(rc.prototype), {
            constructor: dc,
            isAmbientLight: !0
        }), fc.prototype = Object.assign(Object.create(rc.prototype), {
            constructor: fc,
            isRectAreaLight: !0,
            copy: function (e) {
                return rc.prototype.copy.call(this, e), this.width = e.width, this.height = e.height, this
            },
            toJSON: function (e) {
                var t = rc.prototype.toJSON.call(this, e);
                return t.object.width = this.width, t.object.height = this.height, t
            }
        }), Object.assign(mc.prototype, {
            isSphericalHarmonics3: !0, set: function (e) {
                for (var t = 0; t < 9; t++) this.coefficients[t].copy(e[t]);
                return this
            }, zero: function () {
                for (var e = 0; e < 9; e++) this.coefficients[e].set(0, 0, 0);
                return this
            }, getAt: function (e, t) {
                var n = e.x, r = e.y, i = e.z, a = this.coefficients;
                return t.copy(a[0]).multiplyScalar(.282095), t.addScaledVector(a[1], .488603 * r), t.addScaledVector(a[2], .488603 * i), t.addScaledVector(a[3], .488603 * n), t.addScaledVector(a[4], n * r * 1.092548), t.addScaledVector(a[5], r * i * 1.092548), t.addScaledVector(a[6], .315392 * (3 * i * i - 1)), t.addScaledVector(a[7], n * i * 1.092548), t.addScaledVector(a[8], .546274 * (n * n - r * r)), t
            }, getIrradianceAt: function (e, t) {
                var n = e.x, r = e.y, i = e.z, a = this.coefficients;
                return t.copy(a[0]).multiplyScalar(.886227), t.addScaledVector(a[1], 1.023328 * r), t.addScaledVector(a[2], 1.023328 * i), t.addScaledVector(a[3], 1.023328 * n), t.addScaledVector(a[4], .858086 * n * r), t.addScaledVector(a[5], .858086 * r * i), t.addScaledVector(a[6], .743125 * i * i - .247708), t.addScaledVector(a[7], .858086 * n * i), t.addScaledVector(a[8], .429043 * (n * n - r * r)), t
            }, add: function (e) {
                for (var t = 0; t < 9; t++) this.coefficients[t].add(e.coefficients[t]);
                return this
            }, addScaledSH: function (e, t) {
                for (var n = 0; n < 9; n++) this.coefficients[n].addScaledVector(e.coefficients[n], t);
                return this
            }, scale: function (e) {
                for (var t = 0; t < 9; t++) this.coefficients[t].multiplyScalar(e);
                return this
            }, lerp: function (e, t) {
                for (var n = 0; n < 9; n++) this.coefficients[n].lerp(e.coefficients[n], t);
                return this
            }, equals: function (e) {
                for (var t = 0; t < 9; t++) if (!this.coefficients[t].equals(e.coefficients[t])) return !1;
                return !0
            }, copy: function (e) {
                return this.set(e.coefficients)
            }, clone: function () {
                return (new this.constructor).copy(this)
            }, fromArray: function (e, t) {
                void 0 === t && (t = 0);
                for (var n = this.coefficients, r = 0; r < 9; r++) n[r].fromArray(e, t + 3 * r);
                return this
            }, toArray: function (e, t) {
                void 0 === e && (e = []), void 0 === t && (t = 0);
                for (var n = this.coefficients, r = 0; r < 9; r++) n[r].toArray(e, t + 3 * r);
                return e
            }
        }), Object.assign(mc, {
            getBasisAt: function (e, t) {
                var n = e.x, r = e.y, i = e.z;
                t[0] = .282095, t[1] = .488603 * r, t[2] = .488603 * i, t[3] = .488603 * n, t[4] = 1.092548 * n * r, t[5] = 1.092548 * r * i, t[6] = .315392 * (3 * i * i - 1), t[7] = 1.092548 * n * i, t[8] = .546274 * (n * n - r * r)
            }
        }), vc.prototype = Object.assign(Object.create(rc.prototype), {
            constructor: vc,
            isLightProbe: !0,
            copy: function (e) {
                return rc.prototype.copy.call(this, e), this.sh.copy(e.sh), this
            },
            fromJSON: function (e) {
                return this.intensity = e.intensity, this.sh.fromArray(e.sh), this
            },
            toJSON: function (e) {
                var t = rc.prototype.toJSON.call(this, e);
                return t.object.sh = this.sh.toArray(), t
            }
        }), gc.prototype = Object.assign(Object.create(Ts.prototype), {
            constructor: gc, load: function (e, t, n, r) {
                var i = this, a = new As(i.manager);
                a.setPath(i.path), a.load(e, (function (n) {
                    try {
                        t(i.parse(JSON.parse(n)))
                    } catch (t) {
                        r ? r(t) : console.error(t), i.manager.itemError(e)
                    }
                }), n, r)
            }, parse: function (e) {
                var t = this.textures;

                function n(e) {
                    return void 0 === t[e] && console.warn("THREE.MaterialLoader: Undefined texture", e), t[e]
                }

                var r = new os[e.type];
                if (void 0 !== e.uuid && (r.uuid = e.uuid), void 0 !== e.name && (r.name = e.name), void 0 !== e.color && r.color.setHex(e.color), void 0 !== e.roughness && (r.roughness = e.roughness), void 0 !== e.metalness && (r.metalness = e.metalness), void 0 !== e.sheen && (r.sheen = (new st).setHex(e.sheen)), void 0 !== e.emissive && r.emissive.setHex(e.emissive), void 0 !== e.specular && r.specular.setHex(e.specular), void 0 !== e.shininess && (r.shininess = e.shininess), void 0 !== e.clearcoat && (r.clearcoat = e.clearcoat), void 0 !== e.clearcoatRoughness && (r.clearcoatRoughness = e.clearcoatRoughness), void 0 !== e.fog && (r.fog = e.fog), void 0 !== e.flatShading && (r.flatShading = e.flatShading), void 0 !== e.blending && (r.blending = e.blending), void 0 !== e.combine && (r.combine = e.combine), void 0 !== e.side && (r.side = e.side), void 0 !== e.opacity && (r.opacity = e.opacity), void 0 !== e.transparent && (r.transparent = e.transparent), void 0 !== e.alphaTest && (r.alphaTest = e.alphaTest), void 0 !== e.depthTest && (r.depthTest = e.depthTest), void 0 !== e.depthWrite && (r.depthWrite = e.depthWrite), void 0 !== e.colorWrite && (r.colorWrite = e.colorWrite), void 0 !== e.stencilWrite && (r.stencilWrite = e.stencilWrite), void 0 !== e.stencilWriteMask && (r.stencilWriteMask = e.stencilWriteMask), void 0 !== e.stencilFunc && (r.stencilFunc = e.stencilFunc), void 0 !== e.stencilRef && (r.stencilRef = e.stencilRef), void 0 !== e.stencilFuncMask && (r.stencilFuncMask = e.stencilFuncMask), void 0 !== e.stencilFail && (r.stencilFail = e.stencilFail), void 0 !== e.stencilZFail && (r.stencilZFail = e.stencilZFail), void 0 !== e.stencilZPass && (r.stencilZPass = e.stencilZPass), void 0 !== e.wireframe && (r.wireframe = e.wireframe), void 0 !== e.wireframeLinewidth && (r.wireframeLinewidth = e.wireframeLinewidth), void 0 !== e.wireframeLinecap && (r.wireframeLinecap = e.wireframeLinecap), void 0 !== e.wireframeLinejoin && (r.wireframeLinejoin = e.wireframeLinejoin), void 0 !== e.rotation && (r.rotation = e.rotation), 1 !== e.linewidth && (r.linewidth = e.linewidth), void 0 !== e.dashSize && (r.dashSize = e.dashSize), void 0 !== e.gapSize && (r.gapSize = e.gapSize), void 0 !== e.scale && (r.scale = e.scale), void 0 !== e.polygonOffset && (r.polygonOffset = e.polygonOffset), void 0 !== e.polygonOffsetFactor && (r.polygonOffsetFactor = e.polygonOffsetFactor), void 0 !== e.polygonOffsetUnits && (r.polygonOffsetUnits = e.polygonOffsetUnits), void 0 !== e.skinning && (r.skinning = e.skinning), void 0 !== e.morphTargets && (r.morphTargets = e.morphTargets), void 0 !== e.morphNormals && (r.morphNormals = e.morphNormals), void 0 !== e.dithering && (r.dithering = e.dithering), void 0 !== e.vertexTangents && (r.vertexTangents = e.vertexTangents), void 0 !== e.visible && (r.visible = e.visible), void 0 !== e.toneMapped && (r.toneMapped = e.toneMapped), void 0 !== e.userData && (r.userData = e.userData), void 0 !== e.vertexColors && ("number" == typeof e.vertexColors ? r.vertexColors = e.vertexColors > 0 : r.vertexColors = e.vertexColors), void 0 !== e.uniforms) for (var i in e.uniforms) {
                    var a = e.uniforms[i];
                    switch (r.uniforms[i] = {}, a.type) {
                        case"t":
                            r.uniforms[i].value = n(a.value);
                            break;
                        case"c":
                            r.uniforms[i].value = (new st).setHex(a.value);
                            break;
                        case"v2":
                            r.uniforms[i].value = (new I).fromArray(a.value);
                            break;
                        case"v3":
                            r.uniforms[i].value = (new V).fromArray(a.value);
                            break;
                        case"v4":
                            r.uniforms[i].value = (new F).fromArray(a.value);
                            break;
                        case"m3":
                            r.uniforms[i].value = (new N).fromArray(a.value);
                        case"m4":
                            r.uniforms[i].value = (new Q).fromArray(a.value);
                            break;
                        default:
                            r.uniforms[i].value = a.value
                    }
                }
                if (void 0 !== e.defines && (r.defines = e.defines), void 0 !== e.vertexShader && (r.vertexShader = e.vertexShader), void 0 !== e.fragmentShader && (r.fragmentShader = e.fragmentShader), void 0 !== e.extensions) for (var o in e.extensions) r.extensions[o] = e.extensions[o];
                if (void 0 !== e.shading && (r.flatShading = 1 === e.shading), void 0 !== e.size && (r.size = e.size), void 0 !== e.sizeAttenuation && (r.sizeAttenuation = e.sizeAttenuation), void 0 !== e.map && (r.map = n(e.map)), void 0 !== e.matcap && (r.matcap = n(e.matcap)), void 0 !== e.alphaMap && (r.alphaMap = n(e.alphaMap)), void 0 !== e.bumpMap && (r.bumpMap = n(e.bumpMap)), void 0 !== e.bumpScale && (r.bumpScale = e.bumpScale), void 0 !== e.normalMap && (r.normalMap = n(e.normalMap)), void 0 !== e.normalMapType && (r.normalMapType = e.normalMapType), void 0 !== e.normalScale) {
                    var s = e.normalScale;
                    !1 === Array.isArray(s) && (s = [s, s]), r.normalScale = (new I).fromArray(s)
                }
                return void 0 !== e.displacementMap && (r.displacementMap = n(e.displacementMap)), void 0 !== e.displacementScale && (r.displacementScale = e.displacementScale), void 0 !== e.displacementBias && (r.displacementBias = e.displacementBias), void 0 !== e.roughnessMap && (r.roughnessMap = n(e.roughnessMap)), void 0 !== e.metalnessMap && (r.metalnessMap = n(e.metalnessMap)), void 0 !== e.emissiveMap && (r.emissiveMap = n(e.emissiveMap)), void 0 !== e.emissiveIntensity && (r.emissiveIntensity = e.emissiveIntensity), void 0 !== e.specularMap && (r.specularMap = n(e.specularMap)), void 0 !== e.envMap && (r.envMap = n(e.envMap)), void 0 !== e.envMapIntensity && (r.envMapIntensity = e.envMapIntensity), void 0 !== e.reflectivity && (r.reflectivity = e.reflectivity), void 0 !== e.refractionRatio && (r.refractionRatio = e.refractionRatio), void 0 !== e.lightMap && (r.lightMap = n(e.lightMap)), void 0 !== e.lightMapIntensity && (r.lightMapIntensity = e.lightMapIntensity), void 0 !== e.aoMap && (r.aoMap = n(e.aoMap)), void 0 !== e.aoMapIntensity && (r.aoMapIntensity = e.aoMapIntensity), void 0 !== e.gradientMap && (r.gradientMap = n(e.gradientMap)), void 0 !== e.clearcoatMap && (r.clearcoatMap = n(e.clearcoatMap)), void 0 !== e.clearcoatRoughnessMap && (r.clearcoatRoughnessMap = n(e.clearcoatRoughnessMap)), void 0 !== e.clearcoatNormalMap && (r.clearcoatNormalMap = n(e.clearcoatNormalMap)), void 0 !== e.clearcoatNormalScale && (r.clearcoatNormalScale = (new I).fromArray(e.clearcoatNormalScale)), r
            }, setTextures: function (e) {
                return this.textures = e, this
            }
        });
        var yc = {
            decodeText: function (e) {
                if ("undefined" != typeof TextDecoder) return (new TextDecoder).decode(e);
                for (var t = "", n = 0, r = e.length; n < r; n++) t += String.fromCharCode(e[n]);
                try {
                    return decodeURIComponent(escape(t))
                } catch (e) {
                    return t
                }
            }, extractUrlBase: function (e) {
                var t = e.lastIndexOf("/");
                return -1 === t ? "./" : e.substr(0, t + 1)
            }
        };

        function xc() {
            Dt.call(this), this.type = "InstancedBufferGeometry", this.instanceCount = 1 / 0
        }

        function bc(e, t, n, r) {
            "number" == typeof n && (r = n, n = !1, console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")), vt.call(this, e, t, n), this.meshPerAttribute = r || 1
        }

        function _c(e) {
            Ts.call(this, e)
        }

        xc.prototype = Object.assign(Object.create(Dt.prototype), {
            constructor: xc,
            isInstancedBufferGeometry: !0,
            copy: function (e) {
                return Dt.prototype.copy.call(this, e), this.instanceCount = e.instanceCount, this
            },
            clone: function () {
                return (new this.constructor).copy(this)
            },
            toJSON: function () {
                var e = Dt.prototype.toJSON.call(this);
                return e.instanceCount = this.instanceCount, e.isInstancedBufferGeometry = !0, e
            }
        }), bc.prototype = Object.assign(Object.create(vt.prototype), {
            constructor: bc,
            isInstancedBufferAttribute: !0,
            copy: function (e) {
                return vt.prototype.copy.call(this, e), this.meshPerAttribute = e.meshPerAttribute, this
            },
            toJSON: function () {
                var e = vt.prototype.toJSON.call(this);
                return e.meshPerAttribute = this.meshPerAttribute, e.isInstancedBufferAttribute = !0, e
            }
        }), _c.prototype = Object.assign(Object.create(Ts.prototype), {
            constructor: _c, load: function (e, t, n, r) {
                var i = this, a = new As(i.manager);
                a.setPath(i.path), a.load(e, (function (n) {
                    try {
                        t(i.parse(JSON.parse(n)))
                    } catch (t) {
                        r ? r(t) : console.error(t), i.manager.itemError(e)
                    }
                }), n, r)
            }, parse: function (e) {
                var t = e.isInstancedBufferGeometry ? new xc : new Dt, n = e.data.index;
                if (void 0 !== n) {
                    var r = new wc[n.type](n.array);
                    t.setIndex(new vt(r, 1))
                }
                var i = e.data.attributes;
                for (var a in i) {
                    var o = i[a],
                        s = (r = new wc[o.type](o.array), new (o.isInstancedBufferAttribute ? bc : vt)(r, o.itemSize, o.normalized));
                    void 0 !== o.name && (s.name = o.name), t.setAttribute(a, s)
                }
                var c = e.data.morphAttributes;
                if (c) for (var a in c) {
                    for (var l = c[a], u = [], h = 0, p = l.length; h < p; h++) {
                        o = l[h], s = new vt(r = new wc[o.type](o.array), o.itemSize, o.normalized);
                        void 0 !== o.name && (s.name = o.name), u.push(s)
                    }
                    t.morphAttributes[a] = u
                }
                e.data.morphTargetsRelative && (t.morphTargetsRelative = !0);
                var d = e.data.groups || e.data.drawcalls || e.data.offsets;
                if (void 0 !== d) {
                    h = 0;
                    for (var f = d.length; h !== f; ++h) {
                        var m = d[h];
                        t.addGroup(m.start, m.count, m.materialIndex)
                    }
                }
                var v = e.data.boundingSphere;
                if (void 0 !== v) {
                    var g = new V;
                    void 0 !== v.center && g.fromArray(v.center), t.boundingSphere = new Ne(g, v.radius)
                }
                return e.name && (t.name = e.name), e.userData && (t.userData = e.userData), t
            }
        });
        var wc = {
            Int8Array: Int8Array,
            Uint8Array: Uint8Array,
            Uint8ClampedArray: "undefined" != typeof Uint8ClampedArray ? Uint8ClampedArray : Uint8Array,
            Int16Array: Int16Array,
            Uint16Array: Uint16Array,
            Int32Array: Int32Array,
            Uint32Array: Uint32Array,
            Float32Array: Float32Array,
            Float64Array: Float64Array
        };

        function Mc(e) {
            Ts.call(this, e)
        }

        Mc.prototype = Object.assign(Object.create(Ts.prototype), {
            constructor: Mc, load: function (e, t, n, r) {
                var i = this, a = "" === this.path ? yc.extractUrlBase(e) : this.path;
                this.resourcePath = this.resourcePath || a;
                var o = new As(i.manager);
                o.setPath(this.path), o.load(e, (function (n) {
                    var a = null;
                    try {
                        a = JSON.parse(n)
                    } catch (t) {
                        return void 0 !== r && r(t), void console.error("THREE:ObjectLoader: Can't parse " + e + ".", t.message)
                    }
                    var o = a.metadata;
                    void 0 !== o && void 0 !== o.type && "geometry" !== o.type.toLowerCase() ? i.parse(a, t) : console.error("THREE.ObjectLoader: Can't load " + e)
                }), n, r)
            }, parse: function (e, t) {
                var n = this.parseShape(e.shapes), r = this.parseGeometries(e.geometries, n),
                    i = this.parseImages(e.images, (function () {
                        void 0 !== t && t(s)
                    })), a = this.parseTextures(e.textures, i), o = this.parseMaterials(e.materials, a),
                    s = this.parseObject(e.object, r, o);
                return e.animations && (s.animations = this.parseAnimations(e.animations)), void 0 !== e.images && 0 !== e.images.length || void 0 !== t && t(s), s
            }, parseShape: function (e) {
                var t = {};
                if (void 0 !== e) for (var n = 0, r = e.length; n < r; n++) {
                    var i = (new nc).fromJSON(e[n]);
                    t[i.uuid] = i
                }
                return t
            }, parseGeometries: function (e, t) {
                var n = {};
                if (void 0 !== e) for (var r = new _c, i = 0, a = e.length; i < a; i++) {
                    var o, s = e[i];
                    switch (s.type) {
                        case"PlaneGeometry":
                        case"PlaneBufferGeometry":
                            o = new Jo[s.type](s.width, s.height, s.widthSegments, s.heightSegments);
                            break;
                        case"BoxGeometry":
                        case"BoxBufferGeometry":
                        case"CubeGeometry":
                            o = new Jo[s.type](s.width, s.height, s.depth, s.widthSegments, s.heightSegments, s.depthSegments);
                            break;
                        case"CircleGeometry":
                        case"CircleBufferGeometry":
                            o = new Jo[s.type](s.radius, s.segments, s.thetaStart, s.thetaLength);
                            break;
                        case"CylinderGeometry":
                        case"CylinderBufferGeometry":
                            o = new Jo[s.type](s.radiusTop, s.radiusBottom, s.height, s.radialSegments, s.heightSegments, s.openEnded, s.thetaStart, s.thetaLength);
                            break;
                        case"ConeGeometry":
                        case"ConeBufferGeometry":
                            o = new Jo[s.type](s.radius, s.height, s.radialSegments, s.heightSegments, s.openEnded, s.thetaStart, s.thetaLength);
                            break;
                        case"SphereGeometry":
                        case"SphereBufferGeometry":
                            o = new Jo[s.type](s.radius, s.widthSegments, s.heightSegments, s.phiStart, s.phiLength, s.thetaStart, s.thetaLength);
                            break;
                        case"DodecahedronGeometry":
                        case"DodecahedronBufferGeometry":
                        case"IcosahedronGeometry":
                        case"IcosahedronBufferGeometry":
                        case"OctahedronGeometry":
                        case"OctahedronBufferGeometry":
                        case"TetrahedronGeometry":
                        case"TetrahedronBufferGeometry":
                            o = new Jo[s.type](s.radius, s.detail);
                            break;
                        case"RingGeometry":
                        case"RingBufferGeometry":
                            o = new Jo[s.type](s.innerRadius, s.outerRadius, s.thetaSegments, s.phiSegments, s.thetaStart, s.thetaLength);
                            break;
                        case"TorusGeometry":
                        case"TorusBufferGeometry":
                            o = new Jo[s.type](s.radius, s.tube, s.radialSegments, s.tubularSegments, s.arc);
                            break;
                        case"TorusKnotGeometry":
                        case"TorusKnotBufferGeometry":
                            o = new Jo[s.type](s.radius, s.tube, s.tubularSegments, s.radialSegments, s.p, s.q);
                            break;
                        case"TubeGeometry":
                        case"TubeBufferGeometry":
                            o = new Jo[s.type]((new $s[s.path.type]).fromJSON(s.path), s.tubularSegments, s.radius, s.radialSegments, s.closed);
                            break;
                        case"LatheGeometry":
                        case"LatheBufferGeometry":
                            o = new Jo[s.type](s.points, s.segments, s.phiStart, s.phiLength);
                            break;
                        case"PolyhedronGeometry":
                        case"PolyhedronBufferGeometry":
                            o = new Jo[s.type](s.vertices, s.indices, s.radius, s.details);
                            break;
                        case"ShapeGeometry":
                        case"ShapeBufferGeometry":
                            for (var c = [], l = 0, u = s.shapes.length; l < u; l++) {
                                var h = t[s.shapes[l]];
                                c.push(h)
                            }
                            o = new Jo[s.type](c, s.curveSegments);
                            break;
                        case"ExtrudeGeometry":
                        case"ExtrudeBufferGeometry":
                            for (c = [], l = 0, u = s.shapes.length; l < u; l++) {
                                h = t[s.shapes[l]];
                                c.push(h)
                            }
                            var p = s.options.extrudePath;
                            void 0 !== p && (s.options.extrudePath = (new $s[p.type]).fromJSON(p)), o = new Jo[s.type](c, s.options);
                            break;
                        case"BufferGeometry":
                        case"InstancedBufferGeometry":
                            o = r.parse(s);
                            break;
                        case"Geometry":
                            console.error('THREE.ObjectLoader: Loading "Geometry" is not supported anymore.');
                            break;
                        default:
                            console.warn('THREE.ObjectLoader: Unsupported geometry type "' + s.type + '"');
                            continue
                    }
                    o.uuid = s.uuid, void 0 !== s.name && (o.name = s.name), !0 === o.isBufferGeometry && void 0 !== s.userData && (o.userData = s.userData), n[s.uuid] = o
                }
                return n
            }, parseMaterials: function (e, t) {
                var n = {}, r = {};
                if (void 0 !== e) {
                    var i = new gc;
                    i.setTextures(t);
                    for (var a = 0, o = e.length; a < o; a++) {
                        var s = e[a];
                        if ("MultiMaterial" === s.type) {
                            for (var c = [], l = 0; l < s.materials.length; l++) {
                                var u = s.materials[l];
                                void 0 === n[u.uuid] && (n[u.uuid] = i.parse(u)), c.push(n[u.uuid])
                            }
                            r[s.uuid] = c
                        } else void 0 === n[s.uuid] && (n[s.uuid] = i.parse(s)), r[s.uuid] = n[s.uuid]
                    }
                }
                return r
            }, parseAnimations: function (e) {
                for (var t = [], n = 0; n < e.length; n++) {
                    var r = e[n], i = bs.parse(r);
                    void 0 !== r.uuid && (i.uuid = r.uuid), t.push(i)
                }
                return t
            }, parseImages: function (e, t) {
                var n = this, r = {};

                function i(e) {
                    return n.manager.itemStart(e), a.load(e, (function () {
                        n.manager.itemEnd(e)
                    }), void 0, (function () {
                        n.manager.itemError(e), n.manager.itemEnd(e)
                    }))
                }

                if (void 0 !== e && e.length > 0) {
                    var a = new Cs(new Ms(t));
                    a.setCrossOrigin(this.crossOrigin);
                    for (var o = 0, s = e.length; o < s; o++) {
                        var c = e[o], l = c.url;
                        if (Array.isArray(l)) {
                            r[c.uuid] = [];
                            for (var u = 0, h = l.length; u < h; u++) {
                                var p = l[u], d = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(p) ? p : n.resourcePath + p;
                                r[c.uuid].push(i(d))
                            }
                        } else {
                            d = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(c.url) ? c.url : n.resourcePath + c.url;
                            r[c.uuid] = i(d)
                        }
                    }
                }
                return r
            }, parseTextures: function (e, t) {
                function n(e, t) {
                    return "number" == typeof e ? e : (console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", e), t[e])
                }

                var r = {};
                if (void 0 !== e) for (var i = 0, a = e.length; i < a; i++) {
                    var o, s = e[i];
                    void 0 === s.image && console.warn('THREE.ObjectLoader: No "image" specified for', s.uuid), void 0 === t[s.image] && console.warn("THREE.ObjectLoader: Undefined image", s.image), (o = Array.isArray(t[s.image]) ? new Bn(t[s.image]) : new z(t[s.image])).needsUpdate = !0, o.uuid = s.uuid, void 0 !== s.name && (o.name = s.name), void 0 !== s.mapping && (o.mapping = n(s.mapping, Tc)), void 0 !== s.offset && o.offset.fromArray(s.offset), void 0 !== s.repeat && o.repeat.fromArray(s.repeat), void 0 !== s.center && o.center.fromArray(s.center), void 0 !== s.rotation && (o.rotation = s.rotation), void 0 !== s.wrap && (o.wrapS = n(s.wrap[0], Ec), o.wrapT = n(s.wrap[1], Ec)), void 0 !== s.format && (o.format = s.format), void 0 !== s.type && (o.type = s.type), void 0 !== s.encoding && (o.encoding = s.encoding), void 0 !== s.minFilter && (o.minFilter = n(s.minFilter, Ac)), void 0 !== s.magFilter && (o.magFilter = n(s.magFilter, Ac)), void 0 !== s.anisotropy && (o.anisotropy = s.anisotropy), void 0 !== s.flipY && (o.flipY = s.flipY), void 0 !== s.premultiplyAlpha && (o.premultiplyAlpha = s.premultiplyAlpha), void 0 !== s.unpackAlignment && (o.unpackAlignment = s.unpackAlignment), r[s.uuid] = o
                }
                return r
            }, parseObject: function (e, t, n) {
                var r;

                function i(e) {
                    return void 0 === t[e] && console.warn("THREE.ObjectLoader: Undefined geometry", e), t[e]
                }

                function a(e) {
                    if (void 0 !== e) {
                        if (Array.isArray(e)) {
                            for (var t = [], r = 0, i = e.length; r < i; r++) {
                                var a = e[r];
                                void 0 === n[a] && console.warn("THREE.ObjectLoader: Undefined material", a), t.push(n[a])
                            }
                            return t
                        }
                        return void 0 === n[e] && console.warn("THREE.ObjectLoader: Undefined material", e), n[e]
                    }
                }

                switch (e.type) {
                    case"Scene":
                        r = new ge, void 0 !== e.background && Number.isInteger(e.background) && (r.background = new st(e.background)), void 0 !== e.fog && ("Fog" === e.fog.type ? r.fog = new Ai(e.fog.color, e.fog.near, e.fog.far) : "FogExp2" === e.fog.type && (r.fog = new Ei(e.fog.color, e.fog.density)));
                        break;
                    case"PerspectiveCamera":
                        r = new fn(e.fov, e.aspect, e.near, e.far), void 0 !== e.focus && (r.focus = e.focus), void 0 !== e.zoom && (r.zoom = e.zoom), void 0 !== e.filmGauge && (r.filmGauge = e.filmGauge), void 0 !== e.filmOffset && (r.filmOffset = e.filmOffset), void 0 !== e.view && (r.view = Object.assign({}, e.view));
                        break;
                    case"OrthographicCamera":
                        r = new uc(e.left, e.right, e.top, e.bottom, e.near, e.far), void 0 !== e.zoom && (r.zoom = e.zoom), void 0 !== e.view && (r.view = Object.assign({}, e.view));
                        break;
                    case"AmbientLight":
                        r = new dc(e.color, e.intensity);
                        break;
                    case"DirectionalLight":
                        r = new pc(e.color, e.intensity);
                        break;
                    case"PointLight":
                        r = new lc(e.color, e.intensity, e.distance, e.decay);
                        break;
                    case"RectAreaLight":
                        r = new fc(e.color, e.intensity, e.width, e.height);
                        break;
                    case"SpotLight":
                        r = new sc(e.color, e.intensity, e.distance, e.angle, e.penumbra, e.decay);
                        break;
                    case"HemisphereLight":
                        r = new ic(e.color, e.groundColor, e.intensity);
                        break;
                    case"LightProbe":
                        r = (new vc).fromJSON(e);
                        break;
                    case"SkinnedMesh":
                        console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");
                    case"Mesh":
                        r = new $t(o = i(e.geometry), s = a(e.material));
                        break;
                    case"InstancedMesh":
                        var o = i(e.geometry), s = a(e.material), c = e.count, l = e.instanceMatrix;
                        (r = new ua(o, s, c)).instanceMatrix = new vt(new Float32Array(l.array), 16);
                        break;
                    case"LOD":
                        r = new ea;
                        break;
                    case"Line":
                        r = new ga(i(e.geometry), a(e.material), e.mode);
                        break;
                    case"LineLoop":
                        r = new _a(i(e.geometry), a(e.material));
                        break;
                    case"LineSegments":
                        r = new ba(i(e.geometry), a(e.material));
                        break;
                    case"PointCloud":
                    case"Points":
                        r = new Aa(i(e.geometry), a(e.material));
                        break;
                    case"Sprite":
                        r = new Wi(a(e.material));
                        break;
                    case"Group":
                        r = new _i;
                        break;
                    default:
                        r = new ve
                }
                if (r.uuid = e.uuid, void 0 !== e.name && (r.name = e.name), void 0 !== e.matrix ? (r.matrix.fromArray(e.matrix), void 0 !== e.matrixAutoUpdate && (r.matrixAutoUpdate = e.matrixAutoUpdate), r.matrixAutoUpdate && r.matrix.decompose(r.position, r.quaternion, r.scale)) : (void 0 !== e.position && r.position.fromArray(e.position), void 0 !== e.rotation && r.rotation.fromArray(e.rotation), void 0 !== e.quaternion && r.quaternion.fromArray(e.quaternion), void 0 !== e.scale && r.scale.fromArray(e.scale)), void 0 !== e.castShadow && (r.castShadow = e.castShadow), void 0 !== e.receiveShadow && (r.receiveShadow = e.receiveShadow), e.shadow && (void 0 !== e.shadow.bias && (r.shadow.bias = e.shadow.bias), void 0 !== e.shadow.radius && (r.shadow.radius = e.shadow.radius), void 0 !== e.shadow.mapSize && r.shadow.mapSize.fromArray(e.shadow.mapSize), void 0 !== e.shadow.camera && (r.shadow.camera = this.parseObject(e.shadow.camera))), void 0 !== e.visible && (r.visible = e.visible), void 0 !== e.frustumCulled && (r.frustumCulled = e.frustumCulled), void 0 !== e.renderOrder && (r.renderOrder = e.renderOrder), void 0 !== e.userData && (r.userData = e.userData), void 0 !== e.layers && (r.layers.mask = e.layers), void 0 !== e.children) for (var u = e.children, h = 0; h < u.length; h++) r.add(this.parseObject(u[h], t, n));
                if ("LOD" === e.type) {
                    void 0 !== e.autoUpdate && (r.autoUpdate = e.autoUpdate);
                    for (var p = e.levels, d = 0; d < p.length; d++) {
                        var f = p[d], m = r.getObjectByProperty("uuid", f.object);
                        void 0 !== m && r.addLevel(m, f.distance)
                    }
                }
                return r
            }
        });
        var Sc, Tc = {
            UVMapping: 300,
            CubeReflectionMapping: 301,
            CubeRefractionMapping: 302,
            EquirectangularReflectionMapping: 303,
            EquirectangularRefractionMapping: 304,
            SphericalReflectionMapping: 305,
            CubeUVReflectionMapping: 306,
            CubeUVRefractionMapping: 307
        }, Ec = {RepeatWrapping: c, ClampToEdgeWrapping: l, MirroredRepeatWrapping: u}, Ac = {
            NearestFilter: h,
            NearestMipmapNearestFilter: p,
            NearestMipmapLinearFilter: d,
            LinearFilter: f,
            LinearMipmapNearestFilter: m,
            LinearMipmapLinearFilter: v
        };

        function Lc(e) {
            "undefined" == typeof createImageBitmap && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."), "undefined" == typeof fetch && console.warn("THREE.ImageBitmapLoader: fetch() not supported."), Ts.call(this, e), this.options = void 0
        }

        function Rc() {
            this.type = "ShapePath", this.color = new st, this.subPaths = [], this.currentPath = null
        }

        function Pc(e) {
            this.type = "Font", this.data = e
        }

        function Cc(e, t, n, r, i) {
            var a = i.glyphs[e] || i.glyphs["?"];
            if (a) {
                var o, s, c, l, u, h, p, d, f = new Rc;
                if (a.o) for (var m = a._cachedOutline || (a._cachedOutline = a.o.split(" ")), v = 0, g = m.length; v < g;) {
                    switch (m[v++]) {
                        case"m":
                            o = m[v++] * t + n, s = m[v++] * t + r, f.moveTo(o, s);
                            break;
                        case"l":
                            o = m[v++] * t + n, s = m[v++] * t + r, f.lineTo(o, s);
                            break;
                        case"q":
                            c = m[v++] * t + n, l = m[v++] * t + r, u = m[v++] * t + n, h = m[v++] * t + r, f.quadraticCurveTo(u, h, c, l);
                            break;
                        case"b":
                            c = m[v++] * t + n, l = m[v++] * t + r, u = m[v++] * t + n, h = m[v++] * t + r, p = m[v++] * t + n, d = m[v++] * t + r, f.bezierCurveTo(u, h, p, d, c, l)
                    }
                }
                return {offsetX: a.ha * t, path: f}
            }
            console.error('THREE.Font: character "' + e + '" does not exists in font family ' + i.familyName + ".")
        }

        function Oc(e) {
            Ts.call(this, e)
        }

        Lc.prototype = Object.assign(Object.create(Ts.prototype), {
            constructor: Lc, setOptions: function (e) {
                return this.options = e, this
            }, load: function (e, t, n, r) {
                void 0 === e && (e = ""), void 0 !== this.path && (e = this.path + e), e = this.manager.resolveURL(e);
                var i = this, a = ws.get(e);
                if (void 0 !== a) return i.manager.itemStart(e), setTimeout((function () {
                    t && t(a), i.manager.itemEnd(e)
                }), 0), a;
                fetch(e).then((function (e) {
                    return e.blob()
                })).then((function (e) {
                    return void 0 === i.options ? createImageBitmap(e) : createImageBitmap(e, i.options)
                })).then((function (n) {
                    ws.add(e, n), t && t(n), i.manager.itemEnd(e)
                })).catch((function (t) {
                    r && r(t), i.manager.itemError(e), i.manager.itemEnd(e)
                })), i.manager.itemStart(e)
            }
        }), Object.assign(Rc.prototype, {
            moveTo: function (e, t) {
                return this.currentPath = new tc, this.subPaths.push(this.currentPath), this.currentPath.moveTo(e, t), this
            }, lineTo: function (e, t) {
                return this.currentPath.lineTo(e, t), this
            }, quadraticCurveTo: function (e, t, n, r) {
                return this.currentPath.quadraticCurveTo(e, t, n, r), this
            }, bezierCurveTo: function (e, t, n, r, i, a) {
                return this.currentPath.bezierCurveTo(e, t, n, r, i, a), this
            }, splineThru: function (e) {
                return this.currentPath.splineThru(e), this
            }, toShapes: function (e, t) {
                function n(e) {
                    for (var t = [], n = 0, r = e.length; n < r; n++) {
                        var i = e[n], a = new nc;
                        a.curves = i.curves, t.push(a)
                    }
                    return t
                }

                function r(e, t) {
                    for (var n = t.length, r = !1, i = n - 1, a = 0; a < n; i = a++) {
                        var o = t[i], s = t[a], c = s.x - o.x, l = s.y - o.y;
                        if (Math.abs(l) > Number.EPSILON) {
                            if (l < 0 && (o = t[a], c = -c, s = t[i], l = -l), e.y < o.y || e.y > s.y) continue;
                            if (e.y === o.y) {
                                if (e.x === o.x) return !0
                            } else {
                                var u = l * (e.x - o.x) - c * (e.y - o.y);
                                if (0 === u) return !0;
                                if (u < 0) continue;
                                r = !r
                            }
                        } else {
                            if (e.y !== o.y) continue;
                            if (s.x <= e.x && e.x <= o.x || o.x <= e.x && e.x <= s.x) return !0
                        }
                    }
                    return r
                }

                var i = So.isClockWise, a = this.subPaths;
                if (0 === a.length) return [];
                if (!0 === t) return n(a);
                var o, s, c, l = [];
                if (1 === a.length) return s = a[0], (c = new nc).curves = s.curves, l.push(c), l;
                var u = !i(a[0].getPoints());
                u = e ? !u : u;
                var h, p, d = [], f = [], m = [], v = 0;
                f[v] = void 0, m[v] = [];
                for (var g = 0, y = a.length; g < y; g++) o = i(h = (s = a[g]).getPoints()), (o = e ? !o : o) ? (!u && f[v] && v++, f[v] = {
                    s: new nc,
                    p: h
                }, f[v].s.curves = s.curves, u && v++, m[v] = []) : m[v].push({h: s, p: h[0]});
                if (!f[0]) return n(a);
                if (f.length > 1) {
                    for (var x = !1, b = [], _ = 0, w = f.length; _ < w; _++) d[_] = [];
                    for (_ = 0, w = f.length; _ < w; _++) for (var M = m[_], S = 0; S < M.length; S++) {
                        for (var T = M[S], E = !0, A = 0; A < f.length; A++) r(T.p, f[A].p) && (_ !== A && b.push({
                            froms: _,
                            tos: A,
                            hole: S
                        }), E ? (E = !1, d[A].push(T)) : x = !0);
                        E && d[_].push(T)
                    }
                    b.length > 0 && (x || (m = d))
                }
                g = 0;
                for (var L = f.length; g < L; g++) {
                    c = f[g].s, l.push(c);
                    for (var R = 0, P = (p = m[g]).length; R < P; R++) c.holes.push(p[R].h)
                }
                return l
            }
        }), Object.assign(Pc.prototype, {
            isFont: !0, generateShapes: function (e, t) {
                void 0 === t && (t = 100);
                for (var n = [], r = function (e, t, n) {
                    for (var r = Array.from ? Array.from(e) : String(e).split(""), i = t / n.resolution, a = (n.boundingBox.yMax - n.boundingBox.yMin + n.underlineThickness) * i, o = [], s = 0, c = 0, l = 0; l < r.length; l++) {
                        var u = r[l];
                        if ("\n" === u) s = 0, c -= a; else {
                            var h = Cc(u, i, s, c, n);
                            s += h.offsetX, o.push(h.path)
                        }
                    }
                    return o
                }(e, t, this.data), i = 0, a = r.length; i < a; i++) Array.prototype.push.apply(n, r[i].toShapes());
                return n
            }
        }), Oc.prototype = Object.assign(Object.create(Ts.prototype), {
            constructor: Oc, load: function (e, t, n, r) {
                var i = this, a = new As(this.manager);
                a.setPath(this.path), a.load(e, (function (e) {
                    var n;
                    try {
                        n = JSON.parse(e)
                    } catch (t) {
                        console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."), n = JSON.parse(e.substring(65, e.length - 2))
                    }
                    var r = i.parse(n);
                    t && t(r)
                }), n, r)
            }, parse: function (e) {
                return new Pc(e)
            }
        });
        var Ic = {
            getContext: function () {
                return void 0 === Sc && (Sc = new (window.AudioContext || window.webkitAudioContext)), Sc
            }, setContext: function (e) {
                Sc = e
            }
        };

        function Nc(e) {
            Ts.call(this, e)
        }

        function Dc(e, t, n) {
            vc.call(this, void 0, n);
            var r = (new st).set(e), i = (new st).set(t), a = new V(r.r, r.g, r.b), o = new V(i.r, i.g, i.b),
                s = Math.sqrt(Math.PI), c = s * Math.sqrt(.75);
            this.sh.coefficients[0].copy(a).add(o).multiplyScalar(s), this.sh.coefficients[1].copy(a).sub(o).multiplyScalar(c)
        }

        function Uc(e, t) {
            vc.call(this, void 0, t);
            var n = (new st).set(e);
            this.sh.coefficients[0].set(n.r, n.g, n.b).multiplyScalar(2 * Math.sqrt(Math.PI))
        }

        Nc.prototype = Object.assign(Object.create(Ts.prototype), {
            constructor: Nc, load: function (e, t, n, r) {
                var i = this, a = new As(i.manager);
                a.setResponseType("arraybuffer"), a.setPath(i.path), a.load(e, (function (n) {
                    try {
                        var a = n.slice(0);
                        Ic.getContext().decodeAudioData(a, (function (e) {
                            t(e)
                        }))
                    } catch (t) {
                        r ? r(t) : console.error(t), i.manager.itemError(e)
                    }
                }), n, r)
            }
        }), Dc.prototype = Object.assign(Object.create(vc.prototype), {
            constructor: Dc,
            isHemisphereLightProbe: !0,
            copy: function (e) {
                return vc.prototype.copy.call(this, e), this
            },
            toJSON: function (e) {
                return vc.prototype.toJSON.call(this, e)
            }
        }), Uc.prototype = Object.assign(Object.create(vc.prototype), {
            constructor: Uc,
            isAmbientLightProbe: !0,
            copy: function (e) {
                return vc.prototype.copy.call(this, e), this
            },
            toJSON: function (e) {
                return vc.prototype.toJSON.call(this, e)
            }
        });
        var zc = new Q, Fc = new Q;

        function Bc(e) {
            this.autoStart = void 0 === e || e, this.startTime = 0, this.oldTime = 0, this.elapsedTime = 0, this.running = !1
        }

        Object.assign(function () {
            this.type = "StereoCamera", this.aspect = 1, this.eyeSep = .064, this.cameraL = new fn, this.cameraL.layers.enable(1), this.cameraL.matrixAutoUpdate = !1, this.cameraR = new fn, this.cameraR.layers.enable(2), this.cameraR.matrixAutoUpdate = !1, this._cache = {
                focus: null,
                fov: null,
                aspect: null,
                near: null,
                far: null,
                zoom: null,
                eyeSep: null
            }
        }.prototype, {
            update: function (e) {
                var t = this._cache;
                if (t.focus !== e.focus || t.fov !== e.fov || t.aspect !== e.aspect * this.aspect || t.near !== e.near || t.far !== e.far || t.zoom !== e.zoom || t.eyeSep !== this.eyeSep) {
                    t.focus = e.focus, t.fov = e.fov, t.aspect = e.aspect * this.aspect, t.near = e.near, t.far = e.far, t.zoom = e.zoom, t.eyeSep = this.eyeSep;
                    var n, r, i = e.projectionMatrix.clone(), a = t.eyeSep / 2, o = a * t.near / t.focus,
                        s = t.near * Math.tan(O.DEG2RAD * t.fov * .5) / t.zoom;
                    Fc.elements[12] = -a, zc.elements[12] = a, n = -s * t.aspect + o, r = s * t.aspect + o, i.elements[0] = 2 * t.near / (r - n), i.elements[8] = (r + n) / (r - n), this.cameraL.projectionMatrix.copy(i), n = -s * t.aspect - o, r = s * t.aspect - o, i.elements[0] = 2 * t.near / (r - n), i.elements[8] = (r + n) / (r - n), this.cameraR.projectionMatrix.copy(i)
                }
                this.cameraL.matrixWorld.copy(e.matrixWorld).multiply(Fc), this.cameraR.matrixWorld.copy(e.matrixWorld).multiply(zc)
            }
        }), Object.assign(Bc.prototype, {
            start: function () {
                this.startTime = ("undefined" == typeof performance ? Date : performance).now(), this.oldTime = this.startTime, this.elapsedTime = 0, this.running = !0
            }, stop: function () {
                this.getElapsedTime(), this.running = !1, this.autoStart = !1
            }, getElapsedTime: function () {
                return this.getDelta(), this.elapsedTime
            }, getDelta: function () {
                var e = 0;
                if (this.autoStart && !this.running) return this.start(), 0;
                if (this.running) {
                    var t = ("undefined" == typeof performance ? Date : performance).now();
                    e = (t - this.oldTime) / 1e3, this.oldTime = t, this.elapsedTime += e
                }
                return e
            }
        });
        var Hc = new V, Gc = new G, kc = new V, jc = new V;

        function Vc() {
            ve.call(this), this.type = "AudioListener", this.context = Ic.getContext(), this.gain = this.context.createGain(), this.gain.connect(this.context.destination), this.filter = null, this.timeDelta = 0, this._clock = new Bc
        }

        function Wc(e) {
            ve.call(this), this.type = "Audio", this.listener = e, this.context = e.context, this.gain = this.context.createGain(), this.gain.connect(e.getInput()), this.autoplay = !1, this.buffer = null, this.detune = 0, this.loop = !1, this.loopStart = 0, this.loopEnd = 0, this.offset = 0, this.duration = void 0, this.playbackRate = 1, this.isPlaying = !1, this.hasPlaybackControl = !0, this.sourceType = "empty", this._startedAt = 0, this._progress = 0, this.filters = []
        }

        Vc.prototype = Object.assign(Object.create(ve.prototype), {
            constructor: Vc, getInput: function () {
                return this.gain
            }, removeFilter: function () {
                return null !== this.filter && (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination), this.gain.connect(this.context.destination), this.filter = null), this
            }, getFilter: function () {
                return this.filter
            }, setFilter: function (e) {
                return null !== this.filter ? (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination), this.filter = e, this.gain.connect(this.filter), this.filter.connect(this.context.destination), this
            }, getMasterVolume: function () {
                return this.gain.gain.value
            }, setMasterVolume: function (e) {
                return this.gain.gain.setTargetAtTime(e, this.context.currentTime, .01), this
            }, updateMatrixWorld: function (e) {
                ve.prototype.updateMatrixWorld.call(this, e);
                var t = this.context.listener, n = this.up;
                if (this.timeDelta = this._clock.getDelta(), this.matrixWorld.decompose(Hc, Gc, kc), jc.set(0, 0, -1).applyQuaternion(Gc), t.positionX) {
                    var r = this.context.currentTime + this.timeDelta;
                    t.positionX.linearRampToValueAtTime(Hc.x, r), t.positionY.linearRampToValueAtTime(Hc.y, r), t.positionZ.linearRampToValueAtTime(Hc.z, r), t.forwardX.linearRampToValueAtTime(jc.x, r), t.forwardY.linearRampToValueAtTime(jc.y, r), t.forwardZ.linearRampToValueAtTime(jc.z, r), t.upX.linearRampToValueAtTime(n.x, r), t.upY.linearRampToValueAtTime(n.y, r), t.upZ.linearRampToValueAtTime(n.z, r)
                } else t.setPosition(Hc.x, Hc.y, Hc.z), t.setOrientation(jc.x, jc.y, jc.z, n.x, n.y, n.z)
            }
        }), Wc.prototype = Object.assign(Object.create(ve.prototype), {
            constructor: Wc, getOutput: function () {
                return this.gain
            }, setNodeSource: function (e) {
                return this.hasPlaybackControl = !1, this.sourceType = "audioNode", this.source = e, this.connect(), this
            }, setMediaElementSource: function (e) {
                return this.hasPlaybackControl = !1, this.sourceType = "mediaNode", this.source = this.context.createMediaElementSource(e), this.connect(), this
            }, setMediaStreamSource: function (e) {
                return this.hasPlaybackControl = !1, this.sourceType = "mediaStreamNode", this.source = this.context.createMediaStreamSource(e), this.connect(), this
            }, setBuffer: function (e) {
                return this.buffer = e, this.sourceType = "buffer", this.autoplay && this.play(), this
            }, play: function (e) {
                if (void 0 === e && (e = 0), !0 !== this.isPlaying) {
                    if (!1 !== this.hasPlaybackControl) {
                        this._startedAt = this.context.currentTime + e;
                        var t = this.context.createBufferSource();
                        return t.buffer = this.buffer, t.loop = this.loop, t.loopStart = this.loopStart, t.loopEnd = this.loopEnd, t.onended = this.onEnded.bind(this), t.start(this._startedAt, this._progress + this.offset, this.duration), this.isPlaying = !0, this.source = t, this.setDetune(this.detune), this.setPlaybackRate(this.playbackRate), this.connect()
                    }
                    console.warn("THREE.Audio: this Audio has no playback control.")
                } else console.warn("THREE.Audio: Audio is already playing.")
            }, pause: function () {
                if (!1 !== this.hasPlaybackControl) return !0 === this.isPlaying && (this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate, !0 === this.loop && (this._progress = this._progress % (this.duration || this.buffer.duration)), this.source.stop(), this.source.onended = null, this.isPlaying = !1), this;
                console.warn("THREE.Audio: this Audio has no playback control.")
            }, stop: function () {
                if (!1 !== this.hasPlaybackControl) return this._progress = 0, this.source.stop(), this.source.onended = null, this.isPlaying = !1, this;
                console.warn("THREE.Audio: this Audio has no playback control.")
            }, connect: function () {
                if (this.filters.length > 0) {
                    this.source.connect(this.filters[0]);
                    for (var e = 1, t = this.filters.length; e < t; e++) this.filters[e - 1].connect(this.filters[e]);
                    this.filters[this.filters.length - 1].connect(this.getOutput())
                } else this.source.connect(this.getOutput());
                return this
            }, disconnect: function () {
                if (this.filters.length > 0) {
                    this.source.disconnect(this.filters[0]);
                    for (var e = 1, t = this.filters.length; e < t; e++) this.filters[e - 1].disconnect(this.filters[e]);
                    this.filters[this.filters.length - 1].disconnect(this.getOutput())
                } else this.source.disconnect(this.getOutput());
                return this
            }, getFilters: function () {
                return this.filters
            }, setFilters: function (e) {
                return e || (e = []), !0 === this.isPlaying ? (this.disconnect(), this.filters = e, this.connect()) : this.filters = e, this
            }, setDetune: function (e) {
                if (this.detune = e, void 0 !== this.source.detune) return !0 === this.isPlaying && this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, .01), this
            }, getDetune: function () {
                return this.detune
            }, getFilter: function () {
                return this.getFilters()[0]
            }, setFilter: function (e) {
                return this.setFilters(e ? [e] : [])
            }, setPlaybackRate: function (e) {
                if (!1 !== this.hasPlaybackControl) return this.playbackRate = e, !0 === this.isPlaying && this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, .01), this;
                console.warn("THREE.Audio: this Audio has no playback control.")
            }, getPlaybackRate: function () {
                return this.playbackRate
            }, onEnded: function () {
                this.isPlaying = !1
            }, getLoop: function () {
                return !1 === this.hasPlaybackControl ? (console.warn("THREE.Audio: this Audio has no playback control."), !1) : this.loop
            }, setLoop: function (e) {
                if (!1 !== this.hasPlaybackControl) return this.loop = e, !0 === this.isPlaying && (this.source.loop = this.loop), this;
                console.warn("THREE.Audio: this Audio has no playback control.")
            }, setLoopStart: function (e) {
                return this.loopStart = e, this
            }, setLoopEnd: function (e) {
                return this.loopEnd = e, this
            }, getVolume: function () {
                return this.gain.gain.value
            }, setVolume: function (e) {
                return this.gain.gain.setTargetAtTime(e, this.context.currentTime, .01), this
            }
        });
        var qc = new V, Xc = new G, Yc = new V, Jc = new V;

        function Zc(e) {
            Wc.call(this, e), this.panner = this.context.createPanner(), this.panner.panningModel = "HRTF", this.panner.connect(this.gain)
        }

        function Kc(e, t) {
            this.analyser = e.context.createAnalyser(), this.analyser.fftSize = void 0 !== t ? t : 2048, this.data = new Uint8Array(this.analyser.frequencyBinCount), e.getOutput().connect(this.analyser)
        }

        function Qc(e, t, n) {
            var r, i, a;
            switch (this.binding = e, this.valueSize = n, t) {
                case"quaternion":
                    r = this._slerp, i = this._slerpAdditive, a = this._setAdditiveIdentityQuaternion, this.buffer = new Float64Array(6 * n), this._workIndex = 5;
                    break;
                case"string":
                case"bool":
                    r = this._select, i = this._select, a = this._setAdditiveIdentityOther, this.buffer = new Array(5 * n);
                    break;
                default:
                    r = this._lerp, i = this._lerpAdditive, a = this._setAdditiveIdentityNumeric, this.buffer = new Float64Array(5 * n)
            }
            this._mixBufferRegion = r, this._mixBufferRegionAdditive = i, this._setIdentity = a, this._origIndex = 3, this._addIndex = 4, this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, this.useCount = 0, this.referenceCount = 0
        }

        Zc.prototype = Object.assign(Object.create(Wc.prototype), {
            constructor: Zc, getOutput: function () {
                return this.panner
            }, getRefDistance: function () {
                return this.panner.refDistance
            }, setRefDistance: function (e) {
                return this.panner.refDistance = e, this
            }, getRolloffFactor: function () {
                return this.panner.rolloffFactor
            }, setRolloffFactor: function (e) {
                return this.panner.rolloffFactor = e, this
            }, getDistanceModel: function () {
                return this.panner.distanceModel
            }, setDistanceModel: function (e) {
                return this.panner.distanceModel = e, this
            }, getMaxDistance: function () {
                return this.panner.maxDistance
            }, setMaxDistance: function (e) {
                return this.panner.maxDistance = e, this
            }, setDirectionalCone: function (e, t, n) {
                return this.panner.coneInnerAngle = e, this.panner.coneOuterAngle = t, this.panner.coneOuterGain = n, this
            }, updateMatrixWorld: function (e) {
                if (ve.prototype.updateMatrixWorld.call(this, e), !0 !== this.hasPlaybackControl || !1 !== this.isPlaying) {
                    this.matrixWorld.decompose(qc, Xc, Yc), Jc.set(0, 0, 1).applyQuaternion(Xc);
                    var t = this.panner;
                    if (t.positionX) {
                        var n = this.context.currentTime + this.listener.timeDelta;
                        t.positionX.linearRampToValueAtTime(qc.x, n), t.positionY.linearRampToValueAtTime(qc.y, n), t.positionZ.linearRampToValueAtTime(qc.z, n), t.orientationX.linearRampToValueAtTime(Jc.x, n), t.orientationY.linearRampToValueAtTime(Jc.y, n), t.orientationZ.linearRampToValueAtTime(Jc.z, n)
                    } else t.setPosition(qc.x, qc.y, qc.z), t.setOrientation(Jc.x, Jc.y, Jc.z)
                }
            }
        }), Object.assign(Kc.prototype, {
            getFrequencyData: function () {
                return this.analyser.getByteFrequencyData(this.data), this.data
            }, getAverageFrequency: function () {
                for (var e = 0, t = this.getFrequencyData(), n = 0; n < t.length; n++) e += t[n];
                return e / t.length
            }
        }), Object.assign(Qc.prototype, {
            accumulate: function (e, t) {
                var n = this.buffer, r = this.valueSize, i = e * r + r, a = this.cumulativeWeight;
                if (0 === a) {
                    for (var o = 0; o !== r; ++o) n[i + o] = n[o];
                    a = t
                } else {
                    var s = t / (a += t);
                    this._mixBufferRegion(n, i, 0, s, r)
                }
                this.cumulativeWeight = a
            }, accumulateAdditive: function (e) {
                var t = this.buffer, n = this.valueSize, r = n * this._addIndex;
                0 === this.cumulativeWeightAdditive && this._setIdentity(), this._mixBufferRegionAdditive(t, r, 0, e, n), this.cumulativeWeightAdditive += e
            }, apply: function (e) {
                var t = this.valueSize, n = this.buffer, r = e * t + t, i = this.cumulativeWeight,
                    a = this.cumulativeWeightAdditive, o = this.binding;
                if (this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, i < 1) {
                    var s = t * this._origIndex;
                    this._mixBufferRegion(n, r, s, 1 - i, t)
                }
                a > 0 && this._mixBufferRegionAdditive(n, r, this._addIndex * t, 1, t);
                for (var c = t, l = t + t; c !== l; ++c) if (n[c] !== n[c + t]) {
                    o.setValue(n, r);
                    break
                }
            }, saveOriginalState: function () {
                var e = this.binding, t = this.buffer, n = this.valueSize, r = n * this._origIndex;
                e.getValue(t, r);
                for (var i = n, a = r; i !== a; ++i) t[i] = t[r + i % n];
                this._setIdentity(), this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0
            }, restoreOriginalState: function () {
                var e = 3 * this.valueSize;
                this.binding.setValue(this.buffer, e)
            }, _setAdditiveIdentityNumeric: function () {
                for (var e = this._addIndex * this.valueSize, t = e + this.valueSize, n = e; n < t; n++) this.buffer[n] = 0
            }, _setAdditiveIdentityQuaternion: function () {
                this._setAdditiveIdentityNumeric(), this.buffer[4 * this._addIndex + 3] = 1
            }, _setAdditiveIdentityOther: function () {
                for (var e = this._origIndex * this.valueSize, t = this._addIndex * this.valueSize, n = 0; n < this.valueSize; n++) this.buffer[t + n] = this.buffer[e + n]
            }, _select: function (e, t, n, r, i) {
                if (r >= .5) for (var a = 0; a !== i; ++a) e[t + a] = e[n + a]
            }, _slerp: function (e, t, n, r) {
                G.slerpFlat(e, t, e, t, e, n, r)
            }, _slerpAdditive: function (e, t, n, r, i) {
                var a = this._workIndex * i;
                G.multiplyQuaternionsFlat(e, a, e, t, e, n), G.slerpFlat(e, t, e, t, e, a, r)
            }, _lerp: function (e, t, n, r, i) {
                for (var a = 1 - r, o = 0; o !== i; ++o) {
                    var s = t + o;
                    e[s] = e[s] * a + e[n + o] * r
                }
            }, _lerpAdditive: function (e, t, n, r, i) {
                for (var a = 0; a !== i; ++a) {
                    var o = t + a;
                    e[o] = e[o] + e[n + a] * r
                }
            }
        });
        var $c = new RegExp("[\\[\\]\\.:\\/]", "g"), el = "[^" + "\\[\\]\\.:\\/".replace("\\.", "") + "]",
            tl = /((?:WC+[\/:])*)/.source.replace("WC", "[^\\[\\]\\.:\\/]"), nl = /(WCOD+)?/.source.replace("WCOD", el),
            rl = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", "[^\\[\\]\\.:\\/]"),
            il = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", "[^\\[\\]\\.:\\/]"),
            al = new RegExp("^" + tl + nl + rl + il + "$"), ol = ["material", "materials", "bones"];

        function sl(e, t, n) {
            var r = n || cl.parseTrackName(t);
            this._targetGroup = e, this._bindings = e.subscribe_(t, r)
        }

        function cl(e, t, n) {
            this.path = t, this.parsedPath = n || cl.parseTrackName(t), this.node = cl.findNode(e, this.parsedPath.nodeName) || e, this.rootNode = e
        }

        function ll(e, t, n, r) {
            this._mixer = e, this._clip = t, this._localRoot = n || null, this.blendMode = r || t.blendMode;
            for (var i = t.tracks, a = i.length, o = new Array(a), s = {
                endingStart: 2400,
                endingEnd: 2400
            }, c = 0; c !== a; ++c) {
                var l = i[c].createInterpolant(null);
                o[c] = l, l.settings = s
            }
            this._interpolantSettings = s, this._interpolants = o, this._propertyBindings = new Array(a), this._cacheIndex = null, this._byClipCacheIndex = null, this._timeScaleInterpolant = null, this._weightInterpolant = null, this.loop = _, this._loopCount = -1, this._startTime = null, this.time = 0, this.timeScale = 1, this._effectiveTimeScale = 1, this.weight = 1, this._effectiveWeight = 1, this.repetitions = 1 / 0, this.paused = !1, this.enabled = !0, this.clampWhenFinished = !1, this.zeroSlopeAtStart = !0, this.zeroSlopeAtEnd = !0
        }

        function ul(e) {
            this._root = e, this._initMemoryManager(), this._accuIndex = 0, this.time = 0, this.timeScale = 1
        }

        function hl(e) {
            "string" == typeof e && (console.warn("THREE.Uniform: Type parameter is no longer needed."), e = arguments[1]), this.value = e
        }

        function pl(e, t, n) {
            Li.call(this, e, t), this.meshPerAttribute = n || 1
        }

        function dl(e, t, n, r) {
            this.ray = new ke(e, t), this.near = n || 0, this.far = r || 1 / 0, this.camera = null, this.layers = new ne, this.params = {
                Mesh: {},
                Line: {threshold: 1},
                LOD: {},
                Points: {threshold: 1},
                Sprite: {}
            }, Object.defineProperties(this.params, {
                PointCloud: {
                    get: function () {
                        return console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points."), this.Points
                    }
                }
            })
        }

        function fl(e, t) {
            return e.distance - t.distance
        }

        function ml(e, t, n, r) {
            if (e.layers.test(t.layers) && e.raycast(t, n), !0 === r) for (var i = e.children, a = 0, o = i.length; a < o; a++) ml(i[a], t, n, !0)
        }

        function vl(e, t, n) {
            return this.radius = void 0 !== e ? e : 1, this.phi = void 0 !== t ? t : 0, this.theta = void 0 !== n ? n : 0, this
        }

        Object.assign(sl.prototype, {
            getValue: function (e, t) {
                this.bind();
                var n = this._targetGroup.nCachedObjects_, r = this._bindings[n];
                void 0 !== r && r.getValue(e, t)
            }, setValue: function (e, t) {
                for (var n = this._bindings, r = this._targetGroup.nCachedObjects_, i = n.length; r !== i; ++r) n[r].setValue(e, t)
            }, bind: function () {
                for (var e = this._bindings, t = this._targetGroup.nCachedObjects_, n = e.length; t !== n; ++t) e[t].bind()
            }, unbind: function () {
                for (var e = this._bindings, t = this._targetGroup.nCachedObjects_, n = e.length; t !== n; ++t) e[t].unbind()
            }
        }), Object.assign(cl, {
            Composite: sl, create: function (e, t, n) {
                return e && e.isAnimationObjectGroup ? new cl.Composite(e, t, n) : new cl(e, t, n)
            }, sanitizeNodeName: function (e) {
                return e.replace(/\s/g, "_").replace($c, "")
            }, parseTrackName: function (e) {
                var t = al.exec(e);
                if (!t) throw new Error("PropertyBinding: Cannot parse trackName: " + e);
                var n = {nodeName: t[2], objectName: t[3], objectIndex: t[4], propertyName: t[5], propertyIndex: t[6]},
                    r = n.nodeName && n.nodeName.lastIndexOf(".");
                if (void 0 !== r && -1 !== r) {
                    var i = n.nodeName.substring(r + 1);
                    -1 !== ol.indexOf(i) && (n.nodeName = n.nodeName.substring(0, r), n.objectName = i)
                }
                if (null === n.propertyName || 0 === n.propertyName.length) throw new Error("PropertyBinding: can not parse propertyName from trackName: " + e);
                return n
            }, findNode: function (e, t) {
                if (!t || "" === t || "." === t || -1 === t || t === e.name || t === e.uuid) return e;
                if (e.skeleton) {
                    var n = e.skeleton.getBoneByName(t);
                    if (void 0 !== n) return n
                }
                if (e.children) {
                    var r = function (e) {
                        for (var n = 0; n < e.length; n++) {
                            var i = e[n];
                            if (i.name === t || i.uuid === t) return i;
                            var a = r(i.children);
                            if (a) return a
                        }
                        return null
                    }, i = r(e.children);
                    if (i) return i
                }
                return null
            }
        }), Object.assign(cl.prototype, {
            _getValue_unavailable: function () {
            },
            _setValue_unavailable: function () {
            },
            BindingType: {Direct: 0, EntireArray: 1, ArrayElement: 2, HasFromToArray: 3},
            Versioning: {None: 0, NeedsUpdate: 1, MatrixWorldNeedsUpdate: 2},
            GetterByBindingType: [function (e, t) {
                e[t] = this.node[this.propertyName]
            }, function (e, t) {
                for (var n = this.resolvedProperty, r = 0, i = n.length; r !== i; ++r) e[t++] = n[r]
            }, function (e, t) {
                e[t] = this.resolvedProperty[this.propertyIndex]
            }, function (e, t) {
                this.resolvedProperty.toArray(e, t)
            }],
            SetterByBindingTypeAndVersioning: [[function (e, t) {
                this.targetObject[this.propertyName] = e[t]
            }, function (e, t) {
                this.targetObject[this.propertyName] = e[t], this.targetObject.needsUpdate = !0
            }, function (e, t) {
                this.targetObject[this.propertyName] = e[t], this.targetObject.matrixWorldNeedsUpdate = !0
            }], [function (e, t) {
                for (var n = this.resolvedProperty, r = 0, i = n.length; r !== i; ++r) n[r] = e[t++]
            }, function (e, t) {
                for (var n = this.resolvedProperty, r = 0, i = n.length; r !== i; ++r) n[r] = e[t++];
                this.targetObject.needsUpdate = !0
            }, function (e, t) {
                for (var n = this.resolvedProperty, r = 0, i = n.length; r !== i; ++r) n[r] = e[t++];
                this.targetObject.matrixWorldNeedsUpdate = !0
            }], [function (e, t) {
                this.resolvedProperty[this.propertyIndex] = e[t]
            }, function (e, t) {
                this.resolvedProperty[this.propertyIndex] = e[t], this.targetObject.needsUpdate = !0
            }, function (e, t) {
                this.resolvedProperty[this.propertyIndex] = e[t], this.targetObject.matrixWorldNeedsUpdate = !0
            }], [function (e, t) {
                this.resolvedProperty.fromArray(e, t)
            }, function (e, t) {
                this.resolvedProperty.fromArray(e, t), this.targetObject.needsUpdate = !0
            }, function (e, t) {
                this.resolvedProperty.fromArray(e, t), this.targetObject.matrixWorldNeedsUpdate = !0
            }]],
            getValue: function (e, t) {
                this.bind(), this.getValue(e, t)
            },
            setValue: function (e, t) {
                this.bind(), this.setValue(e, t)
            },
            bind: function () {
                var e = this.node, t = this.parsedPath, n = t.objectName, r = t.propertyName, i = t.propertyIndex;
                if (e || (e = cl.findNode(this.rootNode, t.nodeName) || this.rootNode, this.node = e), this.getValue = this._getValue_unavailable, this.setValue = this._setValue_unavailable, e) {
                    if (n) {
                        var a = t.objectIndex;
                        switch (n) {
                            case"materials":
                                if (!e.material) return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
                                if (!e.material.materials) return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
                                e = e.material.materials;
                                break;
                            case"bones":
                                if (!e.skeleton) return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
                                e = e.skeleton.bones;
                                for (var o = 0; o < e.length; o++) if (e[o].name === a) {
                                    a = o;
                                    break
                                }
                                break;
                            default:
                                if (void 0 === e[n]) return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
                                e = e[n]
                        }
                        if (void 0 !== a) {
                            if (void 0 === e[a]) return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, e);
                            e = e[a]
                        }
                    }
                    var s = e[r];
                    if (void 0 !== s) {
                        var c = this.Versioning.None;
                        this.targetObject = e, void 0 !== e.needsUpdate ? c = this.Versioning.NeedsUpdate : void 0 !== e.matrixWorldNeedsUpdate && (c = this.Versioning.MatrixWorldNeedsUpdate);
                        var l = this.BindingType.Direct;
                        if (void 0 !== i) {
                            if ("morphTargetInfluences" === r) {
                                if (!e.geometry) return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
                                if (!e.geometry.isBufferGeometry) return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.", this);
                                if (!e.geometry.morphAttributes) return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
                                void 0 !== e.morphTargetDictionary[i] && (i = e.morphTargetDictionary[i])
                            }
                            l = this.BindingType.ArrayElement, this.resolvedProperty = s, this.propertyIndex = i
                        } else void 0 !== s.fromArray && void 0 !== s.toArray ? (l = this.BindingType.HasFromToArray, this.resolvedProperty = s) : Array.isArray(s) ? (l = this.BindingType.EntireArray, this.resolvedProperty = s) : this.propertyName = r;
                        this.getValue = this.GetterByBindingType[l], this.setValue = this.SetterByBindingTypeAndVersioning[l][c]
                    } else {
                        var u = t.nodeName;
                        console.error("THREE.PropertyBinding: Trying to update property for track: " + u + "." + r + " but it wasn't found.", e)
                    }
                } else console.error("THREE.PropertyBinding: Trying to update node for track: " + this.path + " but it wasn't found.")
            },
            unbind: function () {
                this.node = null, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound
            }
        }), Object.assign(cl.prototype, {
            _getValue_unbound: cl.prototype.getValue,
            _setValue_unbound: cl.prototype.setValue
        }), Object.assign(function () {
            this.uuid = O.generateUUID(), this._objects = Array.prototype.slice.call(arguments), this.nCachedObjects_ = 0;
            var e = {};
            this._indicesByUUID = e;
            for (var t = 0, n = arguments.length; t !== n; ++t) e[arguments[t].uuid] = t;
            this._paths = [], this._parsedPaths = [], this._bindings = [], this._bindingsIndicesByPath = {};
            var r = this;
            this.stats = {
                objects: {
                    get total() {
                        return r._objects.length
                    }, get inUse() {
                        return this.total - r.nCachedObjects_
                    }
                }, get bindingsPerObject() {
                    return r._bindings.length
                }
            }
        }.prototype, {
            isAnimationObjectGroup: !0, add: function () {
                for (var e = this._objects, t = e.length, n = this.nCachedObjects_, r = this._indicesByUUID, i = this._paths, a = this._parsedPaths, o = this._bindings, s = o.length, c = void 0, l = 0, u = arguments.length; l !== u; ++l) {
                    var h = arguments[l], p = h.uuid, d = r[p];
                    if (void 0 === d) {
                        d = t++, r[p] = d, e.push(h);
                        for (var f = 0, m = s; f !== m; ++f) o[f].push(new cl(h, i[f], a[f]))
                    } else if (d < n) {
                        c = e[d];
                        var v = --n, g = e[v];
                        r[g.uuid] = d, e[d] = g, r[p] = v, e[v] = h;
                        for (f = 0, m = s; f !== m; ++f) {
                            var y = o[f], x = y[v], b = y[d];
                            y[d] = x, void 0 === b && (b = new cl(h, i[f], a[f])), y[v] = b
                        }
                    } else e[d] !== c && console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")
                }
                this.nCachedObjects_ = n
            }, remove: function () {
                for (var e = this._objects, t = this.nCachedObjects_, n = this._indicesByUUID, r = this._bindings, i = r.length, a = 0, o = arguments.length; a !== o; ++a) {
                    var s = arguments[a], c = s.uuid, l = n[c];
                    if (void 0 !== l && l >= t) {
                        var u = t++, h = e[u];
                        n[h.uuid] = l, e[l] = h, n[c] = u, e[u] = s;
                        for (var p = 0, d = i; p !== d; ++p) {
                            var f = r[p], m = f[u], v = f[l];
                            f[l] = m, f[u] = v
                        }
                    }
                }
                this.nCachedObjects_ = t
            }, uncache: function () {
                for (var e = this._objects, t = e.length, n = this.nCachedObjects_, r = this._indicesByUUID, i = this._bindings, a = i.length, o = 0, s = arguments.length; o !== s; ++o) {
                    var c = arguments[o], l = c.uuid, u = r[l];
                    if (void 0 !== u) if (delete r[l], u < n) {
                        var h = --n, p = e[h], d = e[y = --t];
                        r[p.uuid] = u, e[u] = p, r[d.uuid] = h, e[h] = d, e.pop();
                        for (var f = 0, m = a; f !== m; ++f) {
                            var v = (x = i[f])[h], g = x[y];
                            x[u] = v, x[h] = g, x.pop()
                        }
                    } else {
                        var y;
                        r[(d = e[y = --t]).uuid] = u, e[u] = d, e.pop();
                        for (f = 0, m = a; f !== m; ++f) {
                            var x;
                            (x = i[f])[u] = x[y], x.pop()
                        }
                    }
                }
                this.nCachedObjects_ = n
            }, subscribe_: function (e, t) {
                var n = this._bindingsIndicesByPath, r = n[e], i = this._bindings;
                if (void 0 !== r) return i[r];
                var a = this._paths, o = this._parsedPaths, s = this._objects, c = s.length, l = this.nCachedObjects_,
                    u = new Array(c);
                r = i.length, n[e] = r, a.push(e), o.push(t), i.push(u);
                for (var h = l, p = s.length; h !== p; ++h) {
                    var d = s[h];
                    u[h] = new cl(d, e, t)
                }
                return u
            }, unsubscribe_: function (e) {
                var t = this._bindingsIndicesByPath, n = t[e];
                if (void 0 !== n) {
                    var r = this._paths, i = this._parsedPaths, a = this._bindings, o = a.length - 1, s = a[o];
                    t[e[o]] = n, a[n] = s, a.pop(), i[n] = i[o], i.pop(), r[n] = r[o], r.pop()
                }
            }
        }), Object.assign(ll.prototype, {
            play: function () {
                return this._mixer._activateAction(this), this
            }, stop: function () {
                return this._mixer._deactivateAction(this), this.reset()
            }, reset: function () {
                return this.paused = !1, this.enabled = !0, this.time = 0, this._loopCount = -1, this._startTime = null, this.stopFading().stopWarping()
            }, isRunning: function () {
                return this.enabled && !this.paused && 0 !== this.timeScale && null === this._startTime && this._mixer._isActiveAction(this)
            }, isScheduled: function () {
                return this._mixer._isActiveAction(this)
            }, startAt: function (e) {
                return this._startTime = e, this
            }, setLoop: function (e, t) {
                return this.loop = e, this.repetitions = t, this
            }, setEffectiveWeight: function (e) {
                return this.weight = e, this._effectiveWeight = this.enabled ? e : 0, this.stopFading()
            }, getEffectiveWeight: function () {
                return this._effectiveWeight
            }, fadeIn: function (e) {
                return this._scheduleFading(e, 0, 1)
            }, fadeOut: function (e) {
                return this._scheduleFading(e, 1, 0)
            }, crossFadeFrom: function (e, t, n) {
                if (e.fadeOut(t), this.fadeIn(t), n) {
                    var r = this._clip.duration, i = e._clip.duration, a = i / r, o = r / i;
                    e.warp(1, a, t), this.warp(o, 1, t)
                }
                return this
            }, crossFadeTo: function (e, t, n) {
                return e.crossFadeFrom(this, t, n)
            }, stopFading: function () {
                var e = this._weightInterpolant;
                return null !== e && (this._weightInterpolant = null, this._mixer._takeBackControlInterpolant(e)), this
            }, setEffectiveTimeScale: function (e) {
                return this.timeScale = e, this._effectiveTimeScale = this.paused ? 0 : e, this.stopWarping()
            }, getEffectiveTimeScale: function () {
                return this._effectiveTimeScale
            }, setDuration: function (e) {
                return this.timeScale = this._clip.duration / e, this.stopWarping()
            }, syncWith: function (e) {
                return this.time = e.time, this.timeScale = e.timeScale, this.stopWarping()
            }, halt: function (e) {
                return this.warp(this._effectiveTimeScale, 0, e)
            }, warp: function (e, t, n) {
                var r = this._mixer, i = r.time, a = this._timeScaleInterpolant, o = this.timeScale;
                null === a && (a = r._lendControlInterpolant(), this._timeScaleInterpolant = a);
                var s = a.parameterPositions, c = a.sampleValues;
                return s[0] = i, s[1] = i + n, c[0] = e / o, c[1] = t / o, this
            }, stopWarping: function () {
                var e = this._timeScaleInterpolant;
                return null !== e && (this._timeScaleInterpolant = null, this._mixer._takeBackControlInterpolant(e)), this
            }, getMixer: function () {
                return this._mixer
            }, getClip: function () {
                return this._clip
            }, getRoot: function () {
                return this._localRoot || this._mixer._root
            }, _update: function (e, t, n, r) {
                if (this.enabled) {
                    var i = this._startTime;
                    if (null !== i) {
                        var a = (e - i) * n;
                        if (a < 0 || 0 === n) return;
                        this._startTime = null, t = n * a
                    }
                    t *= this._updateTimeScale(e);
                    var o = this._updateTime(t), s = this._updateWeight(e);
                    if (s > 0) {
                        var c = this._interpolants, l = this._propertyBindings;
                        switch (this.blendMode) {
                            case 2501:
                                for (var u = 0, h = c.length; u !== h; ++u) c[u].evaluate(o), l[u].accumulateAdditive(s);
                                break;
                            case 2500:
                            default:
                                for (u = 0, h = c.length; u !== h; ++u) c[u].evaluate(o), l[u].accumulate(r, s)
                        }
                    }
                } else this._updateWeight(e)
            }, _updateWeight: function (e) {
                var t = 0;
                if (this.enabled) {
                    t = this.weight;
                    var n = this._weightInterpolant;
                    if (null !== n) {
                        var r = n.evaluate(e)[0];
                        t *= r, e > n.parameterPositions[1] && (this.stopFading(), 0 === r && (this.enabled = !1))
                    }
                }
                return this._effectiveWeight = t, t
            }, _updateTimeScale: function (e) {
                var t = 0;
                if (!this.paused) {
                    t = this.timeScale;
                    var n = this._timeScaleInterpolant;
                    if (null !== n) t *= n.evaluate(e)[0], e > n.parameterPositions[1] && (this.stopWarping(), 0 === t ? this.paused = !0 : this.timeScale = t)
                }
                return this._effectiveTimeScale = t, t
            }, _updateTime: function (e) {
                var t = this.time + e, n = this._clip.duration, r = this.loop, i = this._loopCount, a = 2202 === r;
                if (0 === e) return -1 === i ? t : a && 1 == (1 & i) ? n - t : t;
                if (r === b) {
                    -1 === i && (this._loopCount = 0, this._setEndings(!0, !0, !1));
                    e:{
                        if (t >= n) t = n; else {
                            if (!(t < 0)) {
                                this.time = t;
                                break e
                            }
                            t = 0
                        }
                        this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, this.time = t, this._mixer.dispatchEvent({
                            type: "finished",
                            action: this,
                            direction: e < 0 ? -1 : 1
                        })
                    }
                } else {
                    if (-1 === i && (e >= 0 ? (i = 0, this._setEndings(!0, 0 === this.repetitions, a)) : this._setEndings(0 === this.repetitions, !0, a)), t >= n || t < 0) {
                        var o = Math.floor(t / n);
                        t -= n * o, i += Math.abs(o);
                        var s = this.repetitions - i;
                        if (s <= 0) this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, t = e > 0 ? n : 0, this.time = t, this._mixer.dispatchEvent({
                            type: "finished",
                            action: this,
                            direction: e > 0 ? 1 : -1
                        }); else {
                            if (1 === s) {
                                var c = e < 0;
                                this._setEndings(c, !c, a)
                            } else this._setEndings(!1, !1, a);
                            this._loopCount = i, this.time = t, this._mixer.dispatchEvent({
                                type: "loop",
                                action: this,
                                loopDelta: o
                            })
                        }
                    } else this.time = t;
                    if (a && 1 == (1 & i)) return n - t
                }
                return t
            }, _setEndings: function (e, t, n) {
                var r = this._interpolantSettings;
                n ? (r.endingStart = 2401, r.endingEnd = 2401) : (r.endingStart = e ? this.zeroSlopeAtStart ? 2401 : 2400 : 2402, r.endingEnd = t ? this.zeroSlopeAtEnd ? 2401 : 2400 : 2402)
            }, _scheduleFading: function (e, t, n) {
                var r = this._mixer, i = r.time, a = this._weightInterpolant;
                null === a && (a = r._lendControlInterpolant(), this._weightInterpolant = a);
                var o = a.parameterPositions, s = a.sampleValues;
                return o[0] = i, s[0] = t, o[1] = i + e, s[1] = n, this
            }
        }), ul.prototype = Object.assign(Object.create(L.prototype), {
            constructor: ul, _bindAction: function (e, t) {
                var n = e._localRoot || this._root, r = e._clip.tracks, i = r.length, a = e._propertyBindings,
                    o = e._interpolants, s = n.uuid, c = this._bindingsByRootAndName, l = c[s];
                void 0 === l && (l = {}, c[s] = l);
                for (var u = 0; u !== i; ++u) {
                    var h = r[u], p = h.name, d = l[p];
                    if (void 0 !== d) a[u] = d; else {
                        if (void 0 !== (d = a[u])) {
                            null === d._cacheIndex && (++d.referenceCount, this._addInactiveBinding(d, s, p));
                            continue
                        }
                        var f = t && t._propertyBindings[u].binding.parsedPath;
                        ++(d = new Qc(cl.create(n, p, f), h.ValueTypeName, h.getValueSize())).referenceCount, this._addInactiveBinding(d, s, p), a[u] = d
                    }
                    o[u].resultBuffer = d.buffer
                }
            }, _activateAction: function (e) {
                if (!this._isActiveAction(e)) {
                    if (null === e._cacheIndex) {
                        var t = (e._localRoot || this._root).uuid, n = e._clip.uuid, r = this._actionsByClip[n];
                        this._bindAction(e, r && r.knownActions[0]), this._addInactiveAction(e, n, t)
                    }
                    for (var i = e._propertyBindings, a = 0, o = i.length; a !== o; ++a) {
                        var s = i[a];
                        0 == s.useCount++ && (this._lendBinding(s), s.saveOriginalState())
                    }
                    this._lendAction(e)
                }
            }, _deactivateAction: function (e) {
                if (this._isActiveAction(e)) {
                    for (var t = e._propertyBindings, n = 0, r = t.length; n !== r; ++n) {
                        var i = t[n];
                        0 == --i.useCount && (i.restoreOriginalState(), this._takeBackBinding(i))
                    }
                    this._takeBackAction(e)
                }
            }, _initMemoryManager: function () {
                this._actions = [], this._nActiveActions = 0, this._actionsByClip = {}, this._bindings = [], this._nActiveBindings = 0, this._bindingsByRootAndName = {}, this._controlInterpolants = [], this._nActiveControlInterpolants = 0;
                var e = this;
                this.stats = {
                    actions: {
                        get total() {
                            return e._actions.length
                        }, get inUse() {
                            return e._nActiveActions
                        }
                    }, bindings: {
                        get total() {
                            return e._bindings.length
                        }, get inUse() {
                            return e._nActiveBindings
                        }
                    }, controlInterpolants: {
                        get total() {
                            return e._controlInterpolants.length
                        }, get inUse() {
                            return e._nActiveControlInterpolants
                        }
                    }
                }
            }, _isActiveAction: function (e) {
                var t = e._cacheIndex;
                return null !== t && t < this._nActiveActions
            }, _addInactiveAction: function (e, t, n) {
                var r = this._actions, i = this._actionsByClip, a = i[t];
                if (void 0 === a) a = {knownActions: [e], actionByRoot: {}}, e._byClipCacheIndex = 0, i[t] = a; else {
                    var o = a.knownActions;
                    e._byClipCacheIndex = o.length, o.push(e)
                }
                e._cacheIndex = r.length, r.push(e), a.actionByRoot[n] = e
            }, _removeInactiveAction: function (e) {
                var t = this._actions, n = t[t.length - 1], r = e._cacheIndex;
                n._cacheIndex = r, t[r] = n, t.pop(), e._cacheIndex = null;
                var i = e._clip.uuid, a = this._actionsByClip, o = a[i], s = o.knownActions, c = s[s.length - 1],
                    l = e._byClipCacheIndex;
                c._byClipCacheIndex = l, s[l] = c, s.pop(), e._byClipCacheIndex = null, delete o.actionByRoot[(e._localRoot || this._root).uuid], 0 === s.length && delete a[i], this._removeInactiveBindingsForAction(e)
            }, _removeInactiveBindingsForAction: function (e) {
                for (var t = e._propertyBindings, n = 0, r = t.length; n !== r; ++n) {
                    var i = t[n];
                    0 == --i.referenceCount && this._removeInactiveBinding(i)
                }
            }, _lendAction: function (e) {
                var t = this._actions, n = e._cacheIndex, r = this._nActiveActions++, i = t[r];
                e._cacheIndex = r, t[r] = e, i._cacheIndex = n, t[n] = i
            }, _takeBackAction: function (e) {
                var t = this._actions, n = e._cacheIndex, r = --this._nActiveActions, i = t[r];
                e._cacheIndex = r, t[r] = e, i._cacheIndex = n, t[n] = i
            }, _addInactiveBinding: function (e, t, n) {
                var r = this._bindingsByRootAndName, i = r[t], a = this._bindings;
                void 0 === i && (i = {}, r[t] = i), i[n] = e, e._cacheIndex = a.length, a.push(e)
            }, _removeInactiveBinding: function (e) {
                var t = this._bindings, n = e.binding, r = n.rootNode.uuid, i = n.path, a = this._bindingsByRootAndName,
                    o = a[r], s = t[t.length - 1], c = e._cacheIndex;
                s._cacheIndex = c, t[c] = s, t.pop(), delete o[i], 0 === Object.keys(o).length && delete a[r]
            }, _lendBinding: function (e) {
                var t = this._bindings, n = e._cacheIndex, r = this._nActiveBindings++, i = t[r];
                e._cacheIndex = r, t[r] = e, i._cacheIndex = n, t[n] = i
            }, _takeBackBinding: function (e) {
                var t = this._bindings, n = e._cacheIndex, r = --this._nActiveBindings, i = t[r];
                e._cacheIndex = r, t[r] = e, i._cacheIndex = n, t[n] = i
            }, _lendControlInterpolant: function () {
                var e = this._controlInterpolants, t = this._nActiveControlInterpolants++, n = e[t];
                return void 0 === n && ((n = new us(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer)).__cacheIndex = t, e[t] = n), n
            }, _takeBackControlInterpolant: function (e) {
                var t = this._controlInterpolants, n = e.__cacheIndex, r = --this._nActiveControlInterpolants, i = t[r];
                e.__cacheIndex = r, t[r] = e, i.__cacheIndex = n, t[n] = i
            }, _controlInterpolantsResultBuffer: new Float32Array(1), clipAction: function (e, t, n) {
                var r = t || this._root, i = r.uuid, a = "string" == typeof e ? bs.findByName(r, e) : e,
                    o = null !== a ? a.uuid : e, s = this._actionsByClip[o], c = null;
                if (void 0 === n && (n = null !== a ? a.blendMode : 2500), void 0 !== s) {
                    var l = s.actionByRoot[i];
                    if (void 0 !== l && l.blendMode === n) return l;
                    c = s.knownActions[0], null === a && (a = c._clip)
                }
                if (null === a) return null;
                var u = new ll(this, a, t, n);
                return this._bindAction(u, c), this._addInactiveAction(u, o, i), u
            }, existingAction: function (e, t) {
                var n = t || this._root, r = n.uuid, i = "string" == typeof e ? bs.findByName(n, e) : e,
                    a = i ? i.uuid : e, o = this._actionsByClip[a];
                return void 0 !== o && o.actionByRoot[r] || null
            }, stopAllAction: function () {
                for (var e = this._actions, t = this._nActiveActions - 1; t >= 0; --t) e[t].stop();
                return this
            }, update: function (e) {
                e *= this.timeScale;
                for (var t = this._actions, n = this._nActiveActions, r = this.time += e, i = Math.sign(e), a = this._accuIndex ^= 1, o = 0; o !== n; ++o) {
                    t[o]._update(r, e, i, a)
                }
                var s = this._bindings, c = this._nActiveBindings;
                for (o = 0; o !== c; ++o) s[o].apply(a);
                return this
            }, setTime: function (e) {
                this.time = 0;
                for (var t = 0; t < this._actions.length; t++) this._actions[t].time = 0;
                return this.update(e)
            }, getRoot: function () {
                return this._root
            }, uncacheClip: function (e) {
                var t = this._actions, n = e.uuid, r = this._actionsByClip, i = r[n];
                if (void 0 !== i) {
                    for (var a = i.knownActions, o = 0, s = a.length; o !== s; ++o) {
                        var c = a[o];
                        this._deactivateAction(c);
                        var l = c._cacheIndex, u = t[t.length - 1];
                        c._cacheIndex = null, c._byClipCacheIndex = null, u._cacheIndex = l, t[l] = u, t.pop(), this._removeInactiveBindingsForAction(c)
                    }
                    delete r[n]
                }
            }, uncacheRoot: function (e) {
                var t = e.uuid, n = this._actionsByClip;
                for (var r in n) {
                    var i = n[r].actionByRoot[t];
                    void 0 !== i && (this._deactivateAction(i), this._removeInactiveAction(i))
                }
                var a = this._bindingsByRootAndName[t];
                if (void 0 !== a) for (var o in a) {
                    var s = a[o];
                    s.restoreOriginalState(), this._removeInactiveBinding(s)
                }
            }, uncacheAction: function (e, t) {
                var n = this.existingAction(e, t);
                null !== n && (this._deactivateAction(n), this._removeInactiveAction(n))
            }
        }), hl.prototype.clone = function () {
            return new hl(void 0 === this.value.clone ? this.value : this.value.clone())
        }, pl.prototype = Object.assign(Object.create(Li.prototype), {
            constructor: pl,
            isInstancedInterleavedBuffer: !0,
            copy: function (e) {
                return Li.prototype.copy.call(this, e), this.meshPerAttribute = e.meshPerAttribute, this
            }
        }), Object.assign(dl.prototype, {
            set: function (e, t) {
                this.ray.set(e, t)
            }, setFromCamera: function (e, t) {
                t && t.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(t.matrixWorld), this.ray.direction.set(e.x, e.y, .5).unproject(t).sub(this.ray.origin).normalize(), this.camera = t) : t && t.isOrthographicCamera ? (this.ray.origin.set(e.x, e.y, (t.near + t.far) / (t.near - t.far)).unproject(t), this.ray.direction.set(0, 0, -1).transformDirection(t.matrixWorld), this.camera = t) : console.error("THREE.Raycaster: Unsupported camera type.")
            }, intersectObject: function (e, t, n) {
                var r = n || [];
                return ml(e, this, r, t), r.sort(fl), r
            }, intersectObjects: function (e, t, n) {
                var r = n || [];
                if (!1 === Array.isArray(e)) return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."), r;
                for (var i = 0, a = e.length; i < a; i++) ml(e[i], this, r, t);
                return r.sort(fl), r
            }
        }), Object.assign(vl.prototype, {
            set: function (e, t, n) {
                return this.radius = e, this.phi = t, this.theta = n, this
            }, clone: function () {
                return (new this.constructor).copy(this)
            }, copy: function (e) {
                return this.radius = e.radius, this.phi = e.phi, this.theta = e.theta, this
            }, makeSafe: function () {
                return this.phi = Math.max(1e-6, Math.min(Math.PI - 1e-6, this.phi)), this
            }, setFromVector3: function (e) {
                return this.setFromCartesianCoords(e.x, e.y, e.z)
            }, setFromCartesianCoords: function (e, t, n) {
                return this.radius = Math.sqrt(e * e + t * t + n * n), 0 === this.radius ? (this.theta = 0, this.phi = 0) : (this.theta = Math.atan2(e, n), this.phi = Math.acos(O.clamp(t / this.radius, -1, 1))), this
            }
        }), Object.assign(function (e, t, n) {
            return this.radius = void 0 !== e ? e : 1, this.theta = void 0 !== t ? t : 0, this.y = void 0 !== n ? n : 0, this
        }.prototype, {
            set: function (e, t, n) {
                return this.radius = e, this.theta = t, this.y = n, this
            }, clone: function () {
                return (new this.constructor).copy(this)
            }, copy: function (e) {
                return this.radius = e.radius, this.theta = e.theta, this.y = e.y, this
            }, setFromVector3: function (e) {
                return this.setFromCartesianCoords(e.x, e.y, e.z)
            }, setFromCartesianCoords: function (e, t, n) {
                return this.radius = Math.sqrt(e * e + n * n), this.theta = Math.atan2(e, n), this.y = t, this
            }
        });
        var gl = new I;

        function yl(e, t) {
            this.min = void 0 !== e ? e : new I(1 / 0, 1 / 0), this.max = void 0 !== t ? t : new I(-1 / 0, -1 / 0)
        }

        Object.assign(yl.prototype, {
            set: function (e, t) {
                return this.min.copy(e), this.max.copy(t), this
            }, setFromPoints: function (e) {
                this.makeEmpty();
                for (var t = 0, n = e.length; t < n; t++) this.expandByPoint(e[t]);
                return this
            }, setFromCenterAndSize: function (e, t) {
                var n = gl.copy(t).multiplyScalar(.5);
                return this.min.copy(e).sub(n), this.max.copy(e).add(n), this
            }, clone: function () {
                return (new this.constructor).copy(this)
            }, copy: function (e) {
                return this.min.copy(e.min), this.max.copy(e.max), this
            }, makeEmpty: function () {
                return this.min.x = this.min.y = 1 / 0, this.max.x = this.max.y = -1 / 0, this
            }, isEmpty: function () {
                return this.max.x < this.min.x || this.max.y < this.min.y
            }, getCenter: function (e) {
                return void 0 === e && (console.warn("THREE.Box2: .getCenter() target is now required"), e = new I), this.isEmpty() ? e.set(0, 0) : e.addVectors(this.min, this.max).multiplyScalar(.5)
            }, getSize: function (e) {
                return void 0 === e && (console.warn("THREE.Box2: .getSize() target is now required"), e = new I), this.isEmpty() ? e.set(0, 0) : e.subVectors(this.max, this.min)
            }, expandByPoint: function (e) {
                return this.min.min(e), this.max.max(e), this
            }, expandByVector: function (e) {
                return this.min.sub(e), this.max.add(e), this
            }, expandByScalar: function (e) {
                return this.min.addScalar(-e), this.max.addScalar(e), this
            }, containsPoint: function (e) {
                return !(e.x < this.min.x || e.x > this.max.x || e.y < this.min.y || e.y > this.max.y)
            }, containsBox: function (e) {
                return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y
            }, getParameter: function (e, t) {
                return void 0 === t && (console.warn("THREE.Box2: .getParameter() target is now required"), t = new I), t.set((e.x - this.min.x) / (this.max.x - this.min.x), (e.y - this.min.y) / (this.max.y - this.min.y))
            }, intersectsBox: function (e) {
                return !(e.max.x < this.min.x || e.min.x > this.max.x || e.max.y < this.min.y || e.min.y > this.max.y)
            }, clampPoint: function (e, t) {
                return void 0 === t && (console.warn("THREE.Box2: .clampPoint() target is now required"), t = new I), t.copy(e).clamp(this.min, this.max)
            }, distanceToPoint: function (e) {
                return gl.copy(e).clamp(this.min, this.max).sub(e).length()
            }, intersect: function (e) {
                return this.min.max(e.min), this.max.min(e.max), this
            }, union: function (e) {
                return this.min.min(e.min), this.max.max(e.max), this
            }, translate: function (e) {
                return this.min.add(e), this.max.add(e), this
            }, equals: function (e) {
                return e.min.equals(this.min) && e.max.equals(this.max)
            }
        });
        var xl = new V, bl = new V;

        function _l(e, t) {
            this.start = void 0 !== e ? e : new V, this.end = void 0 !== t ? t : new V
        }

        function wl(e) {
            ve.call(this), this.material = e, this.render = function () {
            }, this.hasPositions = !1, this.hasNormals = !1, this.hasColors = !1, this.hasUvs = !1, this.positionArray = null, this.normalArray = null, this.colorArray = null, this.uvArray = null, this.count = 0
        }

        Object.assign(_l.prototype, {
            set: function (e, t) {
                return this.start.copy(e), this.end.copy(t), this
            }, clone: function () {
                return (new this.constructor).copy(this)
            }, copy: function (e) {
                return this.start.copy(e.start), this.end.copy(e.end), this
            }, getCenter: function (e) {
                return void 0 === e && (console.warn("THREE.Line3: .getCenter() target is now required"), e = new V), e.addVectors(this.start, this.end).multiplyScalar(.5)
            }, delta: function (e) {
                return void 0 === e && (console.warn("THREE.Line3: .delta() target is now required"), e = new V), e.subVectors(this.end, this.start)
            }, distanceSq: function () {
                return this.start.distanceToSquared(this.end)
            }, distance: function () {
                return this.start.distanceTo(this.end)
            }, at: function (e, t) {
                return void 0 === t && (console.warn("THREE.Line3: .at() target is now required"), t = new V), this.delta(t).multiplyScalar(e).add(this.start)
            }, closestPointToPointParameter: function (e, t) {
                xl.subVectors(e, this.start), bl.subVectors(this.end, this.start);
                var n = bl.dot(bl), r = bl.dot(xl) / n;
                return t && (r = O.clamp(r, 0, 1)), r
            }, closestPointToPoint: function (e, t, n) {
                var r = this.closestPointToPointParameter(e, t);
                return void 0 === n && (console.warn("THREE.Line3: .closestPointToPoint() target is now required"), n = new V), this.delta(n).multiplyScalar(r).add(this.start)
            }, applyMatrix4: function (e) {
                return this.start.applyMatrix4(e), this.end.applyMatrix4(e), this
            }, equals: function (e) {
                return e.start.equals(this.start) && e.end.equals(this.end)
            }
        }), wl.prototype = Object.create(ve.prototype), wl.prototype.constructor = wl, wl.prototype.isImmediateRenderObject = !0;
        var Ml = new V;

        function Sl(e, t) {
            ve.call(this), this.light = e, this.light.updateMatrixWorld(), this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = t;
            for (var n = new Dt, r = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1], i = 0, a = 1; i < 32; i++, a++) {
                var o = i / 32 * Math.PI * 2, s = a / 32 * Math.PI * 2;
                r.push(Math.cos(o), Math.sin(o), 1, Math.cos(s), Math.sin(s), 1)
            }
            n.setAttribute("position", new St(r, 3));
            var c = new ha({fog: !1, toneMapped: !1});
            this.cone = new ba(n, c), this.add(this.cone), this.update()
        }

        Sl.prototype = Object.create(ve.prototype), Sl.prototype.constructor = Sl, Sl.prototype.dispose = function () {
            this.cone.geometry.dispose(), this.cone.material.dispose()
        }, Sl.prototype.update = function () {
            this.light.updateMatrixWorld();
            var e = this.light.distance ? this.light.distance : 1e3, t = e * Math.tan(this.light.angle);
            this.cone.scale.set(t, t, e), Ml.setFromMatrixPosition(this.light.target.matrixWorld), this.cone.lookAt(Ml), void 0 !== this.color ? this.cone.material.color.set(this.color) : this.cone.material.color.copy(this.light.color)
        };
        var Tl = new V, El = new Q, Al = new Q;

        function Ll(e) {
            for (var t = function e(t) {
                var n = [];
                t && t.isBone && n.push(t);
                for (var r = 0; r < t.children.length; r++) n.push.apply(n, e(t.children[r]));
                return n
            }(e), n = new Dt, r = [], i = [], a = new st(0, 0, 1), o = new st(0, 1, 0), s = 0; s < t.length; s++) {
                var c = t[s];
                c.parent && c.parent.isBone && (r.push(0, 0, 0), r.push(0, 0, 0), i.push(a.r, a.g, a.b), i.push(o.r, o.g, o.b))
            }
            n.setAttribute("position", new St(r, 3)), n.setAttribute("color", new St(i, 3));
            var l = new ha({vertexColors: !0, depthTest: !1, depthWrite: !1, toneMapped: !1, transparent: !0});
            ba.call(this, n, l), this.type = "SkeletonHelper", this.root = e, this.bones = t, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1
        }

        function Rl(e, t, n) {
            this.light = e, this.light.updateMatrixWorld(), this.color = n;
            var r = new No(t, 4, 2), i = new ft({wireframe: !0, fog: !1, toneMapped: !1});
            $t.call(this, r, i), this.type = "PointLightHelper", this.matrix = this.light.matrixWorld, this.matrixAutoUpdate = !1, this.update()
        }

        Ll.prototype = Object.create(ba.prototype), Ll.prototype.constructor = Ll, Ll.prototype.isSkeletonHelper = !0, Ll.prototype.updateMatrixWorld = function (e) {
            var t = this.bones, n = this.geometry, r = n.getAttribute("position");
            Al.getInverse(this.root.matrixWorld);
            for (var i = 0, a = 0; i < t.length; i++) {
                var o = t[i];
                o.parent && o.parent.isBone && (El.multiplyMatrices(Al, o.matrixWorld), Tl.setFromMatrixPosition(El), r.setXYZ(a, Tl.x, Tl.y, Tl.z), El.multiplyMatrices(Al, o.parent.matrixWorld), Tl.setFromMatrixPosition(El), r.setXYZ(a + 1, Tl.x, Tl.y, Tl.z), a += 2)
            }
            n.getAttribute("position").needsUpdate = !0, ve.prototype.updateMatrixWorld.call(this, e)
        }, Rl.prototype = Object.create($t.prototype), Rl.prototype.constructor = Rl, Rl.prototype.dispose = function () {
            this.geometry.dispose(), this.material.dispose()
        }, Rl.prototype.update = function () {
            void 0 !== this.color ? this.material.color.set(this.color) : this.material.color.copy(this.light.color)
        };
        var Pl = new V, Cl = new st, Ol = new st;

        function Il(e, t, n) {
            ve.call(this), this.light = e, this.light.updateMatrixWorld(), this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = n;
            var r = new Ga(t);
            r.rotateY(.5 * Math.PI), this.material = new ft({
                wireframe: !0,
                fog: !1,
                toneMapped: !1
            }), void 0 === this.color && (this.material.vertexColors = !0);
            var i = r.getAttribute("position"), a = new Float32Array(3 * i.count);
            r.setAttribute("color", new vt(a, 3)), this.add(new $t(r, this.material)), this.update()
        }

        function Nl(e, t, n, r) {
            e = e || 10, t = t || 10, n = new st(void 0 !== n ? n : 4473924), r = new st(void 0 !== r ? r : 8947848);
            for (var i = t / 2, a = e / t, o = e / 2, s = [], c = [], l = 0, u = 0, h = -o; l <= t; l++, h += a) {
                s.push(-o, 0, h, o, 0, h), s.push(h, 0, -o, h, 0, o);
                var p = l === i ? n : r;
                p.toArray(c, u), u += 3, p.toArray(c, u), u += 3, p.toArray(c, u), u += 3, p.toArray(c, u), u += 3
            }
            var d = new Dt;
            d.setAttribute("position", new St(s, 3)), d.setAttribute("color", new St(c, 3));
            var f = new ha({vertexColors: !0, toneMapped: !1});
            ba.call(this, d, f), this.type = "GridHelper"
        }

        function Dl(e, t, n, r, i, a) {
            e = e || 10, t = t || 16, n = n || 8, r = r || 64, i = new st(void 0 !== i ? i : 4473924), a = new st(void 0 !== a ? a : 8947848);
            var o, s, c, l, u, h, p, d = [], f = [];
            for (l = 0; l <= t; l++) c = l / t * (2 * Math.PI), o = Math.sin(c) * e, s = Math.cos(c) * e, d.push(0, 0, 0), d.push(o, 0, s), p = 1 & l ? i : a, f.push(p.r, p.g, p.b), f.push(p.r, p.g, p.b);
            for (l = 0; l <= n; l++) for (p = 1 & l ? i : a, h = e - e / n * l, u = 0; u < r; u++) c = u / r * (2 * Math.PI), o = Math.sin(c) * h, s = Math.cos(c) * h, d.push(o, 0, s), f.push(p.r, p.g, p.b), c = (u + 1) / r * (2 * Math.PI), o = Math.sin(c) * h, s = Math.cos(c) * h, d.push(o, 0, s), f.push(p.r, p.g, p.b);
            var m = new Dt;
            m.setAttribute("position", new St(d, 3)), m.setAttribute("color", new St(f, 3));
            var v = new ha({vertexColors: !0, toneMapped: !1});
            ba.call(this, m, v), this.type = "PolarGridHelper"
        }

        Il.prototype = Object.create(ve.prototype), Il.prototype.constructor = Il, Il.prototype.dispose = function () {
            this.children[0].geometry.dispose(), this.children[0].material.dispose()
        }, Il.prototype.update = function () {
            var e = this.children[0];
            if (void 0 !== this.color) this.material.color.set(this.color); else {
                var t = e.geometry.getAttribute("color");
                Cl.copy(this.light.color), Ol.copy(this.light.groundColor);
                for (var n = 0, r = t.count; n < r; n++) {
                    var i = n < r / 2 ? Cl : Ol;
                    t.setXYZ(n, i.r, i.g, i.b)
                }
                t.needsUpdate = !0
            }
            e.lookAt(Pl.setFromMatrixPosition(this.light.matrixWorld).negate())
        }, Nl.prototype = Object.assign(Object.create(ba.prototype), {
            constructor: Nl, copy: function (e) {
                return ba.prototype.copy.call(this, e), this.geometry.copy(e.geometry), this.material.copy(e.material), this
            }, clone: function () {
                return (new this.constructor).copy(this)
            }
        }), Dl.prototype = Object.create(ba.prototype), Dl.prototype.constructor = Dl;
        var Ul = new V, zl = new V, Fl = new V;

        function Bl(e, t, n) {
            ve.call(this), this.light = e, this.light.updateMatrixWorld(), this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = n, void 0 === t && (t = 1);
            var r = new Dt;
            r.setAttribute("position", new St([-t, t, 0, t, t, 0, t, -t, 0, -t, -t, 0, -t, t, 0], 3));
            var i = new ha({fog: !1, toneMapped: !1});
            this.lightPlane = new ga(r, i), this.add(this.lightPlane), (r = new Dt).setAttribute("position", new St([0, 0, 0, 0, 0, 1], 3)), this.targetLine = new ga(r, i), this.add(this.targetLine), this.update()
        }

        Bl.prototype = Object.create(ve.prototype), Bl.prototype.constructor = Bl, Bl.prototype.dispose = function () {
            this.lightPlane.geometry.dispose(), this.lightPlane.material.dispose(), this.targetLine.geometry.dispose(), this.targetLine.material.dispose()
        }, Bl.prototype.update = function () {
            Ul.setFromMatrixPosition(this.light.matrixWorld), zl.setFromMatrixPosition(this.light.target.matrixWorld), Fl.subVectors(zl, Ul), this.lightPlane.lookAt(zl), void 0 !== this.color ? (this.lightPlane.material.color.set(this.color), this.targetLine.material.color.set(this.color)) : (this.lightPlane.material.color.copy(this.light.color), this.targetLine.material.color.copy(this.light.color)), this.targetLine.lookAt(zl), this.targetLine.scale.z = Fl.length()
        };
        var Hl = new V, Gl = new dn;

        function kl(e) {
            var t = new Dt, n = new ha({color: 16777215, vertexColors: !0, toneMapped: !1}), r = [], i = [], a = {},
                o = new st(16755200), s = new st(16711680), c = new st(43775), l = new st(16777215),
                u = new st(3355443);

            function h(e, t, n) {
                p(e, n), p(t, n)
            }

            function p(e, t) {
                r.push(0, 0, 0), i.push(t.r, t.g, t.b), void 0 === a[e] && (a[e] = []), a[e].push(r.length / 3 - 1)
            }

            h("n1", "n2", o), h("n2", "n4", o), h("n4", "n3", o), h("n3", "n1", o), h("f1", "f2", o), h("f2", "f4", o), h("f4", "f3", o), h("f3", "f1", o), h("n1", "f1", o), h("n2", "f2", o), h("n3", "f3", o), h("n4", "f4", o), h("p", "n1", s), h("p", "n2", s), h("p", "n3", s), h("p", "n4", s), h("u1", "u2", c), h("u2", "u3", c), h("u3", "u1", c), h("c", "t", l), h("p", "c", u), h("cn1", "cn2", u), h("cn3", "cn4", u), h("cf1", "cf2", u), h("cf3", "cf4", u), t.setAttribute("position", new St(r, 3)), t.setAttribute("color", new St(i, 3)), ba.call(this, t, n), this.type = "CameraHelper", this.camera = e, this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix(), this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.pointMap = a, this.update()
        }

        function jl(e, t, n, r, i, a, o) {
            Hl.set(i, a, o).unproject(r);
            var s = t[e];
            if (void 0 !== s) for (var c = n.getAttribute("position"), l = 0, u = s.length; l < u; l++) c.setXYZ(s[l], Hl.x, Hl.y, Hl.z)
        }

        kl.prototype = Object.create(ba.prototype), kl.prototype.constructor = kl, kl.prototype.update = function () {
            var e = this.geometry, t = this.pointMap;
            Gl.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse), jl("c", t, e, Gl, 0, 0, -1), jl("t", t, e, Gl, 0, 0, 1), jl("n1", t, e, Gl, -1, -1, -1), jl("n2", t, e, Gl, 1, -1, -1), jl("n3", t, e, Gl, -1, 1, -1), jl("n4", t, e, Gl, 1, 1, -1), jl("f1", t, e, Gl, -1, -1, 1), jl("f2", t, e, Gl, 1, -1, 1), jl("f3", t, e, Gl, -1, 1, 1), jl("f4", t, e, Gl, 1, 1, 1), jl("u1", t, e, Gl, .7, 1.1, -1), jl("u2", t, e, Gl, -.7, 1.1, -1), jl("u3", t, e, Gl, 0, 2, -1), jl("cf1", t, e, Gl, -1, 0, 1), jl("cf2", t, e, Gl, 1, 0, 1), jl("cf3", t, e, Gl, 0, -1, 1), jl("cf4", t, e, Gl, 0, 1, 1), jl("cn1", t, e, Gl, -1, 0, -1), jl("cn2", t, e, Gl, 1, 0, -1), jl("cn3", t, e, Gl, 0, -1, -1), jl("cn4", t, e, Gl, 0, 1, -1), e.getAttribute("position").needsUpdate = !0
        };
        var Vl = new Ce;

        function Wl(e, t) {
            this.object = e, void 0 === t && (t = 16776960);
            var n = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]),
                r = new Float32Array(24), i = new Dt;
            i.setIndex(new vt(n, 1)), i.setAttribute("position", new vt(r, 3)), ba.call(this, i, new ha({
                color: t,
                toneMapped: !1
            })), this.type = "BoxHelper", this.matrixAutoUpdate = !1, this.update()
        }

        function ql(e, t) {
            this.type = "Box3Helper", this.box = e, t = t || 16776960;
            var n = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]),
                r = new Dt;
            r.setIndex(new vt(n, 1)), r.setAttribute("position", new St([1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1], 3)), ba.call(this, r, new ha({
                color: t,
                toneMapped: !1
            })), this.type = "Box3Helper", this.geometry.computeBoundingSphere()
        }

        function Xl(e, t, n) {
            this.plane = e, this.size = void 0 === t ? 1 : t;
            var r = void 0 !== n ? n : 16776960, i = new Dt;
            i.setAttribute("position", new St([1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0], 3)), i.computeBoundingSphere(), ga.call(this, i, new ha({
                color: r,
                toneMapped: !1
            })), this.type = "PlaneHelper";
            var a = new Dt;
            a.setAttribute("position", new St([1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1], 3)), a.computeBoundingSphere(), this.add(new $t(a, new ft({
                color: r,
                opacity: .2,
                transparent: !0,
                depthWrite: !1,
                toneMapped: !1
            })))
        }

        Wl.prototype = Object.create(ba.prototype), Wl.prototype.constructor = Wl, Wl.prototype.update = function (e) {
            if (void 0 !== e && console.warn("THREE.BoxHelper: .update() has no longer arguments."), void 0 !== this.object && Vl.setFromObject(this.object), !Vl.isEmpty()) {
                var t = Vl.min, n = Vl.max, r = this.geometry.attributes.position, i = r.array;
                i[0] = n.x, i[1] = n.y, i[2] = n.z, i[3] = t.x, i[4] = n.y, i[5] = n.z, i[6] = t.x, i[7] = t.y, i[8] = n.z, i[9] = n.x, i[10] = t.y, i[11] = n.z, i[12] = n.x, i[13] = n.y, i[14] = t.z, i[15] = t.x, i[16] = n.y, i[17] = t.z, i[18] = t.x, i[19] = t.y, i[20] = t.z, i[21] = n.x, i[22] = t.y, i[23] = t.z, r.needsUpdate = !0, this.geometry.computeBoundingSphere()
            }
        }, Wl.prototype.setFromObject = function (e) {
            return this.object = e, this.update(), this
        }, Wl.prototype.copy = function (e) {
            return ba.prototype.copy.call(this, e), this.object = e.object, this
        }, Wl.prototype.clone = function () {
            return (new this.constructor).copy(this)
        }, ql.prototype = Object.create(ba.prototype), ql.prototype.constructor = ql, ql.prototype.updateMatrixWorld = function (e) {
            var t = this.box;
            t.isEmpty() || (t.getCenter(this.position), t.getSize(this.scale), this.scale.multiplyScalar(.5), ve.prototype.updateMatrixWorld.call(this, e))
        }, Xl.prototype = Object.create(ga.prototype), Xl.prototype.constructor = Xl, Xl.prototype.updateMatrixWorld = function (e) {
            var t = -this.plane.constant;
            Math.abs(t) < 1e-8 && (t = 1e-8), this.scale.set(.5 * this.size, .5 * this.size, t), this.children[0].material.side = t < 0 ? 1 : a, this.lookAt(this.plane.normal), ve.prototype.updateMatrixWorld.call(this, e)
        };
        var Yl, Jl, Zl = new V;

        function Kl(e, t, n, r, i, a) {
            ve.call(this), this.type = "ArrowHelper", void 0 === e && (e = new V(0, 0, 1)), void 0 === t && (t = new V(0, 0, 0)), void 0 === n && (n = 1), void 0 === r && (r = 16776960), void 0 === i && (i = .2 * n), void 0 === a && (a = .2 * i), void 0 === Yl && ((Yl = new Dt).setAttribute("position", new St([0, 0, 0, 0, 1, 0], 3)), (Jl = new Vo(0, .5, 1, 5, 1)).translate(0, -.5, 0)), this.position.copy(t), this.line = new ga(Yl, new ha({
                color: r,
                toneMapped: !1
            })), this.line.matrixAutoUpdate = !1, this.add(this.line), this.cone = new $t(Jl, new ft({
                color: r,
                toneMapped: !1
            })), this.cone.matrixAutoUpdate = !1, this.add(this.cone), this.setDirection(e), this.setLength(n, i, a)
        }

        function Ql(e) {
            var t = [0, 0, 0, e = e || 1, 0, 0, 0, 0, 0, 0, e, 0, 0, 0, 0, 0, 0, e], n = new Dt;
            n.setAttribute("position", new St(t, 3)), n.setAttribute("color", new St([1, 0, 0, 1, .6, 0, 0, 1, 0, .6, 1, 0, 0, 0, 1, 0, .6, 1], 3));
            var r = new ha({vertexColors: !0, toneMapped: !1});
            ba.call(this, n, r), this.type = "AxesHelper"
        }

        Kl.prototype = Object.create(ve.prototype), Kl.prototype.constructor = Kl, Kl.prototype.setDirection = function (e) {
            if (e.y > .99999) this.quaternion.set(0, 0, 0, 1); else if (e.y < -.99999) this.quaternion.set(1, 0, 0, 0); else {
                Zl.set(e.z, 0, -e.x).normalize();
                var t = Math.acos(e.y);
                this.quaternion.setFromAxisAngle(Zl, t)
            }
        }, Kl.prototype.setLength = function (e, t, n) {
            void 0 === t && (t = .2 * e), void 0 === n && (n = .2 * t), this.line.scale.set(1, Math.max(1e-4, e - t), 1), this.line.updateMatrix(), this.cone.scale.set(n, t, n), this.cone.position.y = e, this.cone.updateMatrix()
        }, Kl.prototype.setColor = function (e) {
            this.line.material.color.set(e), this.cone.material.color.set(e)
        }, Kl.prototype.copy = function (e) {
            return ve.prototype.copy.call(this, e, !1), this.line.copy(e.line), this.cone.copy(e.cone), this
        }, Kl.prototype.clone = function () {
            return (new this.constructor).copy(this)
        }, Ql.prototype = Object.create(ba.prototype), Ql.prototype.constructor = Ql;
        var $l = Math.pow(2, 8), eu = [.125, .215, .35, .446, .526, .582], tu = 5 + eu.length,
            nu = {3e3: 0, [E]: 1, 3002: 2, 3004: 3, 3005: 4, 3006: 5, 3007: 6},
            ru = new uc, {_lodPlanes: iu, _sizeLods: au, _sigmas: ou} = function () {
                for (var e = [], t = [], n = [], r = 8, i = 0; i < tu; i++) {
                    var a = Math.pow(2, r);
                    t.push(a);
                    var o = 1 / a;
                    i > 4 ? o = eu[i - 8 + 4 - 1] : 0 == i && (o = 0), n.push(o);
                    for (var s = 1 / (a - 1), c = -s / 2, l = 1 + s / 2, u = [c, c, l, c, l, l, c, c, l, l, c, l], h = new Float32Array(108), p = new Float32Array(72), d = new Float32Array(36), f = 0; f < 6; f++) {
                        var m = f % 3 * 2 / 3 - 1, v = f > 2 ? 0 : -1,
                            g = [m, v, 0, m + 2 / 3, v, 0, m + 2 / 3, v + 1, 0, m, v, 0, m + 2 / 3, v + 1, 0, m, v + 1, 0];
                        h.set(g, 18 * f), p.set(u, 12 * f);
                        var y = [f, f, f, f, f, f];
                        d.set(y, 6 * f)
                    }
                    var x = new Dt;
                    x.setAttribute("position", new vt(h, 3)), x.setAttribute("uv", new vt(p, 2)), x.setAttribute("faceIndex", new vt(d, 1)), e.push(x), r > 4 && r--
                }
                return {_lodPlanes: e, _sizeLods: t, _sigmas: n}
            }(), su = null, cu = (1 + Math.sqrt(5)) / 2, lu = 1 / cu,
            uu = [new V(1, 1, 1), new V(-1, 1, 1), new V(1, 1, -1), new V(-1, 1, -1), new V(0, cu, lu), new V(0, cu, -lu), new V(lu, 0, cu), new V(-lu, 0, cu), new V(cu, lu, 0), new V(-cu, lu, 0)];

        function hu(e) {
            var t, n, r, i;
            this._renderer = e, this._pingPongRenderTarget = null, this._blurMaterial = (t = 20, n = new Float32Array(t), r = new V(0, 1, 0), (i = new Ko({
                defines: {n: t},
                uniforms: {
                    envMap: {value: null},
                    samples: {value: 1},
                    weights: {value: n},
                    latitudinal: {value: !1},
                    dTheta: {value: 0},
                    mipInt: {value: 0},
                    poleAxis: {value: r},
                    inputEncoding: {value: nu[3e3]},
                    outputEncoding: {value: nu[3e3]}
                },
                vertexShader: gu(),
                fragmentShader: `\nprecision mediump float;\nprecision mediump int;\nvarying vec3 vOutputDirection;\nuniform sampler2D envMap;\nuniform int samples;\nuniform float weights[n];\nuniform bool latitudinal;\nuniform float dTheta;\nuniform float mipInt;\nuniform vec3 poleAxis;\n\n${yu()}\n\n#define ENVMAP_TYPE_CUBE_UV\n#include <cube_uv_reflection_fragment>\n\nvec3 getSample(float theta, vec3 axis) {\n\tfloat cosTheta = cos(theta);\n\t// Rodrigues' axis-angle rotation\n\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t+ cross(axis, vOutputDirection) * sin(theta)\n\t\t+ axis * dot(axis, vOutputDirection) * (1.0 - cosTheta);\n\treturn bilinearCubeUV(envMap, sampleDirection, mipInt);\n}\n\nvoid main() {\n\tvec3 axis = latitudinal ? poleAxis : cross(poleAxis, vOutputDirection);\n\tif (all(equal(axis, vec3(0.0))))\n\t\taxis = vec3(vOutputDirection.z, 0.0, - vOutputDirection.x);\n\taxis = normalize(axis);\n\tgl_FragColor = vec4(0.0);\n\tgl_FragColor.rgb += weights[0] * getSample(0.0, axis);\n\tfor (int i = 1; i < n; i++) {\n\t\tif (i >= samples)\n\t\t\tbreak;\n\t\tfloat theta = dTheta * float(i);\n\t\tgl_FragColor.rgb += weights[i] * getSample(-1.0 * theta, axis);\n\t\tgl_FragColor.rgb += weights[i] * getSample(theta, axis);\n\t}\n\tgl_FragColor = linearToOutputTexel(gl_FragColor);\n}\n\t\t`,
                blending: 0,
                depthTest: !1,
                depthWrite: !1
            })).type = "SphericalGaussianBlur", i), this._equirectShader = null, this._cubemapShader = null, this._compileMaterial(this._blurMaterial)
        }

        function pu(e) {
            return void 0 !== e && 1009 === e.type && (3e3 === e.encoding || e.encoding === E || 3007 === e.encoding)
        }

        function du(e) {
            var t = new B(3 * $l, 3 * $l, e);
            return t.texture.mapping = 306, t.texture.name = "PMREM.cubeUv", t.scissorTest = !0, t
        }

        function fu(e, t, n, r, i) {
            e.viewport.set(t, n, r, i), e.scissor.set(t, n, r, i)
        }

        function mu() {
            var e = new Ko({
                uniforms: {
                    envMap: {value: null},
                    texelSize: {value: new I(1, 1)},
                    inputEncoding: {value: nu[3e3]},
                    outputEncoding: {value: nu[3e3]}
                },
                vertexShader: gu(),
                fragmentShader: `\nprecision mediump float;\nprecision mediump int;\nvarying vec3 vOutputDirection;\nuniform sampler2D envMap;\nuniform vec2 texelSize;\n\n${yu()}\n\n#include <common>\n\nvoid main() {\n\tgl_FragColor = vec4(0.0);\n\tvec3 outputDirection = normalize(vOutputDirection);\n\tvec2 uv = equirectUv( outputDirection );\n\tvec2 f = fract(uv / texelSize - 0.5);\n\tuv -= f * texelSize;\n\tvec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n\tuv.x += texelSize.x;\n\tvec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n\tuv.y += texelSize.y;\n\tvec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n\tuv.x -= texelSize.x;\n\tvec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n\tvec3 tm = mix(tl, tr, f.x);\n\tvec3 bm = mix(bl, br, f.x);\n\tgl_FragColor.rgb = mix(tm, bm, f.y);\n\tgl_FragColor = linearToOutputTexel(gl_FragColor);\n}\n\t\t`,
                blending: 0,
                depthTest: !1,
                depthWrite: !1
            });
            return e.type = "EquirectangularToCubeUV", e
        }

        function vu() {
            var e = new Ko({
                uniforms: {
                    envMap: {value: null},
                    inputEncoding: {value: nu[3e3]},
                    outputEncoding: {value: nu[3e3]}
                },
                vertexShader: gu(),
                fragmentShader: `\nprecision mediump float;\nprecision mediump int;\nvarying vec3 vOutputDirection;\nuniform samplerCube envMap;\n\n${yu()}\n\nvoid main() {\n\tgl_FragColor = vec4(0.0);\n\tgl_FragColor.rgb = envMapTexelToLinear(textureCube(envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ))).rgb;\n\tgl_FragColor = linearToOutputTexel(gl_FragColor);\n}\n\t\t`,
                blending: 0,
                depthTest: !1,
                depthWrite: !1
            });
            return e.type = "CubemapToCubeUV", e
        }

        function gu() {
            return "\nprecision mediump float;\nprecision mediump int;\nattribute vec3 position;\nattribute vec2 uv;\nattribute float faceIndex;\nvarying vec3 vOutputDirection;\n\n// RH coordinate system; PMREM face-indexing convention\nvec3 getDirection(vec2 uv, float face) {\n\tuv = 2.0 * uv - 1.0;\n\tvec3 direction = vec3(uv, 1.0);\n\tif (face == 0.0) {\n\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\t} else if (face == 1.0) {\n\t\tdirection = direction.xzy;\n\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\t} else if (face == 2.0) {\n\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\t} else if (face == 3.0) {\n\t\tdirection = direction.zyx;\n\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\t} else if (face == 4.0) {\n\t\tdirection = direction.xzy;\n\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\t} else if (face == 5.0) {\n\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\t}\n\treturn direction;\n}\n\nvoid main() {\n\tvOutputDirection = getDirection(uv, faceIndex);\n\tgl_Position = vec4( position, 1.0 );\n}\n\t"
        }

        function yu() {
            return "\nuniform int inputEncoding;\nuniform int outputEncoding;\n\n#include <encodings_pars_fragment>\n\nvec4 inputTexelToLinear(vec4 value){\n\tif(inputEncoding == 0){\n\t\treturn value;\n\t}else if(inputEncoding == 1){\n\t\treturn sRGBToLinear(value);\n\t}else if(inputEncoding == 2){\n\t\treturn RGBEToLinear(value);\n\t}else if(inputEncoding == 3){\n\t\treturn RGBMToLinear(value, 7.0);\n\t}else if(inputEncoding == 4){\n\t\treturn RGBMToLinear(value, 16.0);\n\t}else if(inputEncoding == 5){\n\t\treturn RGBDToLinear(value, 256.0);\n\t}else{\n\t\treturn GammaToLinear(value, 2.2);\n\t}\n}\n\nvec4 linearToOutputTexel(vec4 value){\n\tif(outputEncoding == 0){\n\t\treturn value;\n\t}else if(outputEncoding == 1){\n\t\treturn LinearTosRGB(value);\n\t}else if(outputEncoding == 2){\n\t\treturn LinearToRGBE(value);\n\t}else if(outputEncoding == 3){\n\t\treturn LinearToRGBM(value, 7.0);\n\t}else if(outputEncoding == 4){\n\t\treturn LinearToRGBM(value, 16.0);\n\t}else if(outputEncoding == 5){\n\t\treturn LinearToRGBD(value, 256.0);\n\t}else{\n\t\treturn LinearToGamma(value, 2.2);\n\t}\n}\n\nvec4 envMapTexelToLinear(vec4 color) {\n\treturn inputTexelToLinear(color);\n}\n\t"
        }

        hu.prototype = {
            constructor: hu, fromScene: function (e, t = 0, n = .1, r = 100) {
                su = this._renderer.getRenderTarget();
                var i = this._allocateTargets();
                return this._sceneToCubeUV(e, n, r, i), t > 0 && this._blur(i, 0, 0, t), this._applyPMREM(i), this._cleanup(i), i
            }, fromEquirectangular: function (e) {
                return e.magFilter = h, e.minFilter = h, e.generateMipmaps = !1, this.fromCubemap(e)
            }, fromCubemap: function (e) {
                su = this._renderer.getRenderTarget();
                var t = this._allocateTargets(e);
                return this._textureToCubeUV(e, t), this._applyPMREM(t), this._cleanup(t), t
            }, compileCubemapShader: function () {
                null === this._cubemapShader && (this._cubemapShader = vu(), this._compileMaterial(this._cubemapShader))
            }, compileEquirectangularShader: function () {
                null === this._equirectShader && (this._equirectShader = mu(), this._compileMaterial(this._equirectShader))
            }, dispose: function () {
                this._blurMaterial.dispose(), null !== this._cubemapShader && this._cubemapShader.dispose(), null !== this._equirectShader && this._equirectShader.dispose();
                for (var e = 0; e < iu.length; e++) iu[e].dispose()
            }, _cleanup: function (e) {
                this._pingPongRenderTarget.dispose(), this._renderer.setRenderTarget(su), e.scissorTest = !1, e.setSize(e.width, e.height)
            }, _allocateTargets: function (e) {
                var t = {
                    magFilter: h,
                    minFilter: h,
                    generateMipmaps: !1,
                    type: 1009,
                    format: x,
                    encoding: pu(e) ? e.encoding : 3002,
                    depthBuffer: !1,
                    stencilBuffer: !1
                }, n = du(t);
                return n.depthBuffer = !e, this._pingPongRenderTarget = du(t), n
            }, _compileMaterial: function (e) {
                var t = new $t(iu[0], e);
                this._renderer.compile(t, ru)
            }, _sceneToCubeUV: function (e, t, n, r) {
                var i = new fn(90, 1, t, n), a = [1, -1, 1, 1, 1, 1], o = [1, 1, 1, -1, -1, -1], s = this._renderer,
                    c = s.outputEncoding, l = s.toneMapping, u = s.toneMappingExposure, h = s.getClearColor(),
                    p = s.getClearAlpha();
                s.toneMapping = 1, s.toneMappingExposure = 1, s.outputEncoding = 3e3;
                var d = e.background;
                if (d && d.isColor) {
                    d.convertSRGBToLinear();
                    var f = Math.max(d.r, d.g, d.b), m = Math.min(Math.max(Math.ceil(Math.log2(f)), -128), 127);
                    d = d.multiplyScalar(Math.pow(2, -m));
                    var v = (m + 128) / 255;
                    s.setClearColor(d, v), e.background = null
                }
                for (var g = 0; g < 6; g++) {
                    var y = g % 3;
                    0 == y ? (i.up.set(0, a[g], 0), i.lookAt(o[g], 0, 0)) : 1 == y ? (i.up.set(0, 0, a[g]), i.lookAt(0, o[g], 0)) : (i.up.set(0, a[g], 0), i.lookAt(0, 0, o[g])), fu(r, y * $l, g > 2 ? $l : 0, $l, $l), s.setRenderTarget(r), s.render(e, i)
                }
                s.toneMapping = l, s.toneMappingExposure = u, s.outputEncoding = c, s.setClearColor(h, p)
            }, _textureToCubeUV: function (e, t) {
                var n = this._renderer;
                e.isCubeTexture ? null == this._cubemapShader && (this._cubemapShader = vu()) : null == this._equirectShader && (this._equirectShader = mu());
                var r = e.isCubeTexture ? this._cubemapShader : this._equirectShader, i = new $t(iu[0], r),
                    a = r.uniforms;
                a.envMap.value = e, e.isCubeTexture || a.texelSize.value.set(1 / e.image.width, 1 / e.image.height), a.inputEncoding.value = nu[e.encoding], a.outputEncoding.value = nu[t.texture.encoding], fu(t, 0, 0, 3 * $l, 2 * $l), n.setRenderTarget(t), n.render(i, ru)
            }, _applyPMREM: function (e) {
                var t = this._renderer, n = t.autoClear;
                t.autoClear = !1;
                for (var r = 1; r < tu; r++) {
                    var i = Math.sqrt(ou[r] * ou[r] - ou[r - 1] * ou[r - 1]), a = uu[(r - 1) % uu.length];
                    this._blur(e, r - 1, r, i, a)
                }
                t.autoClear = n
            }, _blur: function (e, t, n, r, i) {
                var a = this._pingPongRenderTarget;
                this._halfBlur(e, a, t, n, r, "latitudinal", i), this._halfBlur(a, e, n, n, r, "longitudinal", i)
            }, _halfBlur: function (e, t, n, r, i, a, o) {
                var s = this._renderer, c = this._blurMaterial;
                "latitudinal" !== a && "longitudinal" !== a && console.error("blur direction must be either latitudinal or longitudinal!");
                var l = new $t(iu[r], c), u = c.uniforms, h = au[n] - 1,
                    p = isFinite(i) ? Math.PI / (2 * h) : 2 * Math.PI / 39, d = i / p,
                    f = isFinite(i) ? 1 + Math.floor(3 * d) : 20;
                f > 20 && console.warn(`sigmaRadians, ${i}, is too large and will clip, as it requested ${f} samples when the maximum is set to 20`);
                for (var m = [], v = 0, g = 0; g < 20; ++g) {
                    var y = g / d, x = Math.exp(-y * y / 2);
                    m.push(x), 0 == g ? v += x : g < f && (v += 2 * x)
                }
                for (g = 0; g < m.length; g++) m[g] = m[g] / v;
                u.envMap.value = e.texture, u.samples.value = f, u.weights.value = m, u.latitudinal.value = "latitudinal" === a, o && (u.poleAxis.value = o), u.dTheta.value = p, u.mipInt.value = 8 - n, u.inputEncoding.value = nu[e.texture.encoding], u.outputEncoding.value = nu[e.texture.encoding];
                var b = au[r];
                fu(t, y = 3 * Math.max(0, $l - 2 * b), (0 === r ? 0 : 2 * $l) + 2 * b * (r > 4 ? r - 8 + 4 : 0), 3 * b, 2 * b), s.setRenderTarget(t), s.render(l, ru)
            }
        };

        function xu(e) {
            console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead."), ks.call(this, e), this.type = "catmullrom"
        }

        Ns.create = function (e, t) {
            return console.log("THREE.Curve.create() has been deprecated"), e.prototype = Object.create(Ns.prototype), e.prototype.constructor = e, e.prototype.getPoint = t, e
        }, Object.assign(ec.prototype, {
            createPointsGeometry: function (e) {
                console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
                var t = this.getPoints(e);
                return this.createGeometry(t)
            }, createSpacedPointsGeometry: function (e) {
                console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
                var t = this.getSpacedPoints(e);
                return this.createGeometry(t)
            }, createGeometry: function (e) {
                console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
                for (var t = new sn, n = 0, r = e.length; n < r; n++) {
                    var i = e[n];
                    t.vertices.push(new V(i.x, i.y, i.z || 0))
                }
                return t
            }
        }), Object.assign(tc.prototype, {
            fromPoints: function (e) {
                return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."), this.setFromPoints(e)
            }
        }), Object.create(ks.prototype), Object.create(ks.prototype), xu.prototype = Object.create(ks.prototype), Object.assign(xu.prototype, {
            initFromArray: function () {
                console.error("THREE.Spline: .initFromArray() has been removed.")
            }, getControlPointsArray: function () {
                console.error("THREE.Spline: .getControlPointsArray() has been removed.")
            }, reparametrizeByArcLength: function () {
                console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.")
            }
        }), Nl.prototype.setColors = function () {
            console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")
        }, Ll.prototype.update = function () {
            console.error("THREE.SkeletonHelper: update() no longer needs to be called.")
        }, Object.assign(Ts.prototype, {
            extractUrlBase: function (e) {
                return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."), yc.extractUrlBase(e)
            }
        }), Ts.Handlers = {
            add: function () {
                console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")
            }, get: function () {
                console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")
            }
        }, Object.assign(Mc.prototype, {
            setTexturePath: function (e) {
                return console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath()."), this.setResourcePath(e)
            }
        }), Object.assign(yl.prototype, {
            center: function (e) {
                return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."), this.getCenter(e)
            }, empty: function () {
                return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."), this.isEmpty()
            }, isIntersectionBox: function (e) {
                return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."), this.intersectsBox(e)
            }, size: function (e) {
                return console.warn("THREE.Box2: .size() has been renamed to .getSize()."), this.getSize(e)
            }
        }), Object.assign(Ce.prototype, {
            center: function (e) {
                return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."), this.getCenter(e)
            }, empty: function () {
                return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."), this.isEmpty()
            }, isIntersectionBox: function (e) {
                return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."), this.intersectsBox(e)
            }, isIntersectionSphere: function (e) {
                return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."), this.intersectsSphere(e)
            }, size: function (e) {
                return console.warn("THREE.Box3: .size() has been renamed to .getSize()."), this.getSize(e)
            }
        }), Object.assign(Ne.prototype, {
            empty: function () {
                return console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty()."), this.isEmpty()
            }
        }), bn.prototype.setFromMatrix = function (e) {
            return console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix()."), this.setFromProjectionMatrix(e)
        }, _l.prototype.center = function (e) {
            return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."), this.getCenter(e)
        }, Object.assign(O, {
            random16: function () {
                return console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead."), Math.random()
            }, nearestPowerOfTwo: function (e) {
                return console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo()."), O.floorPowerOfTwo(e)
            }, nextPowerOfTwo: function (e) {
                return console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo()."), O.ceilPowerOfTwo(e)
            }
        }), Object.assign(N.prototype, {
            flattenToArrayOffset: function (e, t) {
                return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."), this.toArray(e, t)
            }, multiplyVector3: function (e) {
                return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."), e.applyMatrix3(this)
            }, multiplyVector3Array: function () {
                console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")
            }, applyToBufferAttribute: function (e) {
                return console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead."), e.applyMatrix3(this)
            }, applyToVector3Array: function () {
                console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")
            }
        }), Object.assign(Q.prototype, {
            extractPosition: function (e) {
                return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."), this.copyPosition(e)
            }, flattenToArrayOffset: function (e, t) {
                return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."), this.toArray(e, t)
            }, getPosition: function () {
                return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."), (new V).setFromMatrixColumn(this, 3)
            }, setRotationFromQuaternion: function (e) {
                return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."), this.makeRotationFromQuaternion(e)
            }, multiplyToArray: function () {
                console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")
            }, multiplyVector3: function (e) {
                return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."), e.applyMatrix4(this)
            }, multiplyVector4: function (e) {
                return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."), e.applyMatrix4(this)
            }, multiplyVector3Array: function () {
                console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")
            }, rotateAxis: function (e) {
                console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."), e.transformDirection(this)
            }, crossVector: function (e) {
                return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."), e.applyMatrix4(this)
            }, translate: function () {
                console.error("THREE.Matrix4: .translate() has been removed.")
            }, rotateX: function () {
                console.error("THREE.Matrix4: .rotateX() has been removed.")
            }, rotateY: function () {
                console.error("THREE.Matrix4: .rotateY() has been removed.")
            }, rotateZ: function () {
                console.error("THREE.Matrix4: .rotateZ() has been removed.")
            }, rotateByAxis: function () {
                console.error("THREE.Matrix4: .rotateByAxis() has been removed.")
            }, applyToBufferAttribute: function (e) {
                return console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead."), e.applyMatrix4(this)
            }, applyToVector3Array: function () {
                console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")
            }, makeFrustum: function (e, t, n, r, i, a) {
                return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."), this.makePerspective(e, t, r, n, i, a)
            }
        }), qe.prototype.isIntersectionLine = function (e) {
            return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."), this.intersectsLine(e)
        }, G.prototype.multiplyVector3 = function (e) {
            return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."), e.applyQuaternion(this)
        }, Object.assign(ke.prototype, {
            isIntersectionBox: function (e) {
                return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."), this.intersectsBox(e)
            }, isIntersectionPlane: function (e) {
                return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."), this.intersectsPlane(e)
            }, isIntersectionSphere: function (e) {
                return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."), this.intersectsSphere(e)
            }
        }), Object.assign(rt.prototype, {
            area: function () {
                return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."), this.getArea()
            }, barycoordFromPoint: function (e, t) {
                return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."), this.getBarycoord(e, t)
            }, midpoint: function (e) {
                return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."), this.getMidpoint(e)
            }, normal: function (e) {
                return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."), this.getNormal(e)
            }, plane: function (e) {
                return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."), this.getPlane(e)
            }
        }), Object.assign(rt, {
            barycoordFromPoint: function (e, t, n, r, i) {
                return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."), rt.getBarycoord(e, t, n, r, i)
            }, normal: function (e, t, n, r) {
                return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."), rt.getNormal(e, t, n, r)
            }
        }), Object.assign(nc.prototype, {
            extractAllPoints: function (e) {
                return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."), this.extractPoints(e)
            }, extrude: function (e) {
                return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."), new Ao(this, e)
            }, makeGeometry: function (e) {
                return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."), new Bo(this, e)
            }
        }), Object.assign(I.prototype, {
            fromAttribute: function (e, t, n) {
                return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."), this.fromBufferAttribute(e, t, n)
            }, distanceToManhattan: function (e) {
                return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."), this.manhattanDistanceTo(e)
            }, lengthManhattan: function () {
                return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."), this.manhattanLength()
            }
        }), Object.assign(V.prototype, {
            setEulerFromRotationMatrix: function () {
                console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")
            }, setEulerFromQuaternion: function () {
                console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")
            }, getPositionFromMatrix: function (e) {
                return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."), this.setFromMatrixPosition(e)
            }, getScaleFromMatrix: function (e) {
                return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."), this.setFromMatrixScale(e)
            }, getColumnFromMatrix: function (e, t) {
                return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."), this.setFromMatrixColumn(t, e)
            }, applyProjection: function (e) {
                return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."), this.applyMatrix4(e)
            }, fromAttribute: function (e, t, n) {
                return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."), this.fromBufferAttribute(e, t, n)
            }, distanceToManhattan: function (e) {
                return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."), this.manhattanDistanceTo(e)
            }, lengthManhattan: function () {
                return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."), this.manhattanLength()
            }
        }), Object.assign(F.prototype, {
            fromAttribute: function (e, t, n) {
                return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."), this.fromBufferAttribute(e, t, n)
            }, lengthManhattan: function () {
                return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."), this.manhattanLength()
            }
        }), Object.assign(sn.prototype, {
            computeTangents: function () {
                console.error("THREE.Geometry: .computeTangents() has been removed.")
            }, computeLineDistances: function () {
                console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.")
            }, applyMatrix: function (e) {
                return console.warn("THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4()."), this.applyMatrix4(e)
            }
        }), Object.assign(ve.prototype, {
            getChildByName: function (e) {
                return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."), this.getObjectByName(e)
            }, renderDepth: function () {
                console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")
            }, translate: function (e, t) {
                return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."), this.translateOnAxis(t, e)
            }, getWorldRotation: function () {
                console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")
            }, applyMatrix: function (e) {
                return console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4()."), this.applyMatrix4(e)
            }
        }), Object.defineProperties(ve.prototype, {
            eulerOrder: {
                get: function () {
                    return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."), this.rotation.order
                }, set: function (e) {
                    console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."), this.rotation.order = e
                }
            }, useQuaternion: {
                get: function () {
                    console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")
                }, set: function () {
                    console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")
                }
            }
        }), Object.assign($t.prototype, {
            setDrawMode: function () {
                console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")
            }
        }), Object.defineProperties($t.prototype, {
            drawMode: {
                get: function () {
                    return console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode."), 0
                }, set: function () {
                    console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")
                }
            }
        }), Object.defineProperties(ea.prototype, {
            objects: {
                get: function () {
                    return console.warn("THREE.LOD: .objects has been renamed to .levels."), this.levels
                }
            }
        }), Object.defineProperty(ia.prototype, "useVertexTexture", {
            get: function () {
                console.warn("THREE.Skeleton: useVertexTexture has been removed.")
            }, set: function () {
                console.warn("THREE.Skeleton: useVertexTexture has been removed.")
            }
        }), ta.prototype.initBones = function () {
            console.error("THREE.SkinnedMesh: initBones() has been removed.")
        }, Object.defineProperty(Ns.prototype, "__arcLengthDivisions", {
            get: function () {
                return console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."), this.arcLengthDivisions
            }, set: function (e) {
                console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."), this.arcLengthDivisions = e
            }
        }), fn.prototype.setLens = function (e, t) {
            console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."), void 0 !== t && (this.filmGauge = t), this.setFocalLength(e)
        }, Object.defineProperties(rc.prototype, {
            onlyShadow: {
                set: function () {
                    console.warn("THREE.Light: .onlyShadow has been removed.")
                }
            }, shadowCameraFov: {
                set: function (e) {
                    console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."), this.shadow.camera.fov = e
                }
            }, shadowCameraLeft: {
                set: function (e) {
                    console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."), this.shadow.camera.left = e
                }
            }, shadowCameraRight: {
                set: function (e) {
                    console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."), this.shadow.camera.right = e
                }
            }, shadowCameraTop: {
                set: function (e) {
                    console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."), this.shadow.camera.top = e
                }
            }, shadowCameraBottom: {
                set: function (e) {
                    console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."), this.shadow.camera.bottom = e
                }
            }, shadowCameraNear: {
                set: function (e) {
                    console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."), this.shadow.camera.near = e
                }
            }, shadowCameraFar: {
                set: function (e) {
                    console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."), this.shadow.camera.far = e
                }
            }, shadowCameraVisible: {
                set: function () {
                    console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")
                }
            }, shadowBias: {
                set: function (e) {
                    console.warn("THREE.Light: .shadowBias is now .shadow.bias."), this.shadow.bias = e
                }
            }, shadowDarkness: {
                set: function () {
                    console.warn("THREE.Light: .shadowDarkness has been removed.")
                }
            }, shadowMapWidth: {
                set: function (e) {
                    console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."), this.shadow.mapSize.width = e
                }
            }, shadowMapHeight: {
                set: function (e) {
                    console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."), this.shadow.mapSize.height = e
                }
            }
        }), Object.defineProperties(vt.prototype, {
            length: {
                get: function () {
                    return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."), this.array.length
                }
            }, dynamic: {
                get: function () {
                    return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."), 35048 === this.usage
                }, set: function () {
                    console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."), this.setUsage(35048)
                }
            }
        }), Object.assign(vt.prototype, {
            setDynamic: function (e) {
                return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."), this.setUsage(!0 === e ? 35048 : 35044), this
            }, copyIndicesArray: function () {
                console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")
            }, setArray: function () {
                console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")
            }
        }), Object.assign(Dt.prototype, {
            addIndex: function (e) {
                console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."), this.setIndex(e)
            }, addAttribute: function (e, t) {
                return console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."), t && t.isBufferAttribute || t && t.isInterleavedBufferAttribute ? "index" === e ? (console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."), this.setIndex(t), this) : this.setAttribute(e, t) : (console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."), this.setAttribute(e, new vt(arguments[1], arguments[2])))
            }, addDrawCall: function (e, t, n) {
                void 0 !== n && console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."), console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."), this.addGroup(e, t)
            }, clearDrawCalls: function () {
                console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."), this.clearGroups()
            }, computeTangents: function () {
                console.warn("THREE.BufferGeometry: .computeTangents() has been removed.")
            }, computeOffsets: function () {
                console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")
            }, removeAttribute: function (e) {
                return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."), this.deleteAttribute(e)
            }, applyMatrix: function (e) {
                return console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4()."), this.applyMatrix4(e)
            }
        }), Object.defineProperties(Dt.prototype, {
            drawcalls: {
                get: function () {
                    return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."), this.groups
                }
            }, offsets: {
                get: function () {
                    return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."), this.groups
                }
            }
        }), Object.defineProperties(xc.prototype, {
            maxInstancedCount: {
                get: function () {
                    return console.warn("THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount."), this.instanceCount
                }, set: function (e) {
                    console.warn("THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount."), this.instanceCount = e
                }
            }
        }), Object.defineProperties(dl.prototype, {
            linePrecision: {
                get: function () {
                    return console.warn("THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead."), this.params.Line.threshold
                }, set: function (e) {
                    console.warn("THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead."), this.params.Line.threshold = e
                }
            }
        }), Object.defineProperties(Li.prototype, {
            dynamic: {
                get: function () {
                    return console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead."), 35048 === this.usage
                }, set: function (e) {
                    console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead."), this.setUsage(e)
                }
            }
        }), Object.assign(Li.prototype, {
            setDynamic: function (e) {
                return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."), this.setUsage(!0 === e ? 35048 : 35044), this
            }, setArray: function () {
                console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")
            }
        }), Object.assign(Lo.prototype, {
            getArrays: function () {
                console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.")
            }, addShapeList: function () {
                console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.")
            }, addShape: function () {
                console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.")
            }
        }), Object.defineProperties(hl.prototype, {
            dynamic: {
                set: function () {
                    console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.")
                }
            }, onUpdate: {
                value: function () {
                    return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."), this
                }
            }
        }), Object.defineProperties(dt.prototype, {
            wrapAround: {
                get: function () {
                    console.warn("THREE.Material: .wrapAround has been removed.")
                }, set: function () {
                    console.warn("THREE.Material: .wrapAround has been removed.")
                }
            }, overdraw: {
                get: function () {
                    console.warn("THREE.Material: .overdraw has been removed.")
                }, set: function () {
                    console.warn("THREE.Material: .overdraw has been removed.")
                }
            }, wrapRGB: {
                get: function () {
                    return console.warn("THREE.Material: .wrapRGB has been removed."), new st
                }
            }, shading: {
                get: function () {
                    console.error("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.")
                }, set: function (e) {
                    console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead."), this.flatShading = 1 === e
                }
            }, stencilMask: {
                get: function () {
                    return console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead."), this.stencilFuncMask
                }, set: function (e) {
                    console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead."), this.stencilFuncMask = e
                }
            }
        }), Object.defineProperties(es.prototype, {
            metal: {
                get: function () {
                    return console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead."), !1
                }, set: function () {
                    console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead")
                }
            }
        }), Object.defineProperties(pn.prototype, {
            derivatives: {
                get: function () {
                    return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."), this.extensions.derivatives
                }, set: function (e) {
                    console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."), this.extensions.derivatives = e
                }
            }
        }), Object.assign(Ti.prototype, {
            clearTarget: function (e, t, n, r) {
                console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."), this.setRenderTarget(e), this.clear(t, n, r)
            }, animate: function (e) {
                console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."), this.setAnimationLoop(e)
            }, getCurrentRenderTarget: function () {
                return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."), this.getRenderTarget()
            }, getMaxAnisotropy: function () {
                return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."), this.capabilities.getMaxAnisotropy()
            }, getPrecision: function () {
                return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."), this.capabilities.precision
            }, resetGLState: function () {
                return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."), this.state.reset()
            }, supportsFloatTextures: function () {
                return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."), this.extensions.get("OES_texture_float")
            }, supportsHalfFloatTextures: function () {
                return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."), this.extensions.get("OES_texture_half_float")
            }, supportsStandardDerivatives: function () {
                return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."), this.extensions.get("OES_standard_derivatives")
            }, supportsCompressedTextureS3TC: function () {
                return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."), this.extensions.get("WEBGL_compressed_texture_s3tc")
            }, supportsCompressedTexturePVRTC: function () {
                return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."), this.extensions.get("WEBGL_compressed_texture_pvrtc")
            }, supportsBlendMinMax: function () {
                return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."), this.extensions.get("EXT_blend_minmax")
            }, supportsVertexTextures: function () {
                return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."), this.capabilities.vertexTextures
            }, supportsInstancedArrays: function () {
                return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."), this.extensions.get("ANGLE_instanced_arrays")
            }, enableScissorTest: function (e) {
                console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."), this.setScissorTest(e)
            }, initMaterial: function () {
                console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")
            }, addPrePlugin: function () {
                console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")
            }, addPostPlugin: function () {
                console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")
            }, updateShadowMap: function () {
                console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")
            }, setFaceCulling: function () {
                console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")
            }, allocTextureUnit: function () {
                console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")
            }, setTexture: function () {
                console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")
            }, setTexture2D: function () {
                console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")
            }, setTextureCube: function () {
                console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")
            }, getActiveMipMapLevel: function () {
                return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."), this.getActiveMipmapLevel()
            }
        }), Object.defineProperties(Ti.prototype, {
            shadowMapEnabled: {
                get: function () {
                    return this.shadowMap.enabled
                }, set: function (e) {
                    console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."), this.shadowMap.enabled = e
                }
            }, shadowMapType: {
                get: function () {
                    return this.shadowMap.type
                }, set: function (e) {
                    console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."), this.shadowMap.type = e
                }
            }, shadowMapCullFace: {
                get: function () {
                    console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")
                }, set: function () {
                    console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")
                }
            }, context: {
                get: function () {
                    return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."), this.getContext()
                }
            }, vr: {
                get: function () {
                    return console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr"), this.xr
                }
            }, gammaInput: {
                get: function () {
                    return console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead."), !1
                }, set: function () {
                    console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.")
                }
            }, gammaOutput: {
                get: function () {
                    return console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."), !1
                }, set: function (e) {
                    console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."), this.outputEncoding = !0 === e ? E : 3e3
                }
            }
        }), Object.defineProperties(vi.prototype, {
            cullFace: {
                get: function () {
                    console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")
                }, set: function () {
                    console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")
                }
            }, renderReverseSided: {
                get: function () {
                    console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")
                }, set: function () {
                    console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")
                }
            }, renderSingleSided: {
                get: function () {
                    console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")
                }, set: function () {
                    console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")
                }
            }
        }), Object.defineProperties(B.prototype, {
            wrapS: {
                get: function () {
                    return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."), this.texture.wrapS
                }, set: function (e) {
                    console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."), this.texture.wrapS = e
                }
            }, wrapT: {
                get: function () {
                    return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."), this.texture.wrapT
                }, set: function (e) {
                    console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."), this.texture.wrapT = e
                }
            }, magFilter: {
                get: function () {
                    return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."), this.texture.magFilter
                }, set: function (e) {
                    console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."), this.texture.magFilter = e
                }
            }, minFilter: {
                get: function () {
                    return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."), this.texture.minFilter
                }, set: function (e) {
                    console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."), this.texture.minFilter = e
                }
            }, anisotropy: {
                get: function () {
                    return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."), this.texture.anisotropy
                }, set: function (e) {
                    console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."), this.texture.anisotropy = e
                }
            }, offset: {
                get: function () {
                    return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."), this.texture.offset
                }, set: function (e) {
                    console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."), this.texture.offset = e
                }
            }, repeat: {
                get: function () {
                    return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."), this.texture.repeat
                }, set: function (e) {
                    console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."), this.texture.repeat = e
                }
            }, format: {
                get: function () {
                    return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."), this.texture.format
                }, set: function (e) {
                    console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."), this.texture.format = e
                }
            }, type: {
                get: function () {
                    return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."), this.texture.type
                }, set: function (e) {
                    console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."), this.texture.type = e
                }
            }, generateMipmaps: {
                get: function () {
                    return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."), this.texture.generateMipmaps
                }, set: function (e) {
                    console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."), this.texture.generateMipmaps = e
                }
            }
        }), Object.defineProperties(Wc.prototype, {
            load: {
                value: function (e) {
                    console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");
                    var t = this;
                    return (new Nc).load(e, (function (e) {
                        t.setBuffer(e)
                    })), this
                }
            }, startTime: {
                set: function () {
                    console.warn("THREE.Audio: .startTime is now .play( delay ).")
                }
            }
        }), Kc.prototype.getData = function () {
            return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."), this.getFrequencyData()
        }, mn.prototype.updateCubeMap = function (e, t) {
            return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."), this.update(e, t)
        };
        D.crossOrigin = void 0, D.loadTexture = function (e, t, n, r) {
            console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");
            var i = new Is;
            i.setCrossOrigin(this.crossOrigin);
            var a = i.load(e, n, void 0, r);
            return t && (a.mapping = t), a
        }, D.loadTextureCube = function (e, t, n, r) {
            console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");
            var i = new Os;
            i.setCrossOrigin(this.crossOrigin);
            var a = i.load(e, n, void 0, r);
            return t && (a.mapping = t), a
        }, D.loadCompressedTexture = function () {
            console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")
        }, D.loadCompressedTextureCube = function () {
            console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")
        };
        "undefined" != typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", {detail: {revision: "117"}}))
    }, 91: function (e, t) {
        e.exports = function () {
            throw new Error("define cannot be used indirect")
        }
    }, 97: function (e, t) {
        e.exports = function (e) {
            return e.webpackPolyfill || (e.deprecate = function () {
            }, e.paths = [], e.children || (e.children = []), Object.defineProperty(e, "loaded", {
                enumerable: !0,
                get: function () {
                    return e.l
                }
            }), Object.defineProperty(e, "id", {
                enumerable: !0, get: function () {
                    return e.i
                }
            }), e.webpackPolyfill = 1), e
        }
    }, 98: function (e, t, n) {
        "use strict";
        var r = TypeError, i = Object.getOwnPropertyDescriptor;
        if (i) try {
            i({}, "")
        } catch (e) {
            i = null
        }
        var a = function () {
                throw new r
            }, o = i ? function () {
                try {
                    return a
                } catch (e) {
                    try {
                        return i(arguments, "callee").get
                    } catch (e) {
                        return a
                    }
                }
            }() : a, s = n(173)(), c = Object.getPrototypeOf || function (e) {
                return e.__proto__
            }, l = void 0, u = "undefined" == typeof Uint8Array ? void 0 : c(Uint8Array), h = {
                "%Array%": Array,
                "%ArrayBuffer%": "undefined" == typeof ArrayBuffer ? void 0 : ArrayBuffer,
                "%ArrayBufferPrototype%": "undefined" == typeof ArrayBuffer ? void 0 : ArrayBuffer.prototype,
                "%ArrayIteratorPrototype%": s ? c([][Symbol.iterator]()) : void 0,
                "%ArrayPrototype%": Array.prototype,
                "%ArrayProto_entries%": Array.prototype.entries,
                "%ArrayProto_forEach%": Array.prototype.forEach,
                "%ArrayProto_keys%": Array.prototype.keys,
                "%ArrayProto_values%": Array.prototype.values,
                "%AsyncFromSyncIteratorPrototype%": void 0,
                "%AsyncFunction%": void 0,
                "%AsyncFunctionPrototype%": void 0,
                "%AsyncGenerator%": void 0,
                "%AsyncGeneratorFunction%": void 0,
                "%AsyncGeneratorPrototype%": void 0,
                "%AsyncIteratorPrototype%": l && s && Symbol.asyncIterator ? l[Symbol.asyncIterator]() : void 0,
                "%Atomics%": "undefined" == typeof Atomics ? void 0 : Atomics,
                "%Boolean%": Boolean,
                "%BooleanPrototype%": Boolean.prototype,
                "%DataView%": "undefined" == typeof DataView ? void 0 : DataView,
                "%DataViewPrototype%": "undefined" == typeof DataView ? void 0 : DataView.prototype,
                "%Date%": Date,
                "%DatePrototype%": Date.prototype,
                "%decodeURI%": decodeURI,
                "%decodeURIComponent%": decodeURIComponent,
                "%encodeURI%": encodeURI,
                "%encodeURIComponent%": encodeURIComponent,
                "%Error%": Error,
                "%ErrorPrototype%": Error.prototype,
                "%eval%": eval,
                "%EvalError%": EvalError,
                "%EvalErrorPrototype%": EvalError.prototype,
                "%Float32Array%": "undefined" == typeof Float32Array ? void 0 : Float32Array,
                "%Float32ArrayPrototype%": "undefined" == typeof Float32Array ? void 0 : Float32Array.prototype,
                "%Float64Array%": "undefined" == typeof Float64Array ? void 0 : Float64Array,
                "%Float64ArrayPrototype%": "undefined" == typeof Float64Array ? void 0 : Float64Array.prototype,
                "%Function%": Function,
                "%FunctionPrototype%": Function.prototype,
                "%Generator%": void 0,
                "%GeneratorFunction%": void 0,
                "%GeneratorPrototype%": void 0,
                "%Int8Array%": "undefined" == typeof Int8Array ? void 0 : Int8Array,
                "%Int8ArrayPrototype%": "undefined" == typeof Int8Array ? void 0 : Int8Array.prototype,
                "%Int16Array%": "undefined" == typeof Int16Array ? void 0 : Int16Array,
                "%Int16ArrayPrototype%": "undefined" == typeof Int16Array ? void 0 : Int8Array.prototype,
                "%Int32Array%": "undefined" == typeof Int32Array ? void 0 : Int32Array,
                "%Int32ArrayPrototype%": "undefined" == typeof Int32Array ? void 0 : Int32Array.prototype,
                "%isFinite%": isFinite,
                "%isNaN%": isNaN,
                "%IteratorPrototype%": s ? c(c([][Symbol.iterator]())) : void 0,
                "%JSON%": "object" == typeof JSON ? JSON : void 0,
                "%JSONParse%": "object" == typeof JSON ? JSON.parse : void 0,
                "%Map%": "undefined" == typeof Map ? void 0 : Map,
                "%MapIteratorPrototype%": "undefined" != typeof Map && s ? c((new Map)[Symbol.iterator]()) : void 0,
                "%MapPrototype%": "undefined" == typeof Map ? void 0 : Map.prototype,
                "%Math%": Math,
                "%Number%": Number,
                "%NumberPrototype%": Number.prototype,
                "%Object%": Object,
                "%ObjectPrototype%": Object.prototype,
                "%ObjProto_toString%": Object.prototype.toString,
                "%ObjProto_valueOf%": Object.prototype.valueOf,
                "%parseFloat%": parseFloat,
                "%parseInt%": parseInt,
                "%Promise%": "undefined" == typeof Promise ? void 0 : Promise,
                "%PromisePrototype%": "undefined" == typeof Promise ? void 0 : Promise.prototype,
                "%PromiseProto_then%": "undefined" == typeof Promise ? void 0 : Promise.prototype.then,
                "%Promise_all%": "undefined" == typeof Promise ? void 0 : Promise.all,
                "%Promise_reject%": "undefined" == typeof Promise ? void 0 : Promise.reject,
                "%Promise_resolve%": "undefined" == typeof Promise ? void 0 : Promise.resolve,
                "%Proxy%": "undefined" == typeof Proxy ? void 0 : Proxy,
                "%RangeError%": RangeError,
                "%RangeErrorPrototype%": RangeError.prototype,
                "%ReferenceError%": ReferenceError,
                "%ReferenceErrorPrototype%": ReferenceError.prototype,
                "%Reflect%": "undefined" == typeof Reflect ? void 0 : Reflect,
                "%RegExp%": RegExp,
                "%RegExpPrototype%": RegExp.prototype,
                "%Set%": "undefined" == typeof Set ? void 0 : Set,
                "%SetIteratorPrototype%": "undefined" != typeof Set && s ? c((new Set)[Symbol.iterator]()) : void 0,
                "%SetPrototype%": "undefined" == typeof Set ? void 0 : Set.prototype,
                "%SharedArrayBuffer%": "undefined" == typeof SharedArrayBuffer ? void 0 : SharedArrayBuffer,
                "%SharedArrayBufferPrototype%": "undefined" == typeof SharedArrayBuffer ? void 0 : SharedArrayBuffer.prototype,
                "%String%": String,
                "%StringIteratorPrototype%": s ? c(""[Symbol.iterator]()) : void 0,
                "%StringPrototype%": String.prototype,
                "%Symbol%": s ? Symbol : void 0,
                "%SymbolPrototype%": s ? Symbol.prototype : void 0,
                "%SyntaxError%": SyntaxError,
                "%SyntaxErrorPrototype%": SyntaxError.prototype,
                "%ThrowTypeError%": o,
                "%TypedArray%": u,
                "%TypedArrayPrototype%": u ? u.prototype : void 0,
                "%TypeError%": r,
                "%TypeErrorPrototype%": r.prototype,
                "%Uint8Array%": "undefined" == typeof Uint8Array ? void 0 : Uint8Array,
                "%Uint8ArrayPrototype%": "undefined" == typeof Uint8Array ? void 0 : Uint8Array.prototype,
                "%Uint8ClampedArray%": "undefined" == typeof Uint8ClampedArray ? void 0 : Uint8ClampedArray,
                "%Uint8ClampedArrayPrototype%": "undefined" == typeof Uint8ClampedArray ? void 0 : Uint8ClampedArray.prototype,
                "%Uint16Array%": "undefined" == typeof Uint16Array ? void 0 : Uint16Array,
                "%Uint16ArrayPrototype%": "undefined" == typeof Uint16Array ? void 0 : Uint16Array.prototype,
                "%Uint32Array%": "undefined" == typeof Uint32Array ? void 0 : Uint32Array,
                "%Uint32ArrayPrototype%": "undefined" == typeof Uint32Array ? void 0 : Uint32Array.prototype,
                "%URIError%": URIError,
                "%URIErrorPrototype%": URIError.prototype,
                "%WeakMap%": "undefined" == typeof WeakMap ? void 0 : WeakMap,
                "%WeakMapPrototype%": "undefined" == typeof WeakMap ? void 0 : WeakMap.prototype,
                "%WeakSet%": "undefined" == typeof WeakSet ? void 0 : WeakSet,
                "%WeakSetPrototype%": "undefined" == typeof WeakSet ? void 0 : WeakSet.prototype
            }, p = n(172).call(Function.call, String.prototype.replace),
            d = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,
            f = /\\(\\)?/g, m = function (e) {
                var t = [];
                return p(e, d, (function (e, n, r, i) {
                    t[t.length] = r ? p(i, f, "$1") : n || e
                })), t
            }, v = function (e, t) {
                if (!(e in h)) throw new SyntaxError("intrinsic " + e + " does not exist!");
                if (void 0 === h[e] && !t) throw new r("intrinsic " + e + " exists, but is not available. Please file an issue!");
                return h[e]
            };
        e.exports = function (e, t) {
            if ("string" != typeof e || 0 === e.length) throw new TypeError("intrinsic name must be a non-empty string");
            if (arguments.length > 1 && "boolean" != typeof t) throw new TypeError('"allowMissing" argument must be a boolean');
            for (var n = m(e), a = v("%" + (n.length > 0 ? n[0] : "") + "%", t), o = 1; o < n.length; o += 1) if (null != a) if (i && o + 1 >= n.length) {
                var s = i(a, n[o]);
                if (!t && !(n[o] in a)) throw new r("base intrinsic for " + e + " exists, but the property is not available.");
                a = s ? s.get || s.value : a[n[o]]
            } else a = a[n[o]];
            return a
        }
    }
}]);

